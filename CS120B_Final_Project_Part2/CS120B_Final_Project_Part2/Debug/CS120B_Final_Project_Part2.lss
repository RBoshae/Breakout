
CS120B_Final_Project_Part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000057a  0000060e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000057a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  0080010a  0080010a  00000618  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000648  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d99  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ce  00000000  00000000  00001499  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000624  00000000  00000000  00001e67  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  0000248c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ec  00000000  00000000  000025e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000044b  00000000  00000000  00002ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00003117  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	06 c2       	rjmp	.+1036   	; 0x442 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e7       	ldi	r30, 0x7A	; 122
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 32       	cpi	r26, 0x2E	; 46
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0d d2       	rcall	.+1050   	; 0x4de <main>
  c4:	58 c2       	rjmp	.+1200   	; 0x576 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Output_Tick>:
	//Enable global interrupts
	SREG |= 0x80;	// 0x80: 1000000
}

void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
  c8:	82 30       	cpi	r24, 0x02	; 2
  ca:	91 05       	cpc	r25, r1
  cc:	81 f0       	breq	.+32     	; 0xee <Output_Tick+0x26>
  ce:	83 30       	cpi	r24, 0x03	; 3
  d0:	91 05       	cpc	r25, r1
  d2:	11 f0       	breq	.+4      	; 0xd8 <Output_Tick+0x10>
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	b1 f4       	brne	.+44     	; 0x104 <Output_Tick+0x3c>
  d8:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <PADDLE_PORTA>
  dc:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <OUTPUT_A.1732>
  e0:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <PADDLE_PORTB>
  e4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
  e8:	22 e0       	ldi	r18, 0x02	; 2
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	0d c0       	rjmp	.+26     	; 0x108 <Output_Tick+0x40>
  ee:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <BALL_PORTA>
  f2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <OUTPUT_A.1732>
  f6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <BALL_PORTB>
  fa:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
  fe:	23 e0       	ldi	r18, 0x03	; 3
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <Output_Tick+0x40>
 104:	21 e0       	ldi	r18, 0x01	; 1
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <OUTPUT_A.1732>
 10c:	92 b9       	out	0x02, r25	; 2
 10e:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <__data_end>
 112:	95 b9       	out	0x05, r25	; 5
 114:	c9 01       	movw	r24, r18
 116:	08 95       	ret

00000118 <GetNESControllerButton>:
 118:	41 9a       	sbi	0x08, 1	; 8
 11a:	41 98       	cbi	0x08, 1	; 8
 11c:	40 e0       	ldi	r20, 0x00	; 0
 11e:	50 e0       	ldi	r21, 0x00	; 0
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	26 b1       	in	r18, 0x06	; 6
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	20 95       	com	r18
 128:	30 95       	com	r19
 12a:	22 fb       	bst	r18, 2
 12c:	66 27       	eor	r22, r22
 12e:	60 f9       	bld	r22, 0
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	9b 01       	movw	r18, r22
 134:	04 2e       	mov	r0, r20
 136:	02 c0       	rjmp	.+4      	; 0x13c <GetNESControllerButton+0x24>
 138:	22 0f       	add	r18, r18
 13a:	33 1f       	adc	r19, r19
 13c:	0a 94       	dec	r0
 13e:	e2 f7       	brpl	.-8      	; 0x138 <GetNESControllerButton+0x20>
 140:	82 2b       	or	r24, r18
 142:	40 9a       	sbi	0x08, 0	; 8
 144:	40 98       	cbi	0x08, 0	; 8
 146:	4f 5f       	subi	r20, 0xFF	; 255
 148:	5f 4f       	sbci	r21, 0xFF	; 255
 14a:	48 30       	cpi	r20, 0x08	; 8
 14c:	51 05       	cpc	r21, r1
 14e:	49 f7       	brne	.-46     	; 0x122 <GetNESControllerButton+0xa>
 150:	08 95       	ret

00000152 <Paddle_Tick>:
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	ec 01       	movw	r28, r24
 158:	df df       	rcall	.-66     	; 0x118 <GetNESControllerButton>
 15a:	c3 30       	cpi	r28, 0x03	; 3
 15c:	d1 05       	cpc	r29, r1
 15e:	a1 f0       	breq	.+40     	; 0x188 <Paddle_Tick+0x36>
 160:	3c f4       	brge	.+14     	; 0x170 <Paddle_Tick+0x1e>
 162:	c1 30       	cpi	r28, 0x01	; 1
 164:	d1 05       	cpc	r29, r1
 166:	69 f1       	breq	.+90     	; 0x1c2 <Paddle_Tick+0x70>
 168:	c2 30       	cpi	r28, 0x02	; 2
 16a:	d1 05       	cpc	r29, r1
 16c:	49 f0       	breq	.+18     	; 0x180 <Paddle_Tick+0x2e>
 16e:	20 c0       	rjmp	.+64     	; 0x1b0 <Paddle_Tick+0x5e>
 170:	c6 30       	cpi	r28, 0x06	; 6
 172:	d1 05       	cpc	r29, r1
 174:	0c f4       	brge	.+2      	; 0x178 <Paddle_Tick+0x26>
 176:	46 c0       	rjmp	.+140    	; 0x204 <Paddle_Tick+0xb2>
 178:	c6 30       	cpi	r28, 0x06	; 6
 17a:	d1 05       	cpc	r29, r1
 17c:	51 f0       	breq	.+20     	; 0x192 <Paddle_Tick+0x40>
 17e:	18 c0       	rjmp	.+48     	; 0x1b0 <Paddle_Tick+0x5e>
 180:	88 30       	cpi	r24, 0x08	; 8
 182:	09 f0       	breq	.+2      	; 0x186 <Paddle_Tick+0x34>
 184:	41 c0       	rjmp	.+130    	; 0x208 <Paddle_Tick+0xb6>
 186:	1d c0       	rjmp	.+58     	; 0x1c2 <Paddle_Tick+0x70>
 188:	80 34       	cpi	r24, 0x40	; 64
 18a:	01 f1       	breq	.+64     	; 0x1cc <Paddle_Tick+0x7a>
 18c:	80 38       	cpi	r24, 0x80	; 128
 18e:	c9 f4       	brne	.+50     	; 0x1c2 <Paddle_Tick+0x70>
 190:	28 c0       	rjmp	.+80     	; 0x1e2 <Paddle_Tick+0x90>
 192:	88 23       	and	r24, r24
 194:	b1 f0       	breq	.+44     	; 0x1c2 <Paddle_Tick+0x70>
 196:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <button_hold_count.1665>
 19a:	92 30       	cpi	r25, 0x02	; 2
 19c:	20 f4       	brcc	.+8      	; 0x1a6 <Paddle_Tick+0x54>
 19e:	9f 5f       	subi	r25, 0xFF	; 255
 1a0:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <button_hold_count.1665>
 1a4:	31 c0       	rjmp	.+98     	; 0x208 <Paddle_Tick+0xb6>
 1a6:	80 34       	cpi	r24, 0x40	; 64
 1a8:	89 f0       	breq	.+34     	; 0x1cc <Paddle_Tick+0x7a>
 1aa:	80 38       	cpi	r24, 0x80	; 128
 1ac:	69 f5       	brne	.+90     	; 0x208 <Paddle_Tick+0xb6>
 1ae:	19 c0       	rjmp	.+50     	; 0x1e2 <Paddle_Tick+0x90>
 1b0:	80 e8       	ldi	r24, 0x80	; 128
 1b2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <bottom_row.1663>
 1b6:	88 ef       	ldi	r24, 0xF8	; 248
 1b8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <paddle_pos.1664>
 1bc:	c1 e0       	ldi	r28, 0x01	; 1
 1be:	d0 e0       	ldi	r29, 0x00	; 0
 1c0:	23 c0       	rjmp	.+70     	; 0x208 <Paddle_Tick+0xb6>
 1c2:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <button_hold_count.1665>
 1c6:	c3 e0       	ldi	r28, 0x03	; 3
 1c8:	d0 e0       	ldi	r29, 0x00	; 0
 1ca:	1e c0       	rjmp	.+60     	; 0x208 <Paddle_Tick+0xb6>
 1cc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <paddle_pos.1664>
 1d0:	8f 31       	cpi	r24, 0x1F	; 31
 1d2:	91 f0       	breq	.+36     	; 0x1f8 <Paddle_Tick+0xa6>
 1d4:	88 0f       	add	r24, r24
 1d6:	81 60       	ori	r24, 0x01	; 1
 1d8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <paddle_pos.1664>
 1dc:	c4 e0       	ldi	r28, 0x04	; 4
 1de:	d0 e0       	ldi	r29, 0x00	; 0
 1e0:	13 c0       	rjmp	.+38     	; 0x208 <Paddle_Tick+0xb6>
 1e2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <paddle_pos.1664>
 1e6:	88 3f       	cpi	r24, 0xF8	; 248
 1e8:	51 f0       	breq	.+20     	; 0x1fe <Paddle_Tick+0xac>
 1ea:	86 95       	lsr	r24
 1ec:	80 68       	ori	r24, 0x80	; 128
 1ee:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <paddle_pos.1664>
 1f2:	c5 e0       	ldi	r28, 0x05	; 5
 1f4:	d0 e0       	ldi	r29, 0x00	; 0
 1f6:	08 c0       	rjmp	.+16     	; 0x208 <Paddle_Tick+0xb6>
 1f8:	c4 e0       	ldi	r28, 0x04	; 4
 1fa:	d0 e0       	ldi	r29, 0x00	; 0
 1fc:	05 c0       	rjmp	.+10     	; 0x208 <Paddle_Tick+0xb6>
 1fe:	c5 e0       	ldi	r28, 0x05	; 5
 200:	d0 e0       	ldi	r29, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <Paddle_Tick+0xb6>
 204:	c6 e0       	ldi	r28, 0x06	; 6
 206:	d0 e0       	ldi	r29, 0x00	; 0
 208:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <bottom_row.1663>
 20c:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <PADDLE_PORTA>
 210:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <paddle_pos.1664>
 214:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <PADDLE_PORTB>
 218:	ce 01       	movw	r24, r28
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <Ball_Tick>:
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	ec 01       	movw	r28, r24
 226:	78 df       	rcall	.-272    	; 0x118 <GetNESControllerButton>
 228:	c5 30       	cpi	r28, 0x05	; 5
 22a:	d1 05       	cpc	r29, r1
 22c:	a1 f0       	breq	.+40     	; 0x256 <Ball_Tick+0x36>
 22e:	44 f4       	brge	.+16     	; 0x240 <Ball_Tick+0x20>
 230:	c1 30       	cpi	r28, 0x01	; 1
 232:	d1 05       	cpc	r29, r1
 234:	09 f4       	brne	.+2      	; 0x238 <Ball_Tick+0x18>
 236:	80 c0       	rjmp	.+256    	; 0x338 <Ball_Tick+0x118>
 238:	c2 30       	cpi	r28, 0x02	; 2
 23a:	d1 05       	cpc	r29, r1
 23c:	41 f0       	breq	.+16     	; 0x24e <Ball_Tick+0x2e>
 23e:	3b c0       	rjmp	.+118    	; 0x2b6 <Ball_Tick+0x96>
 240:	c7 30       	cpi	r28, 0x07	; 7
 242:	d1 05       	cpc	r29, r1
 244:	01 f1       	breq	.+64     	; 0x286 <Ball_Tick+0x66>
 246:	8c f0       	brlt	.+34     	; 0x26a <Ball_Tick+0x4a>
 248:	28 97       	sbiw	r28, 0x08	; 8
 24a:	39 f1       	breq	.+78     	; 0x29a <Ball_Tick+0x7a>
 24c:	34 c0       	rjmp	.+104    	; 0x2b6 <Ball_Tick+0x96>
 24e:	88 30       	cpi	r24, 0x08	; 8
 250:	09 f0       	breq	.+2      	; 0x254 <Ball_Tick+0x34>
 252:	74 c0       	rjmp	.+232    	; 0x33c <Ball_Tick+0x11c>
 254:	39 c0       	rjmp	.+114    	; 0x2c8 <Ball_Tick+0xa8>
 256:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_column.1700>
 25a:	8f 37       	cpi	r24, 0x7F	; 127
 25c:	09 f4       	brne	.+2      	; 0x260 <Ball_Tick+0x40>
 25e:	50 c0       	rjmp	.+160    	; 0x300 <Ball_Tick+0xe0>
 260:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 264:	81 30       	cpi	r24, 0x01	; 1
 266:	81 f5       	brne	.+96     	; 0x2c8 <Ball_Tick+0xa8>
 268:	3d c0       	rjmp	.+122    	; 0x2e4 <Ball_Tick+0xc4>
 26a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_column.1700>
 26e:	8e 3f       	cpi	r24, 0xFE	; 254
 270:	29 f4       	brne	.+10     	; 0x27c <Ball_Tick+0x5c>
 272:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 276:	81 30       	cpi	r24, 0x01	; 1
 278:	39 f5       	brne	.+78     	; 0x2c8 <Ball_Tick+0xa8>
 27a:	34 c0       	rjmp	.+104    	; 0x2e4 <Ball_Tick+0xc4>
 27c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 280:	81 30       	cpi	r24, 0x01	; 1
 282:	f1 f5       	brne	.+124    	; 0x300 <Ball_Tick+0xe0>
 284:	4b c0       	rjmp	.+150    	; 0x31c <Ball_Tick+0xfc>
 286:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_column.1700>
 28a:	8f 37       	cpi	r24, 0x7F	; 127
 28c:	09 f4       	brne	.+2      	; 0x290 <Ball_Tick+0x70>
 28e:	46 c0       	rjmp	.+140    	; 0x31c <Ball_Tick+0xfc>
 290:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 294:	80 34       	cpi	r24, 0x40	; 64
 296:	31 f5       	brne	.+76     	; 0x2e4 <Ball_Tick+0xc4>
 298:	17 c0       	rjmp	.+46     	; 0x2c8 <Ball_Tick+0xa8>
 29a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_column.1700>
 29e:	8e 3f       	cpi	r24, 0xFE	; 254
 2a0:	29 f4       	brne	.+10     	; 0x2ac <Ball_Tick+0x8c>
 2a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2a6:	80 34       	cpi	r24, 0x40	; 64
 2a8:	e9 f4       	brne	.+58     	; 0x2e4 <Ball_Tick+0xc4>
 2aa:	0e c0       	rjmp	.+28     	; 0x2c8 <Ball_Tick+0xa8>
 2ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2b0:	80 34       	cpi	r24, 0x40	; 64
 2b2:	a1 f5       	brne	.+104    	; 0x31c <Ball_Tick+0xfc>
 2b4:	25 c0       	rjmp	.+74     	; 0x300 <Ball_Tick+0xe0>
 2b6:	80 e4       	ldi	r24, 0x40	; 64
 2b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2bc:	8b ef       	ldi	r24, 0xFB	; 251
 2be:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ball_column.1700>
 2c2:	c1 e0       	ldi	r28, 0x01	; 1
 2c4:	d0 e0       	ldi	r29, 0x00	; 0
 2c6:	3a c0       	rjmp	.+116    	; 0x33c <Ball_Tick+0x11c>
 2c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2cc:	86 95       	lsr	r24
 2ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2d2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_column.1700>
 2d6:	88 0f       	add	r24, r24
 2d8:	81 60       	ori	r24, 0x01	; 1
 2da:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ball_column.1700>
 2de:	c5 e0       	ldi	r28, 0x05	; 5
 2e0:	d0 e0       	ldi	r29, 0x00	; 0
 2e2:	2c c0       	rjmp	.+88     	; 0x33c <Ball_Tick+0x11c>
 2e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2e8:	88 0f       	add	r24, r24
 2ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2ee:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_column.1700>
 2f2:	88 0f       	add	r24, r24
 2f4:	81 60       	ori	r24, 0x01	; 1
 2f6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ball_column.1700>
 2fa:	c7 e0       	ldi	r28, 0x07	; 7
 2fc:	d0 e0       	ldi	r29, 0x00	; 0
 2fe:	1e c0       	rjmp	.+60     	; 0x33c <Ball_Tick+0x11c>
 300:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 304:	86 95       	lsr	r24
 306:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 30a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_column.1700>
 30e:	86 95       	lsr	r24
 310:	80 68       	ori	r24, 0x80	; 128
 312:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ball_column.1700>
 316:	c6 e0       	ldi	r28, 0x06	; 6
 318:	d0 e0       	ldi	r29, 0x00	; 0
 31a:	10 c0       	rjmp	.+32     	; 0x33c <Ball_Tick+0x11c>
 31c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 320:	88 0f       	add	r24, r24
 322:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 326:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_column.1700>
 32a:	86 95       	lsr	r24
 32c:	80 68       	ori	r24, 0x80	; 128
 32e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ball_column.1700>
 332:	c8 e0       	ldi	r28, 0x08	; 8
 334:	d0 e0       	ldi	r29, 0x00	; 0
 336:	02 c0       	rjmp	.+4      	; 0x33c <Ball_Tick+0x11c>
 338:	c2 e0       	ldi	r28, 0x02	; 2
 33a:	d0 e0       	ldi	r29, 0x00	; 0
 33c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 340:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <BALL_PORTA>
 344:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_column.1700>
 348:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <BALL_PORTB>
 34c:	ce 01       	movw	r24, r28
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	08 95       	ret

00000354 <TimerSet>:
 354:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <_avr_timer_M>
 358:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <_avr_timer_M+0x1>
 35c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_M+0x2>
 360:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_M+0x3>
 364:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <_avr_timer_cntcurr>
 368:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <_avr_timer_cntcurr+0x1>
 36c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <_avr_timer_cntcurr+0x2>
 370:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <_avr_timer_cntcurr+0x3>
 374:	08 95       	ret

00000376 <TimerOn>:
 376:	8b e0       	ldi	r24, 0x0B	; 11
 378:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 37c:	8d e7       	ldi	r24, 0x7D	; 125
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 384:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 388:	82 e0       	ldi	r24, 0x02	; 2
 38a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 38e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 392:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 396:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_M>
 39a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_M+0x1>
 39e:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_M+0x2>
 3a2:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_M+0x3>
 3a6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_avr_timer_cntcurr>
 3aa:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <_avr_timer_cntcurr+0x1>
 3ae:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <_avr_timer_cntcurr+0x2>
 3b2:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <_avr_timer_cntcurr+0x3>
 3b6:	8f b7       	in	r24, 0x3f	; 63
 3b8:	80 68       	ori	r24, 0x80	; 128
 3ba:	8f bf       	out	0x3f, r24	; 63
 3bc:	08 95       	ret

000003be <TimerISR>:
	PORTB = OUTPUT_B;
	return state;
};


void TimerISR() {
 3be:	ef 92       	push	r14
 3c0:	ff 92       	push	r15
 3c2:	0f 93       	push	r16
 3c4:	1f 93       	push	r17
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
 3ca:	c2 e1       	ldi	r28, 0x12	; 18
 3cc:	d1 e0       	ldi	r29, 0x01	; 1
 3ce:	0f 2e       	mov	r0, r31
 3d0:	f6 e3       	ldi	r31, 0x36	; 54
 3d2:	ef 2e       	mov	r14, r31
 3d4:	f1 e0       	ldi	r31, 0x01	; 1
 3d6:	ff 2e       	mov	r15, r31
 3d8:	f0 2d       	mov	r31, r0
 3da:	8e 01       	movw	r16, r28
	unsigned char i;
	for(i = 0; i < tasksNum; ++i) { // Heart of the scheduler code
		if (tasks[i].elapsedTime >= tasks[i].period)
 3dc:	4e 81       	ldd	r20, Y+6	; 0x06
 3de:	5f 81       	ldd	r21, Y+7	; 0x07
 3e0:	68 85       	ldd	r22, Y+8	; 0x08
 3e2:	79 85       	ldd	r23, Y+9	; 0x09
 3e4:	8a 81       	ldd	r24, Y+2	; 0x02
 3e6:	9b 81       	ldd	r25, Y+3	; 0x03
 3e8:	ac 81       	ldd	r26, Y+4	; 0x04
 3ea:	bd 81       	ldd	r27, Y+5	; 0x05
 3ec:	48 17       	cp	r20, r24
 3ee:	59 07       	cpc	r21, r25
 3f0:	6a 07       	cpc	r22, r26
 3f2:	7b 07       	cpc	r23, r27
 3f4:	58 f0       	brcs	.+22     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		{ // Ready
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
 3f6:	ea 85       	ldd	r30, Y+10	; 0x0a
 3f8:	fb 85       	ldd	r31, Y+11	; 0x0b
 3fa:	88 81       	ld	r24, Y
 3fc:	99 81       	ldd	r25, Y+1	; 0x01
 3fe:	09 95       	icall
 400:	99 83       	std	Y+1, r25	; 0x01
 402:	88 83       	st	Y, r24
			tasks[i].elapsedTime = 0;
 404:	1e 82       	std	Y+6, r1	; 0x06
 406:	1f 82       	std	Y+7, r1	; 0x07
 408:	18 86       	std	Y+8, r1	; 0x08
 40a:	19 86       	std	Y+9, r1	; 0x09
		}
		tasks[i].elapsedTime += tasksPeriodGCD;
 40c:	f8 01       	movw	r30, r16
 40e:	86 81       	ldd	r24, Z+6	; 0x06
 410:	97 81       	ldd	r25, Z+7	; 0x07
 412:	a0 85       	ldd	r26, Z+8	; 0x08
 414:	b1 85       	ldd	r27, Z+9	; 0x09
 416:	8c 59       	subi	r24, 0x9C	; 156
 418:	9f 4f       	sbci	r25, 0xFF	; 255
 41a:	af 4f       	sbci	r26, 0xFF	; 255
 41c:	bf 4f       	sbci	r27, 0xFF	; 255
 41e:	86 83       	std	Z+6, r24	; 0x06
 420:	97 83       	std	Z+7, r25	; 0x07
 422:	a0 87       	std	Z+8, r26	; 0x08
 424:	b1 87       	std	Z+9, r27	; 0x09
 426:	2c 96       	adiw	r28, 0x0c	; 12
};


void TimerISR() {
	unsigned char i;
	for(i = 0; i < tasksNum; ++i) { // Heart of the scheduler code
 428:	ce 15       	cp	r28, r14
 42a:	df 05       	cpc	r29, r15
 42c:	b1 f6       	brne	.-84     	; 0x3da <TimerISR+0x1c>
			tasks[i].elapsedTime = 0;
		}
		tasks[i].elapsedTime += tasksPeriodGCD;

	}
	TimerFlag = 1;
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <TimerFlag>
}
 434:	df 91       	pop	r29
 436:	cf 91       	pop	r28
 438:	1f 91       	pop	r17
 43a:	0f 91       	pop	r16
 43c:	ff 90       	pop	r15
 43e:	ef 90       	pop	r14
 440:	08 95       	ret

00000442 <__vector_13>:



// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 442:	1f 92       	push	r1
 444:	0f 92       	push	r0
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	0f 92       	push	r0
 44a:	11 24       	eor	r1, r1
 44c:	0b b6       	in	r0, 0x3b	; 59
 44e:	0f 92       	push	r0
 450:	2f 93       	push	r18
 452:	3f 93       	push	r19
 454:	4f 93       	push	r20
 456:	5f 93       	push	r21
 458:	6f 93       	push	r22
 45a:	7f 93       	push	r23
 45c:	8f 93       	push	r24
 45e:	9f 93       	push	r25
 460:	af 93       	push	r26
 462:	bf 93       	push	r27
 464:	ef 93       	push	r30
 466:	ff 93       	push	r31
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 468:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <_avr_timer_cntcurr>
 46c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <_avr_timer_cntcurr+0x1>
 470:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <_avr_timer_cntcurr+0x2>
 474:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <_avr_timer_cntcurr+0x3>
 478:	01 97       	sbiw	r24, 0x01	; 1
 47a:	a1 09       	sbc	r26, r1
 47c:	b1 09       	sbc	r27, r1
 47e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_avr_timer_cntcurr>
 482:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <_avr_timer_cntcurr+0x1>
 486:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <_avr_timer_cntcurr+0x2>
 48a:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 48e:	89 2b       	or	r24, r25
 490:	8a 2b       	or	r24, r26
 492:	8b 2b       	or	r24, r27
		TimerISR(); 				// Call the ISR that the user uses
 494:	89 f4       	brne	.+34     	; 0x4b8 <__vector_13+0x76>
		_avr_timer_cntcurr = _avr_timer_M;
 496:	93 df       	rcall	.-218    	; 0x3be <TimerISR>
 498:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_M>
 49c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_M+0x1>
 4a0:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_M+0x2>
 4a4:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_M+0x3>
 4a8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_avr_timer_cntcurr>
 4ac:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <_avr_timer_cntcurr+0x1>
 4b0:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <_avr_timer_cntcurr+0x2>
 4b4:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <_avr_timer_cntcurr+0x3>
	}
}
 4b8:	ff 91       	pop	r31
 4ba:	ef 91       	pop	r30
 4bc:	bf 91       	pop	r27
 4be:	af 91       	pop	r26
 4c0:	9f 91       	pop	r25
 4c2:	8f 91       	pop	r24
 4c4:	7f 91       	pop	r23
 4c6:	6f 91       	pop	r22
 4c8:	5f 91       	pop	r21
 4ca:	4f 91       	pop	r20
 4cc:	3f 91       	pop	r19
 4ce:	2f 91       	pop	r18
 4d0:	0f 90       	pop	r0
 4d2:	0b be       	out	0x3b, r0	; 59
 4d4:	0f 90       	pop	r0
 4d6:	0f be       	out	0x3f, r0	; 63
 4d8:	0f 90       	pop	r0
 4da:	1f 90       	pop	r1
 4dc:	18 95       	reti

000004de <main>:


int main() {

	DDRB = 0xFF; PORTB = 0x00;
 4de:	8f ef       	ldi	r24, 0xFF	; 255
 4e0:	84 b9       	out	0x04, r24	; 4
 4e2:	15 b8       	out	0x05, r1	; 5
	DDRA = 0xFF; PORTA = 0x00; // Initialize to output to PORT A
 4e4:	81 b9       	out	0x01, r24	; 1
 4e6:	12 b8       	out	0x02, r1	; 2
	DDRC = 0x03; PORTC = 0x04;
 4e8:	83 e0       	ldi	r24, 0x03	; 3
 4ea:	87 b9       	out	0x07, r24	; 7
 4ec:	84 e0       	ldi	r24, 0x04	; 4
 4ee:	88 b9       	out	0x08, r24	; 8



	unsigned char i = 0;
	tasks[i].state = P_INIT;
 4f0:	e2 e1       	ldi	r30, 0x12	; 18
 4f2:	f1 e0       	ldi	r31, 0x01	; 1
 4f4:	21 e0       	ldi	r18, 0x01	; 1
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	31 83       	std	Z+1, r19	; 0x01
 4fa:	20 83       	st	Z, r18
	tasks[i].period = periodPaddle;
 4fc:	84 e6       	ldi	r24, 0x64	; 100
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	a0 e0       	ldi	r26, 0x00	; 0
 502:	b0 e0       	ldi	r27, 0x00	; 0
 504:	82 83       	std	Z+2, r24	; 0x02
 506:	93 83       	std	Z+3, r25	; 0x03
 508:	a4 83       	std	Z+4, r26	; 0x04
 50a:	b5 83       	std	Z+5, r27	; 0x05
	tasks[i].elapsedTime = tasks[i].period;
 50c:	86 83       	std	Z+6, r24	; 0x06
 50e:	97 83       	std	Z+7, r25	; 0x07
 510:	a0 87       	std	Z+8, r26	; 0x08
 512:	b1 87       	std	Z+9, r27	; 0x09
	tasks[i].TickFct= &Paddle_Tick;
 514:	49 ea       	ldi	r20, 0xA9	; 169
 516:	50 e0       	ldi	r21, 0x00	; 0
 518:	53 87       	std	Z+11, r21	; 0x0b
 51a:	42 87       	std	Z+10, r20	; 0x0a
	++i;
	tasks[i].state = B_INIT;
 51c:	35 87       	std	Z+13, r19	; 0x0d
 51e:	24 87       	std	Z+12, r18	; 0x0c
	tasks[i].period = periodBall;
 520:	48 ec       	ldi	r20, 0xC8	; 200
 522:	50 e0       	ldi	r21, 0x00	; 0
 524:	60 e0       	ldi	r22, 0x00	; 0
 526:	70 e0       	ldi	r23, 0x00	; 0
 528:	46 87       	std	Z+14, r20	; 0x0e
 52a:	57 87       	std	Z+15, r21	; 0x0f
 52c:	60 8b       	std	Z+16, r22	; 0x10
 52e:	71 8b       	std	Z+17, r23	; 0x11
	tasks[i].elapsedTime = tasks[i].period;
 530:	42 8b       	std	Z+18, r20	; 0x12
 532:	53 8b       	std	Z+19, r21	; 0x13
 534:	64 8b       	std	Z+20, r22	; 0x14
 536:	75 8b       	std	Z+21, r23	; 0x15
	tasks[i].TickFct= &Ball_Tick;
 538:	40 e1       	ldi	r20, 0x10	; 16
 53a:	51 e0       	ldi	r21, 0x01	; 1
 53c:	57 8b       	std	Z+23, r21	; 0x17
 53e:	46 8b       	std	Z+22, r20	; 0x16
	++i;
	tasks[i].state = O_INIT;
 540:	31 8f       	std	Z+25, r19	; 0x19
 542:	20 8f       	std	Z+24, r18	; 0x18
	tasks[i].period = periodOutput;
 544:	82 8f       	std	Z+26, r24	; 0x1a
 546:	93 8f       	std	Z+27, r25	; 0x1b
 548:	a4 8f       	std	Z+28, r26	; 0x1c
 54a:	b5 8f       	std	Z+29, r27	; 0x1d
	tasks[i].elapsedTime = tasks[i].period;
 54c:	86 8f       	std	Z+30, r24	; 0x1e
 54e:	97 8f       	std	Z+31, r25	; 0x1f
 550:	a0 a3       	std	Z+32, r26	; 0x20
 552:	b1 a3       	std	Z+33, r27	; 0x21
	tasks[i].TickFct= &Output_Tick;
 554:	84 e6       	ldi	r24, 0x64	; 100
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	93 a3       	std	Z+35, r25	; 0x23
 55a:	82 a3       	std	Z+34, r24	; 0x22

 	TimerSet(tasksPeriodGCD);
 55c:	64 e6       	ldi	r22, 0x64	; 100
 55e:	70 e0       	ldi	r23, 0x00	; 0
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	90 e0       	ldi	r25, 0x00	; 0
 	TimerOn();
 564:	f7 de       	rcall	.-530    	; 0x354 <TimerSet>
 566:	07 df       	rcall	.-498    	; 0x376 <TimerOn>
	
	while(1)
	{
		while (!TimerFlag);
 568:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <TimerFlag>
 56c:	88 23       	and	r24, r24
 56e:	e1 f3       	breq	.-8      	; 0x568 <main+0x8a>
		TimerFlag = 0;
 570:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <TimerFlag>
			
		
	}
 574:	f9 cf       	rjmp	.-14     	; 0x568 <main+0x8a>

00000576 <_exit>:
 576:	f8 94       	cli

00000578 <__stop_program>:
 578:	ff cf       	rjmp	.-2      	; 0x578 <__stop_program>
