
CS120B_Final_Project_Part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007a  00800100  000013ba  0000144e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000091  0080017a  0080017a  000014c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000161f  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a4e  00000000  00000000  00002c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000129c  00000000  00000000  0000367d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d0  00000000  00000000  0000491c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a8e  00000000  00000000  00004bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d88  00000000  00000000  0000567a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00006402  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6b c0       	rjmp	.+214    	; 0xd8 <__ctors_end>
       2:	00 00       	nop
       4:	88 c0       	rjmp	.+272    	; 0x116 <__bad_interrupt>
       6:	00 00       	nop
       8:	86 c0       	rjmp	.+268    	; 0x116 <__bad_interrupt>
       a:	00 00       	nop
       c:	84 c0       	rjmp	.+264    	; 0x116 <__bad_interrupt>
       e:	00 00       	nop
      10:	82 c0       	rjmp	.+260    	; 0x116 <__bad_interrupt>
      12:	00 00       	nop
      14:	80 c0       	rjmp	.+256    	; 0x116 <__bad_interrupt>
      16:	00 00       	nop
      18:	7e c0       	rjmp	.+252    	; 0x116 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7c c0       	rjmp	.+248    	; 0x116 <__bad_interrupt>
      1e:	00 00       	nop
      20:	7a c0       	rjmp	.+244    	; 0x116 <__bad_interrupt>
      22:	00 00       	nop
      24:	78 c0       	rjmp	.+240    	; 0x116 <__bad_interrupt>
      26:	00 00       	nop
      28:	76 c0       	rjmp	.+236    	; 0x116 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	74 c0       	rjmp	.+232    	; 0x116 <__bad_interrupt>
      2e:	00 00       	nop
      30:	72 c0       	rjmp	.+228    	; 0x116 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 f5 08 	jmp	0x11ea	; 0x11ea <__vector_13>
      38:	6e c0       	rjmp	.+220    	; 0x116 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6c c0       	rjmp	.+216    	; 0x116 <__bad_interrupt>
      3e:	00 00       	nop
      40:	6a c0       	rjmp	.+212    	; 0x116 <__bad_interrupt>
      42:	00 00       	nop
      44:	68 c0       	rjmp	.+208    	; 0x116 <__bad_interrupt>
      46:	00 00       	nop
      48:	66 c0       	rjmp	.+204    	; 0x116 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	64 c0       	rjmp	.+200    	; 0x116 <__bad_interrupt>
      4e:	00 00       	nop
      50:	62 c0       	rjmp	.+196    	; 0x116 <__bad_interrupt>
      52:	00 00       	nop
      54:	60 c0       	rjmp	.+192    	; 0x116 <__bad_interrupt>
      56:	00 00       	nop
      58:	5e c0       	rjmp	.+188    	; 0x116 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5c c0       	rjmp	.+184    	; 0x116 <__bad_interrupt>
      5e:	00 00       	nop
      60:	5a c0       	rjmp	.+180    	; 0x116 <__bad_interrupt>
      62:	00 00       	nop
      64:	58 c0       	rjmp	.+176    	; 0x116 <__bad_interrupt>
      66:	00 00       	nop
      68:	56 c0       	rjmp	.+172    	; 0x116 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	54 c0       	rjmp	.+168    	; 0x116 <__bad_interrupt>
      6e:	00 00       	nop
      70:	52 c0       	rjmp	.+164    	; 0x116 <__bad_interrupt>
      72:	00 00       	nop
      74:	50 c0       	rjmp	.+160    	; 0x116 <__bad_interrupt>
      76:	00 00       	nop
      78:	4e c0       	rjmp	.+156    	; 0x116 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4c c0       	rjmp	.+152    	; 0x116 <__bad_interrupt>
      7e:	00 00       	nop
      80:	4a c0       	rjmp	.+148    	; 0x116 <__bad_interrupt>
      82:	00 00       	nop
      84:	48 c0       	rjmp	.+144    	; 0x116 <__bad_interrupt>
      86:	00 00       	nop
      88:	46 c0       	rjmp	.+140    	; 0x116 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	70 01       	movw	r14, r0
      8e:	75 01       	movw	r14, r10
      90:	7a 01       	movw	r14, r20
      92:	8d 01       	movw	r16, r26
      94:	ac 01       	movw	r20, r24
      96:	b5 03       	fmuls	r19, r21
      98:	b5 03       	fmuls	r19, r21
      9a:	cd 01       	movw	r24, r26
      9c:	7a 02       	muls	r23, r26
      9e:	2c 03       	fmul	r18, r20
      a0:	6c 03       	fmul	r22, r20
      a2:	c5 03       	fmuls	r20, r21
      a4:	cc 03       	fmulsu	r20, r20
      a6:	10 04       	cpc	r1, r0
      a8:	10 04       	cpc	r1, r0
      aa:	d3 03       	fmuls	r21, r19
      ac:	d9 03       	fmulsu	r21, r17
      ae:	df 03       	fmulsu	r21, r23
      b0:	f9 03       	fmulsu	r23, r17
      b2:	ed 03       	fmulsu	r22, r21
      b4:	05 04       	cpc	r0, r5
      b6:	b3 05       	cpc	r27, r3
      b8:	df 05       	cpc	r29, r15
      ba:	39 05       	cpc	r19, r9
      bc:	4c 05       	cpc	r20, r12
      be:	36 05       	cpc	r19, r6
      c0:	36 05       	cpc	r19, r6
      c2:	99 05       	cpc	r25, r9
      c4:	94 06       	cpc	r9, r20
      c6:	97 06       	cpc	r9, r23
      c8:	9c 06       	cpc	r9, r28
      ca:	77 07       	cpc	r23, r23
      cc:	a1 06       	cpc	r10, r17
      ce:	4c 07       	cpc	r20, r28
      d0:	91 06       	cpc	r9, r17
      d2:	ec 06       	cpc	r14, r28
      d4:	10 07       	cpc	r17, r16
      d6:	28 07       	cpc	r18, r24

000000d8 <__ctors_end>:
      d8:	11 24       	eor	r1, r1
      da:	1f be       	out	0x3f, r1	; 63
      dc:	cf ef       	ldi	r28, 0xFF	; 255
      de:	d0 e4       	ldi	r29, 0x40	; 64
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
      e4:	11 e0       	ldi	r17, 0x01	; 1
      e6:	a0 e0       	ldi	r26, 0x00	; 0
      e8:	b1 e0       	ldi	r27, 0x01	; 1
      ea:	ea eb       	ldi	r30, 0xBA	; 186
      ec:	f3 e1       	ldi	r31, 0x13	; 19
      ee:	00 e0       	ldi	r16, 0x00	; 0
      f0:	0b bf       	out	0x3b, r16	; 59
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <__do_copy_data+0x14>
      f4:	07 90       	elpm	r0, Z+
      f6:	0d 92       	st	X+, r0
      f8:	aa 37       	cpi	r26, 0x7A	; 122
      fa:	b1 07       	cpc	r27, r17
      fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0x10>

000000fe <__do_clear_bss>:
      fe:	22 e0       	ldi	r18, 0x02	; 2
     100:	aa e7       	ldi	r26, 0x7A	; 122
     102:	b1 e0       	ldi	r27, 0x01	; 1
     104:	01 c0       	rjmp	.+2      	; 0x108 <.do_clear_bss_start>

00000106 <.do_clear_bss_loop>:
     106:	1d 92       	st	X+, r1

00000108 <.do_clear_bss_start>:
     108:	ab 30       	cpi	r26, 0x0B	; 11
     10a:	b2 07       	cpc	r27, r18
     10c:	e1 f7       	brne	.-8      	; 0x106 <.do_clear_bss_loop>
     10e:	0e 94 43 09 	call	0x1286	; 0x1286 <main>
     112:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <_exit>

00000116 <__bad_interrupt>:
     116:	74 cf       	rjmp	.-280    	; 0x0 <__vectors>

00000118 <turn_off_LED.1975>:
	//Enable global interrupts
	SREG |= 0x80;	// 0x80: 1000000
}

void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
     118:	8a 31       	cpi	r24, 0x1A	; 26
     11a:	91 05       	cpc	r25, r1
     11c:	68 f4       	brcc	.+26     	; 0x138 <turn_off_LED.1975+0x20>
     11e:	fc 01       	movw	r30, r24
     120:	e9 52       	subi	r30, 0x29	; 41
     122:	fe 4f       	sbci	r31, 0xFE	; 254
     124:	10 82       	st	Z, r1
     126:	fc 01       	movw	r30, r24
     128:	ef 50       	subi	r30, 0x0F	; 15
     12a:	fe 4f       	sbci	r31, 0xFE	; 254
     12c:	10 82       	st	Z, r1
     12e:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <SCORE>
     132:	8f 5f       	subi	r24, 0xFF	; 255
     134:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <SCORE>
     138:	08 95       	ret

0000013a <paddle_collision_detection.1977>:
     13a:	2f 92       	push	r2
     13c:	3f 92       	push	r3
     13e:	ef 92       	push	r14
     140:	ff 92       	push	r15
     142:	0f 93       	push	r16
     144:	1f 93       	push	r17
     146:	cf 93       	push	r28
     148:	df 93       	push	r29
     14a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <FLOOR>
     14e:	86 95       	lsr	r24
     150:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ball_row.1970>
     154:	89 13       	cpse	r24, r25
     156:	a2 c0       	rjmp	.+324    	; 0x29c <paddle_collision_detection.1977+0x162>
     158:	00 91 04 01 	lds	r16, 0x0104	; 0x800104 <ball_column.1971>
     15c:	a0 2f       	mov	r26, r16
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	20 e0       	ldi	r18, 0x00	; 0
     162:	30 e0       	ldi	r19, 0x00	; 0
     164:	10 e0       	ldi	r17, 0x00	; 0
     166:	e1 ef       	ldi	r30, 0xF1	; 241
     168:	f1 e0       	ldi	r31, 0x01	; 1
     16a:	0f 2e       	mov	r0, r31
     16c:	f7 e0       	ldi	r31, 0x07	; 7
     16e:	ef 2e       	mov	r14, r31
     170:	f1 2c       	mov	r15, r1
     172:	f0 2d       	mov	r31, r0
     174:	ad 01       	movw	r20, r26
     176:	02 2e       	mov	r0, r18
     178:	02 c0       	rjmp	.+4      	; 0x17e <paddle_collision_detection.1977+0x44>
     17a:	55 95       	asr	r21
     17c:	47 95       	ror	r20
     17e:	0a 94       	dec	r0
     180:	e2 f7       	brpl	.-8      	; 0x17a <paddle_collision_detection.1977+0x40>
     182:	80 81       	ld	r24, Z
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	02 2e       	mov	r0, r18
     188:	02 c0       	rjmp	.+4      	; 0x18e <paddle_collision_detection.1977+0x54>
     18a:	95 95       	asr	r25
     18c:	87 95       	ror	r24
     18e:	0a 94       	dec	r0
     190:	e2 f7       	brpl	.-8      	; 0x18a <paddle_collision_detection.1977+0x50>
     192:	78 2f       	mov	r23, r24
     194:	71 70       	andi	r23, 0x01	; 1
     196:	64 2f       	mov	r22, r20
     198:	61 70       	andi	r22, 0x01	; 1
     19a:	40 ff       	sbrs	r20, 0
     19c:	04 c0       	rjmp	.+8      	; 0x1a6 <paddle_collision_detection.1977+0x6c>
     19e:	71 11       	cpse	r23, r1
     1a0:	3b c0       	rjmp	.+118    	; 0x218 <paddle_collision_detection.1977+0xde>
     1a2:	1f 5f       	subi	r17, 0xFF	; 255
     1a4:	3d c0       	rjmp	.+122    	; 0x220 <paddle_collision_detection.1977+0xe6>
     1a6:	61 11       	cpse	r22, r1
     1a8:	37 c0       	rjmp	.+110    	; 0x218 <paddle_collision_detection.1977+0xde>
     1aa:	71 30       	cpi	r23, 0x01	; 1
     1ac:	a9 f5       	brne	.+106    	; 0x218 <paddle_collision_detection.1977+0xde>
     1ae:	80 81       	ld	r24, Z
     1b0:	a9 01       	movw	r20, r18
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	b9 01       	movw	r22, r18
     1b6:	6f 5f       	subi	r22, 0xFF	; 255
     1b8:	7f 4f       	sbci	r23, 0xFF	; 255
     1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <paddle_collision_detection.1977+0x86>
     1bc:	95 95       	asr	r25
     1be:	87 95       	ror	r24
     1c0:	6a 95       	dec	r22
     1c2:	e2 f7       	brpl	.-8      	; 0x1bc <paddle_collision_detection.1977+0x82>
     1c4:	80 fd       	sbrc	r24, 0
     1c6:	12 c0       	rjmp	.+36     	; 0x1ec <paddle_collision_detection.1977+0xb2>
     1c8:	e1 01       	movw	r28, r2
     1ca:	88 81       	ld	r24, Y
     1cc:	99 81       	ldd	r25, Y+1	; 0x01
     1ce:	09 97       	sbiw	r24, 0x09	; 9
     1d0:	09 f0       	breq	.+2      	; 0x1d4 <paddle_collision_detection.1977+0x9a>
     1d2:	5c c0       	rjmp	.+184    	; 0x28c <paddle_collision_detection.1977+0x152>
     1d4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <RIGHT_WALL>
     1d8:	08 13       	cpse	r16, r24
     1da:	03 c0       	rjmp	.+6      	; 0x1e2 <paddle_collision_detection.1977+0xa8>
     1dc:	f9 82       	std	Y+1, r15	; 0x01
     1de:	e8 82       	st	Y, r14
     1e0:	05 c0       	rjmp	.+10     	; 0x1ec <paddle_collision_detection.1977+0xb2>
     1e2:	88 e0       	ldi	r24, 0x08	; 8
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	99 83       	std	Y+1, r25	; 0x01
     1e8:	88 83       	st	Y, r24
     1ea:	58 c0       	rjmp	.+176    	; 0x29c <paddle_collision_detection.1977+0x162>
     1ec:	80 81       	ld	r24, Z
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	41 50       	subi	r20, 0x01	; 1
     1f2:	51 09       	sbc	r21, r1
     1f4:	02 c0       	rjmp	.+4      	; 0x1fa <paddle_collision_detection.1977+0xc0>
     1f6:	95 95       	asr	r25
     1f8:	87 95       	ror	r24
     1fa:	4a 95       	dec	r20
     1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <paddle_collision_detection.1977+0xbc>
     1fe:	80 fd       	sbrc	r24, 0
     200:	0f c0       	rjmp	.+30     	; 0x220 <paddle_collision_detection.1977+0xe6>
     202:	e1 01       	movw	r28, r2
     204:	88 81       	ld	r24, Y
     206:	99 81       	ldd	r25, Y+1	; 0x01
     208:	0a 97       	sbiw	r24, 0x0a	; 10
     20a:	09 f0       	breq	.+2      	; 0x20e <paddle_collision_detection.1977+0xd4>
     20c:	3f c0       	rjmp	.+126    	; 0x28c <paddle_collision_detection.1977+0x152>
     20e:	87 e0       	ldi	r24, 0x07	; 7
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	99 83       	std	Y+1, r25	; 0x01
     214:	88 83       	st	Y, r24
     216:	42 c0       	rjmp	.+132    	; 0x29c <paddle_collision_detection.1977+0x162>
     218:	84 2b       	or	r24, r20
     21a:	95 2b       	or	r25, r21
     21c:	80 ff       	sbrs	r24, 0
     21e:	06 c0       	rjmp	.+12     	; 0x22c <paddle_collision_detection.1977+0xf2>
     220:	2f 5f       	subi	r18, 0xFF	; 255
     222:	3f 4f       	sbci	r19, 0xFF	; 255
     224:	28 30       	cpi	r18, 0x08	; 8
     226:	31 05       	cpc	r19, r1
     228:	09 f0       	breq	.+2      	; 0x22c <paddle_collision_detection.1977+0xf2>
     22a:	a4 cf       	rjmp	.-184    	; 0x174 <paddle_collision_detection.1977+0x3a>
     22c:	11 11       	cpse	r17, r1
     22e:	10 c0       	rjmp	.+32     	; 0x250 <paddle_collision_detection.1977+0x116>
     230:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <RIGHT_WALL>
     234:	08 13       	cpse	r16, r24
     236:	06 c0       	rjmp	.+12     	; 0x244 <paddle_collision_detection.1977+0x10a>
     238:	87 e0       	ldi	r24, 0x07	; 7
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	f1 01       	movw	r30, r2
     23e:	91 83       	std	Z+1, r25	; 0x01
     240:	80 83       	st	Z, r24
     242:	2c c0       	rjmp	.+88     	; 0x29c <paddle_collision_detection.1977+0x162>
     244:	88 e0       	ldi	r24, 0x08	; 8
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	e1 01       	movw	r28, r2
     24a:	99 83       	std	Y+1, r25	; 0x01
     24c:	88 83       	st	Y, r24
     24e:	26 c0       	rjmp	.+76     	; 0x29c <paddle_collision_detection.1977+0x162>
     250:	11 30       	cpi	r17, 0x01	; 1
     252:	91 f4       	brne	.+36     	; 0x278 <paddle_collision_detection.1977+0x13e>
     254:	f1 01       	movw	r30, r2
     256:	80 81       	ld	r24, Z
     258:	91 81       	ldd	r25, Z+1	; 0x01
     25a:	8a 30       	cpi	r24, 0x0A	; 10
     25c:	91 05       	cpc	r25, r1
     25e:	29 f4       	brne	.+10     	; 0x26a <paddle_collision_detection.1977+0x130>
     260:	88 e0       	ldi	r24, 0x08	; 8
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	91 83       	std	Z+1, r25	; 0x01
     266:	80 83       	st	Z, r24
     268:	19 c0       	rjmp	.+50     	; 0x29c <paddle_collision_detection.1977+0x162>
     26a:	09 97       	sbiw	r24, 0x09	; 9
     26c:	b9 f4       	brne	.+46     	; 0x29c <paddle_collision_detection.1977+0x162>
     26e:	87 e0       	ldi	r24, 0x07	; 7
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	91 83       	std	Z+1, r25	; 0x01
     274:	80 83       	st	Z, r24
     276:	12 c0       	rjmp	.+36     	; 0x29c <paddle_collision_detection.1977+0x162>
     278:	12 30       	cpi	r17, 0x02	; 2
     27a:	31 f4       	brne	.+12     	; 0x288 <paddle_collision_detection.1977+0x14e>
     27c:	87 e0       	ldi	r24, 0x07	; 7
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	f1 01       	movw	r30, r2
     282:	91 83       	std	Z+1, r25	; 0x01
     284:	80 83       	st	Z, r24
     286:	0a c0       	rjmp	.+20     	; 0x29c <paddle_collision_detection.1977+0x162>
     288:	18 30       	cpi	r17, 0x08	; 8
     28a:	41 f0       	breq	.+16     	; 0x29c <paddle_collision_detection.1977+0x162>
     28c:	83 e0       	ldi	r24, 0x03	; 3
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	e1 01       	movw	r28, r2
     292:	99 83       	std	Y+1, r25	; 0x01
     294:	88 83       	st	Y, r24
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <gameEndTurn>
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	1f 91       	pop	r17
     2a2:	0f 91       	pop	r16
     2a4:	ff 90       	pop	r15
     2a6:	ef 90       	pop	r14
     2a8:	3f 90       	pop	r3
     2aa:	2f 90       	pop	r2
     2ac:	08 95       	ret

000002ae <Ball_Tick>:
     2ae:	2f 92       	push	r2
     2b0:	3f 92       	push	r3
     2b2:	bf 92       	push	r11
     2b4:	cf 92       	push	r12
     2b6:	df 92       	push	r13
     2b8:	ef 92       	push	r14
     2ba:	ff 92       	push	r15
     2bc:	0f 93       	push	r16
     2be:	1f 93       	push	r17
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	00 d0       	rcall	.+0      	; 0x2c6 <Ball_Tick+0x18>
     2c6:	cd b7       	in	r28, 0x3d	; 61
     2c8:	de b7       	in	r29, 0x3e	; 62
     2ca:	9a 83       	std	Y+2, r25	; 0x02
     2cc:	89 83       	std	Y+1, r24	; 0x01
     2ce:	8b 30       	cpi	r24, 0x0B	; 11
     2d0:	91 05       	cpc	r25, r1
     2d2:	08 f0       	brcs	.+2      	; 0x2d6 <Ball_Tick+0x28>
     2d4:	4a c2       	rjmp	.+1172   	; 0x76a <__LOCK_REGION_LENGTH__+0x36a>
     2d6:	fc 01       	movw	r30, r24
     2d8:	ea 5b       	subi	r30, 0xBA	; 186
     2da:	ff 4f       	sbci	r31, 0xFF	; 255
     2dc:	0c 94 d2 09 	jmp	0x13a4	; 0x13a4 <__tablejump2__>
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	9a 83       	std	Y+2, r25	; 0x02
     2e6:	89 83       	std	Y+1, r24	; 0x01
     2e8:	a7 c2       	rjmp	.+1358   	; 0x838 <__LOCK_REGION_LENGTH__+0x438>
     2ea:	82 e0       	ldi	r24, 0x02	; 2
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	9a 83       	std	Y+2, r25	; 0x02
     2f0:	89 83       	std	Y+1, r24	; 0x01
     2f2:	a5 c2       	rjmp	.+1354   	; 0x83e <__LOCK_REGION_LENGTH__+0x43e>
     2f4:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <gameInPlay>
     2f8:	81 30       	cpi	r24, 0x01	; 1
     2fa:	09 f0       	breq	.+2      	; 0x2fe <Ball_Tick+0x50>
     2fc:	a0 c2       	rjmp	.+1344   	; 0x83e <__LOCK_REGION_LENGTH__+0x43e>
     2fe:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <gameInPause>
     302:	81 11       	cpse	r24, r1
     304:	9c c2       	rjmp	.+1336   	; 0x83e <__LOCK_REGION_LENGTH__+0x43e>
     306:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <gameEndTurn>
     30a:	81 11       	cpse	r24, r1
     30c:	98 c2       	rjmp	.+1328   	; 0x83e <__LOCK_REGION_LENGTH__+0x43e>
     30e:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <gameOver>
     312:	88 23       	and	r24, r24
     314:	09 f4       	brne	.+2      	; 0x318 <Ball_Tick+0x6a>
     316:	53 c2       	rjmp	.+1190   	; 0x7be <__LOCK_REGION_LENGTH__+0x3be>
     318:	92 c2       	rjmp	.+1316   	; 0x83e <__LOCK_REGION_LENGTH__+0x43e>
     31a:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <gameInPlay>
     31e:	81 11       	cpse	r24, r1
     320:	96 c2       	rjmp	.+1324   	; 0x84e <__LOCK_REGION_LENGTH__+0x44e>
     322:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <gameInPause>
     326:	81 11       	cpse	r24, r1
     328:	84 c2       	rjmp	.+1288   	; 0x832 <__LOCK_REGION_LENGTH__+0x432>
     32a:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <gameEndTurn>
     32e:	81 11       	cpse	r24, r1
     330:	89 c2       	rjmp	.+1298   	; 0x844 <__LOCK_REGION_LENGTH__+0x444>
     332:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <gameOver>
     336:	81 30       	cpi	r24, 0x01	; 1
     338:	09 f0       	breq	.+2      	; 0x33c <Ball_Tick+0x8e>
     33a:	84 c2       	rjmp	.+1288   	; 0x844 <__LOCK_REGION_LENGTH__+0x444>
     33c:	82 e0       	ldi	r24, 0x02	; 2
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	9a 83       	std	Y+2, r25	; 0x02
     342:	89 83       	std	Y+1, r24	; 0x01
     344:	7c c2       	rjmp	.+1272   	; 0x83e <__LOCK_REGION_LENGTH__+0x43e>
     346:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <gameOver>
     34a:	81 11       	cpse	r24, r1
     34c:	72 c2       	rjmp	.+1252   	; 0x832 <__LOCK_REGION_LENGTH__+0x432>
     34e:	82 e0       	ldi	r24, 0x02	; 2
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	9a 83       	std	Y+2, r25	; 0x02
     354:	89 83       	std	Y+1, r24	; 0x01
     356:	73 c2       	rjmp	.+1254   	; 0x83e <__LOCK_REGION_LENGTH__+0x43e>
     358:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <gameInPlay>
     35c:	81 30       	cpi	r24, 0x01	; 1
     35e:	99 f4       	brne	.+38     	; 0x386 <Ball_Tick+0xd8>
     360:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <gameInPause>
     364:	81 11       	cpse	r24, r1
     366:	0f c0       	rjmp	.+30     	; 0x386 <Ball_Tick+0xd8>
     368:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <gameEndTurn>
     36c:	81 11       	cpse	r24, r1
     36e:	0b c0       	rjmp	.+22     	; 0x386 <Ball_Tick+0xd8>
     370:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <gameOver>
     374:	81 11       	cpse	r24, r1
     376:	07 c0       	rjmp	.+14     	; 0x386 <Ball_Tick+0xd8>
     378:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <PREVIOUS_STATE.1972>
     37c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <PREVIOUS_STATE.1972+0x1>
     380:	9a 83       	std	Y+2, r25	; 0x02
     382:	89 83       	std	Y+1, r24	; 0x01
     384:	f7 c1       	rjmp	.+1006   	; 0x774 <__LOCK_REGION_LENGTH__+0x374>
     386:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <gameReset>
     38a:	81 30       	cpi	r24, 0x01	; 1
     38c:	09 f0       	breq	.+2      	; 0x390 <Ball_Tick+0xe2>
     38e:	51 c2       	rjmp	.+1186   	; 0x832 <__LOCK_REGION_LENGTH__+0x432>
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	9a 83       	std	Y+2, r25	; 0x02
     396:	89 83       	std	Y+1, r24	; 0x01
     398:	4f c2       	rjmp	.+1182   	; 0x838 <__LOCK_REGION_LENGTH__+0x438>
     39a:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <gameInPlay>
     39e:	81 11       	cpse	r24, r1
     3a0:	17 c0       	rjmp	.+46     	; 0x3d0 <Ball_Tick+0x122>
     3a2:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <gameInPause>
     3a6:	81 30       	cpi	r24, 0x01	; 1
     3a8:	99 f4       	brne	.+38     	; 0x3d0 <Ball_Tick+0x122>
     3aa:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <gameEndTurn>
     3ae:	81 11       	cpse	r24, r1
     3b0:	0f c0       	rjmp	.+30     	; 0x3d0 <Ball_Tick+0x122>
     3b2:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <gameOver>
     3b6:	81 11       	cpse	r24, r1
     3b8:	0b c0       	rjmp	.+22     	; 0x3d0 <Ball_Tick+0x122>
     3ba:	87 e0       	ldi	r24, 0x07	; 7
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <PREVIOUS_STATE.1972+0x1>
     3c2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <PREVIOUS_STATE.1972>
     3c6:	84 e0       	ldi	r24, 0x04	; 4
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	9a 83       	std	Y+2, r25	; 0x02
     3cc:	89 83       	std	Y+1, r24	; 0x01
     3ce:	31 c2       	rjmp	.+1122   	; 0x832 <__LOCK_REGION_LENGTH__+0x432>
     3d0:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <gameReset>
     3d4:	81 30       	cpi	r24, 0x01	; 1
     3d6:	29 f4       	brne	.+10     	; 0x3e2 <Ball_Tick+0x134>
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	9a 83       	std	Y+2, r25	; 0x02
     3de:	89 83       	std	Y+1, r24	; 0x01
     3e0:	20 c0       	rjmp	.+64     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     3e2:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ball_column.1971>
     3e6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <LEFT_WALL>
     3ea:	98 13       	cpse	r25, r24
     3ec:	10 c0       	rjmp	.+32     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     3ee:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ball_row.1970>
     3f2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <CEILING>
     3f6:	98 13       	cpse	r25, r24
     3f8:	05 c0       	rjmp	.+10     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3fa:	89 e0       	ldi	r24, 0x09	; 9
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	9a 83       	std	Y+2, r25	; 0x02
     400:	89 83       	std	Y+1, r24	; 0x01
     402:	0f c0       	rjmp	.+30     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     404:	88 e0       	ldi	r24, 0x08	; 8
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	9a 83       	std	Y+2, r25	; 0x02
     40a:	89 83       	std	Y+1, r24	; 0x01
     40c:	0a c0       	rjmp	.+20     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     40e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ball_row.1970>
     412:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <CEILING>
     416:	98 13       	cpse	r25, r24
     418:	04 c0       	rjmp	.+8      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     41a:	89 e0       	ldi	r24, 0x09	; 9
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	9a 83       	std	Y+2, r25	; 0x02
     420:	89 83       	std	Y+1, r24	; 0x01
     422:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <ball_row.1970>
     426:	4a 2f       	mov	r20, r26
     428:	46 95       	lsr	r20
     42a:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <ball_column.1971>
     42e:	6b 2f       	mov	r22, r27
     430:	70 e0       	ldi	r23, 0x00	; 0
     432:	60 95       	com	r22
     434:	70 95       	com	r23
     436:	82 e0       	ldi	r24, 0x02	; 2
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	fc 01       	movw	r30, r24
     43c:	e9 52       	subi	r30, 0x29	; 41
     43e:	fe 4f       	sbci	r31, 0xFE	; 254
     440:	20 81       	ld	r18, Z
     442:	24 23       	and	r18, r20
     444:	c1 f0       	breq	.+48     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     446:	fc 01       	movw	r30, r24
     448:	ef 50       	subi	r30, 0x0F	; 15
     44a:	fe 4f       	sbci	r31, 0xFE	; 254
     44c:	20 81       	ld	r18, Z
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	26 23       	and	r18, r22
     452:	37 23       	and	r19, r23
     454:	23 2b       	or	r18, r19
     456:	79 f4       	brne	.+30     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     458:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <LEFT_WALL>
     45c:	b2 13       	cpse	r27, r18
     45e:	05 c0       	rjmp	.+10     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     460:	2a e0       	ldi	r18, 0x0A	; 10
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	3a 83       	std	Y+2, r19	; 0x02
     466:	29 83       	std	Y+1, r18	; 0x01
     468:	04 c0       	rjmp	.+8      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     46a:	29 e0       	ldi	r18, 0x09	; 9
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	3a 83       	std	Y+2, r19	; 0x02
     470:	29 83       	std	Y+1, r18	; 0x01
     472:	52 de       	rcall	.-860    	; 0x118 <turn_off_LED.1975>
     474:	7f c1       	rjmp	.+766    	; 0x774 <__LOCK_REGION_LENGTH__+0x374>
     476:	01 96       	adiw	r24, 0x01	; 1
     478:	8a 31       	cpi	r24, 0x1A	; 26
     47a:	91 05       	cpc	r25, r1
     47c:	f1 f6       	brne	.-68     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     47e:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <CEILING>
     482:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <LEFT_WALL>
     486:	09 81       	ldd	r16, Y+1	; 0x01
     488:	1a 81       	ldd	r17, Y+2	; 0x02
     48a:	66 0f       	add	r22, r22
     48c:	77 1f       	adc	r23, r23
     48e:	82 e0       	ldi	r24, 0x02	; 2
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	68 94       	set
     494:	ee 24       	eor	r14, r14
     496:	e3 f8       	bld	r14, 3
     498:	f1 2c       	mov	r15, r1
     49a:	0f 2e       	mov	r0, r31
     49c:	fa e0       	ldi	r31, 0x0A	; 10
     49e:	cf 2e       	mov	r12, r31
     4a0:	f0 2d       	mov	r31, r0
     4a2:	d1 2c       	mov	r13, r1
     4a4:	a3 13       	cpse	r26, r19
     4a6:	03 c0       	rjmp	.+6      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     4a8:	b5 13       	cpse	r27, r21
     4aa:	03 c0       	rjmp	.+6      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     4ac:	17 c0       	rjmp	.+46     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
     4ae:	b5 17       	cp	r27, r21
     4b0:	c1 f0       	breq	.+48     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
     4b2:	fc 01       	movw	r30, r24
     4b4:	e9 52       	subi	r30, 0x29	; 41
     4b6:	fe 4f       	sbci	r31, 0xFE	; 254
     4b8:	20 81       	ld	r18, Z
     4ba:	24 23       	and	r18, r20
     4bc:	a1 f0       	breq	.+40     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     4be:	fc 01       	movw	r30, r24
     4c0:	ef 50       	subi	r30, 0x0F	; 15
     4c2:	fe 4f       	sbci	r31, 0xFE	; 254
     4c4:	e0 81       	ld	r30, Z
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	e6 23       	and	r30, r22
     4ca:	f7 23       	and	r31, r23
     4cc:	ef 2b       	or	r30, r31
     4ce:	59 f4       	brne	.+22     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     4d0:	2a e0       	ldi	r18, 0x0A	; 10
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	3a 83       	std	Y+2, r19	; 0x02
     4d6:	29 83       	std	Y+1, r18	; 0x01
     4d8:	1f de       	rcall	.-962    	; 0x118 <turn_off_LED.1975>
     4da:	4c c1       	rjmp	.+664    	; 0x774 <__LOCK_REGION_LENGTH__+0x374>
     4dc:	0c 2d       	mov	r16, r12
     4de:	1d 2d       	mov	r17, r13
     4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     4e2:	0e 2d       	mov	r16, r14
     4e4:	1f 2d       	mov	r17, r15
     4e6:	01 96       	adiw	r24, 0x01	; 1
     4e8:	8a 31       	cpi	r24, 0x1A	; 26
     4ea:	91 05       	cpc	r25, r1
     4ec:	d9 f6       	brne	.-74     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     4ee:	09 83       	std	Y+1, r16	; 0x01
     4f0:	1a 83       	std	Y+2, r17	; 0x02
     4f2:	40 c1       	rjmp	.+640    	; 0x774 <__LOCK_REGION_LENGTH__+0x374>
     4f4:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <gameInPlay>
     4f8:	81 11       	cpse	r24, r1
     4fa:	17 c0       	rjmp	.+46     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
     4fc:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <gameInPause>
     500:	81 30       	cpi	r24, 0x01	; 1
     502:	99 f4       	brne	.+38     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
     504:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <gameEndTurn>
     508:	81 11       	cpse	r24, r1
     50a:	0f c0       	rjmp	.+30     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
     50c:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <gameOver>
     510:	81 11       	cpse	r24, r1
     512:	0b c0       	rjmp	.+22     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
     514:	88 e0       	ldi	r24, 0x08	; 8
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <PREVIOUS_STATE.1972+0x1>
     51c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <PREVIOUS_STATE.1972>
     520:	84 e0       	ldi	r24, 0x04	; 4
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	9a 83       	std	Y+2, r25	; 0x02
     526:	89 83       	std	Y+1, r24	; 0x01
     528:	84 c1       	rjmp	.+776    	; 0x832 <__LOCK_REGION_LENGTH__+0x432>
     52a:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <gameReset>
     52e:	81 30       	cpi	r24, 0x01	; 1
     530:	29 f4       	brne	.+10     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	9a 83       	std	Y+2, r25	; 0x02
     538:	89 83       	std	Y+1, r24	; 0x01
     53a:	20 c0       	rjmp	.+64     	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
     53c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ball_column.1971>
     540:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <RIGHT_WALL>
     544:	98 13       	cpse	r25, r24
     546:	10 c0       	rjmp	.+32     	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
     548:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ball_row.1970>
     54c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <CEILING>
     550:	98 13       	cpse	r25, r24
     552:	05 c0       	rjmp	.+10     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
     554:	89 e0       	ldi	r24, 0x09	; 9
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	9a 83       	std	Y+2, r25	; 0x02
     55a:	89 83       	std	Y+1, r24	; 0x01
     55c:	0f c0       	rjmp	.+30     	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
     55e:	87 e0       	ldi	r24, 0x07	; 7
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	9a 83       	std	Y+2, r25	; 0x02
     564:	89 83       	std	Y+1, r24	; 0x01
     566:	0a c0       	rjmp	.+20     	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
     568:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ball_row.1970>
     56c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <CEILING>
     570:	98 13       	cpse	r25, r24
     572:	04 c0       	rjmp	.+8      	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
     574:	8a e0       	ldi	r24, 0x0A	; 10
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	9a 83       	std	Y+2, r25	; 0x02
     57a:	89 83       	std	Y+1, r24	; 0x01
     57c:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <ball_row.1970>
     580:	4a 2f       	mov	r20, r26
     582:	46 95       	lsr	r20
     584:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <ball_column.1971>
     588:	65 2f       	mov	r22, r21
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	60 95       	com	r22
     58e:	70 95       	com	r23
     590:	82 e0       	ldi	r24, 0x02	; 2
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	fc 01       	movw	r30, r24
     596:	e9 52       	subi	r30, 0x29	; 41
     598:	fe 4f       	sbci	r31, 0xFE	; 254
     59a:	20 81       	ld	r18, Z
     59c:	24 23       	and	r18, r20
     59e:	c1 f0       	breq	.+48     	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
     5a0:	fc 01       	movw	r30, r24
     5a2:	ef 50       	subi	r30, 0x0F	; 15
     5a4:	fe 4f       	sbci	r31, 0xFE	; 254
     5a6:	20 81       	ld	r18, Z
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	26 23       	and	r18, r22
     5ac:	37 23       	and	r19, r23
     5ae:	23 2b       	or	r18, r19
     5b0:	79 f4       	brne	.+30     	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
     5b2:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <RIGHT_WALL>
     5b6:	52 13       	cpse	r21, r18
     5b8:	05 c0       	rjmp	.+10     	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
     5ba:	29 e0       	ldi	r18, 0x09	; 9
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	3a 83       	std	Y+2, r19	; 0x02
     5c0:	29 83       	std	Y+1, r18	; 0x01
     5c2:	04 c0       	rjmp	.+8      	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
     5c4:	2a e0       	ldi	r18, 0x0A	; 10
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	3a 83       	std	Y+2, r19	; 0x02
     5ca:	29 83       	std	Y+1, r18	; 0x01
     5cc:	a5 dd       	rcall	.-1206   	; 0x118 <turn_off_LED.1975>
     5ce:	d2 c0       	rjmp	.+420    	; 0x774 <__LOCK_REGION_LENGTH__+0x374>
     5d0:	01 96       	adiw	r24, 0x01	; 1
     5d2:	8a 31       	cpi	r24, 0x1A	; 26
     5d4:	91 05       	cpc	r25, r1
     5d6:	f1 f6       	brne	.-68     	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
     5d8:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <CEILING>
     5dc:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <RIGHT_WALL>
     5e0:	f9 80       	ldd	r15, Y+1	; 0x01
     5e2:	ba 81       	ldd	r27, Y+2	; 0x02
     5e4:	05 2f       	mov	r16, r21
     5e6:	06 95       	lsr	r16
     5e8:	00 68       	ori	r16, 0x80	; 128
     5ea:	10 e0       	ldi	r17, 0x00	; 0
     5ec:	00 95       	com	r16
     5ee:	10 95       	com	r17
     5f0:	82 e0       	ldi	r24, 0x02	; 2
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	0f 2e       	mov	r0, r31
     5f6:	f7 e0       	ldi	r31, 0x07	; 7
     5f8:	df 2e       	mov	r13, r31
     5fa:	f0 2d       	mov	r31, r0
     5fc:	e1 2c       	mov	r14, r1
     5fe:	0f 2e       	mov	r0, r31
     600:	f9 e0       	ldi	r31, 0x09	; 9
     602:	bf 2e       	mov	r11, r31
     604:	f0 2d       	mov	r31, r0
     606:	c1 2c       	mov	r12, r1
     608:	a6 13       	cpse	r26, r22
     60a:	03 c0       	rjmp	.+6      	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
     60c:	57 13       	cpse	r21, r23
     60e:	03 c0       	rjmp	.+6      	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
     610:	17 c0       	rjmp	.+46     	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
     612:	57 17       	cp	r21, r23
     614:	c1 f0       	breq	.+48     	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
     616:	fc 01       	movw	r30, r24
     618:	e9 52       	subi	r30, 0x29	; 41
     61a:	fe 4f       	sbci	r31, 0xFE	; 254
     61c:	20 81       	ld	r18, Z
     61e:	24 23       	and	r18, r20
     620:	a1 f0       	breq	.+40     	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
     622:	fc 01       	movw	r30, r24
     624:	ef 50       	subi	r30, 0x0F	; 15
     626:	fe 4f       	sbci	r31, 0xFE	; 254
     628:	20 81       	ld	r18, Z
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	20 23       	and	r18, r16
     62e:	31 23       	and	r19, r17
     630:	23 2b       	or	r18, r19
     632:	59 f4       	brne	.+22     	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
     634:	29 e0       	ldi	r18, 0x09	; 9
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	3a 83       	std	Y+2, r19	; 0x02
     63a:	29 83       	std	Y+1, r18	; 0x01
     63c:	6d dd       	rcall	.-1318   	; 0x118 <turn_off_LED.1975>
     63e:	9a c0       	rjmp	.+308    	; 0x774 <__LOCK_REGION_LENGTH__+0x374>
     640:	fb 2c       	mov	r15, r11
     642:	bc 2d       	mov	r27, r12
     644:	02 c0       	rjmp	.+4      	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
     646:	fd 2c       	mov	r15, r13
     648:	be 2d       	mov	r27, r14
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	8a 31       	cpi	r24, 0x1A	; 26
     64e:	91 05       	cpc	r25, r1
     650:	d9 f6       	brne	.-74     	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
     652:	f9 82       	std	Y+1, r15	; 0x01
     654:	ba 83       	std	Y+2, r27	; 0x02
     656:	8e c0       	rjmp	.+284    	; 0x774 <__LOCK_REGION_LENGTH__+0x374>
     658:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <gameInPlay>
     65c:	81 11       	cpse	r24, r1
     65e:	17 c0       	rjmp	.+46     	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
     660:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <gameInPause>
     664:	81 30       	cpi	r24, 0x01	; 1
     666:	99 f4       	brne	.+38     	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
     668:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <gameEndTurn>
     66c:	81 11       	cpse	r24, r1
     66e:	0f c0       	rjmp	.+30     	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
     670:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <gameOver>
     674:	81 11       	cpse	r24, r1
     676:	0b c0       	rjmp	.+22     	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
     678:	89 e0       	ldi	r24, 0x09	; 9
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <PREVIOUS_STATE.1972+0x1>
     680:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <PREVIOUS_STATE.1972>
     684:	84 e0       	ldi	r24, 0x04	; 4
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	9a 83       	std	Y+2, r25	; 0x02
     68a:	89 83       	std	Y+1, r24	; 0x01
     68c:	d2 c0       	rjmp	.+420    	; 0x832 <__LOCK_REGION_LENGTH__+0x432>
     68e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ball_row.1970>
     692:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <FLOOR>
     696:	98 17       	cp	r25, r24
     698:	59 f0       	breq	.+22     	; 0x6b0 <__LOCK_REGION_LENGTH__+0x2b0>
     69a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ball_column.1971>
     69e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <LEFT_WALL>
     6a2:	98 13       	cpse	r25, r24
     6a4:	14 c0       	rjmp	.+40     	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
     6a6:	8a e0       	ldi	r24, 0x0A	; 10
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	9a 83       	std	Y+2, r25	; 0x02
     6ac:	89 83       	std	Y+1, r24	; 0x01
     6ae:	0f c0       	rjmp	.+30     	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
     6b0:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ball_column.1971>
     6b4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <LEFT_WALL>
     6b8:	98 13       	cpse	r25, r24
     6ba:	05 c0       	rjmp	.+10     	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
     6bc:	88 e0       	ldi	r24, 0x08	; 8
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	9a 83       	std	Y+2, r25	; 0x02
     6c2:	89 83       	std	Y+1, r24	; 0x01
     6c4:	04 c0       	rjmp	.+8      	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
     6c6:	87 e0       	ldi	r24, 0x07	; 7
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	9a 83       	std	Y+2, r25	; 0x02
     6cc:	89 83       	std	Y+1, r24	; 0x01
     6ce:	ce 01       	movw	r24, r28
     6d0:	01 96       	adiw	r24, 0x01	; 1
     6d2:	1c 01       	movw	r2, r24
     6d4:	32 dd       	rcall	.-1436   	; 0x13a <paddle_collision_detection.1977>
     6d6:	4e c0       	rjmp	.+156    	; 0x774 <__LOCK_REGION_LENGTH__+0x374>
     6d8:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <gameInPlay>
     6dc:	81 11       	cpse	r24, r1
     6de:	17 c0       	rjmp	.+46     	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
     6e0:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <gameInPause>
     6e4:	81 30       	cpi	r24, 0x01	; 1
     6e6:	99 f4       	brne	.+38     	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
     6e8:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <gameEndTurn>
     6ec:	81 11       	cpse	r24, r1
     6ee:	0f c0       	rjmp	.+30     	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
     6f0:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <gameOver>
     6f4:	81 11       	cpse	r24, r1
     6f6:	0b c0       	rjmp	.+22     	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
     6f8:	8a e0       	ldi	r24, 0x0A	; 10
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <PREVIOUS_STATE.1972+0x1>
     700:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <PREVIOUS_STATE.1972>
     704:	84 e0       	ldi	r24, 0x04	; 4
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	9a 83       	std	Y+2, r25	; 0x02
     70a:	89 83       	std	Y+1, r24	; 0x01
     70c:	92 c0       	rjmp	.+292    	; 0x832 <__LOCK_REGION_LENGTH__+0x432>
     70e:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <gameReset>
     712:	81 30       	cpi	r24, 0x01	; 1
     714:	29 f4       	brne	.+10     	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	9a 83       	std	Y+2, r25	; 0x02
     71c:	89 83       	std	Y+1, r24	; 0x01
     71e:	20 c0       	rjmp	.+64     	; 0x760 <__LOCK_REGION_LENGTH__+0x360>
     720:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ball_row.1970>
     724:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <FLOOR>
     728:	98 13       	cpse	r25, r24
     72a:	10 c0       	rjmp	.+32     	; 0x74c <__LOCK_REGION_LENGTH__+0x34c>
     72c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ball_column.1971>
     730:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <RIGHT_WALL>
     734:	98 13       	cpse	r25, r24
     736:	05 c0       	rjmp	.+10     	; 0x742 <__LOCK_REGION_LENGTH__+0x342>
     738:	87 e0       	ldi	r24, 0x07	; 7
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	9a 83       	std	Y+2, r25	; 0x02
     73e:	89 83       	std	Y+1, r24	; 0x01
     740:	0f c0       	rjmp	.+30     	; 0x760 <__LOCK_REGION_LENGTH__+0x360>
     742:	88 e0       	ldi	r24, 0x08	; 8
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	9a 83       	std	Y+2, r25	; 0x02
     748:	89 83       	std	Y+1, r24	; 0x01
     74a:	0a c0       	rjmp	.+20     	; 0x760 <__LOCK_REGION_LENGTH__+0x360>
     74c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <ball_column.1971>
     750:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <RIGHT_WALL>
     754:	98 13       	cpse	r25, r24
     756:	04 c0       	rjmp	.+8      	; 0x760 <__LOCK_REGION_LENGTH__+0x360>
     758:	89 e0       	ldi	r24, 0x09	; 9
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	9a 83       	std	Y+2, r25	; 0x02
     75e:	89 83       	std	Y+1, r24	; 0x01
     760:	ce 01       	movw	r24, r28
     762:	01 96       	adiw	r24, 0x01	; 1
     764:	1c 01       	movw	r2, r24
     766:	e9 dc       	rcall	.-1582   	; 0x13a <paddle_collision_detection.1977>
     768:	05 c0       	rjmp	.+10     	; 0x774 <__LOCK_REGION_LENGTH__+0x374>
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	9a 83       	std	Y+2, r25	; 0x02
     770:	89 83       	std	Y+1, r24	; 0x01
     772:	62 c0       	rjmp	.+196    	; 0x838 <__LOCK_REGION_LENGTH__+0x438>
     774:	89 81       	ldd	r24, Y+1	; 0x01
     776:	9a 81       	ldd	r25, Y+2	; 0x02
     778:	fc 01       	movw	r30, r24
     77a:	31 97       	sbiw	r30, 0x01	; 1
     77c:	ea 30       	cpi	r30, 0x0A	; 10
     77e:	f1 05       	cpc	r31, r1
     780:	08 f0       	brcs	.+2      	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
     782:	4e c0       	rjmp	.+156    	; 0x820 <__LOCK_REGION_LENGTH__+0x420>
     784:	ef 5a       	subi	r30, 0xAF	; 175
     786:	ff 4f       	sbci	r31, 0xFF	; 255
     788:	0d c6       	rjmp	.+3098   	; 0x13a4 <__tablejump2__>
     78a:	20 e4       	ldi	r18, 0x40	; 64
     78c:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <ball_row.1970>
     790:	2b ef       	ldi	r18, 0xFB	; 251
     792:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <ball_column.1971>
     796:	44 c0       	rjmp	.+136    	; 0x820 <__LOCK_REGION_LENGTH__+0x420>
     798:	20 e4       	ldi	r18, 0x40	; 64
     79a:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <ball_row.1970>
     79e:	2b ef       	ldi	r18, 0xFB	; 251
     7a0:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <ball_column.1971>
     7a4:	3d c0       	rjmp	.+122    	; 0x820 <__LOCK_REGION_LENGTH__+0x420>
     7a6:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <ball_row.1970>
     7aa:	26 95       	lsr	r18
     7ac:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <ball_row.1970>
     7b0:	37 c0       	rjmp	.+110    	; 0x820 <__LOCK_REGION_LENGTH__+0x420>
     7b2:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <ball_row.1970>
     7b6:	22 0f       	add	r18, r18
     7b8:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <ball_row.1970>
     7bc:	31 c0       	rjmp	.+98     	; 0x820 <__LOCK_REGION_LENGTH__+0x420>
     7be:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ball_row.1970>
     7c2:	86 95       	lsr	r24
     7c4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ball_row.1970>
     7c8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ball_column.1971>
     7cc:	88 0f       	add	r24, r24
     7ce:	81 60       	ori	r24, 0x01	; 1
     7d0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ball_column.1971>
     7d4:	87 e0       	ldi	r24, 0x07	; 7
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	23 c0       	rjmp	.+70     	; 0x820 <__LOCK_REGION_LENGTH__+0x420>
     7da:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <ball_row.1970>
     7de:	22 0f       	add	r18, r18
     7e0:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <ball_row.1970>
     7e4:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <ball_column.1971>
     7e8:	22 0f       	add	r18, r18
     7ea:	21 60       	ori	r18, 0x01	; 1
     7ec:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <ball_column.1971>
     7f0:	17 c0       	rjmp	.+46     	; 0x820 <__LOCK_REGION_LENGTH__+0x420>
     7f2:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <ball_row.1970>
     7f6:	26 95       	lsr	r18
     7f8:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <ball_row.1970>
     7fc:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <ball_column.1971>
     800:	26 95       	lsr	r18
     802:	20 68       	ori	r18, 0x80	; 128
     804:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <ball_column.1971>
     808:	0b c0       	rjmp	.+22     	; 0x820 <__LOCK_REGION_LENGTH__+0x420>
     80a:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <ball_row.1970>
     80e:	22 0f       	add	r18, r18
     810:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <ball_row.1970>
     814:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <ball_column.1971>
     818:	26 95       	lsr	r18
     81a:	20 68       	ori	r18, 0x80	; 128
     81c:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <ball_column.1971>
     820:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <ball_row.1970>
     824:	20 93 d8 01 	sts	0x01D8, r18	; 0x8001d8 <DISPLAY_PORTA+0x1>
     828:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <ball_column.1971>
     82c:	20 93 f2 01 	sts	0x01F2, r18	; 0x8001f2 <DISPLAY_PORTB+0x1>
     830:	11 c0       	rjmp	.+34     	; 0x854 <__LOCK_REGION_LENGTH__+0x454>
     832:	89 81       	ldd	r24, Y+1	; 0x01
     834:	9a 81       	ldd	r25, Y+2	; 0x02
     836:	f4 cf       	rjmp	.-24     	; 0x820 <__LOCK_REGION_LENGTH__+0x420>
     838:	89 81       	ldd	r24, Y+1	; 0x01
     83a:	9a 81       	ldd	r25, Y+2	; 0x02
     83c:	a6 cf       	rjmp	.-180    	; 0x78a <__LOCK_REGION_LENGTH__+0x38a>
     83e:	89 81       	ldd	r24, Y+1	; 0x01
     840:	9a 81       	ldd	r25, Y+2	; 0x02
     842:	aa cf       	rjmp	.-172    	; 0x798 <__LOCK_REGION_LENGTH__+0x398>
     844:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <gameEndTurn>
     848:	81 30       	cpi	r24, 0x01	; 1
     84a:	99 f7       	brne	.-26     	; 0x832 <__LOCK_REGION_LENGTH__+0x432>
     84c:	7c cd       	rjmp	.-1288   	; 0x346 <Ball_Tick+0x98>
     84e:	89 81       	ldd	r24, Y+1	; 0x01
     850:	9a 81       	ldd	r25, Y+2	; 0x02
     852:	e6 cf       	rjmp	.-52     	; 0x820 <__LOCK_REGION_LENGTH__+0x420>
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	1f 91       	pop	r17
     85e:	0f 91       	pop	r16
     860:	ff 90       	pop	r15
     862:	ef 90       	pop	r14
     864:	df 90       	pop	r13
     866:	cf 90       	pop	r12
     868:	bf 90       	pop	r11
     86a:	3f 90       	pop	r3
     86c:	2f 90       	pop	r2
     86e:	08 95       	ret

00000870 <Brick_Tick>:
     870:	af 92       	push	r10
     872:	bf 92       	push	r11
     874:	df 92       	push	r13
     876:	ef 92       	push	r14
     878:	ff 92       	push	r15
     87a:	0f 93       	push	r16
     87c:	1f 93       	push	r17
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	91 05       	cpc	r25, r1
     886:	39 f0       	breq	.+14     	; 0x896 <Brick_Tick+0x26>
     888:	83 30       	cpi	r24, 0x03	; 3
     88a:	91 05       	cpc	r25, r1
     88c:	09 f4       	brne	.+2      	; 0x890 <Brick_Tick+0x20>
     88e:	8a c0       	rjmp	.+276    	; 0x9a4 <Brick_Tick+0x134>
     890:	01 97       	sbiw	r24, 0x01	; 1
     892:	69 f4       	brne	.+26     	; 0x8ae <Brick_Tick+0x3e>
     894:	87 c0       	rjmp	.+270    	; 0x9a4 <Brick_Tick+0x134>
     896:	20 91 85 01 	lds	r18, 0x0185	; 0x800185 <gameReset>
     89a:	21 30       	cpi	r18, 0x01	; 1
     89c:	09 f0       	breq	.+2      	; 0x8a0 <Brick_Tick+0x30>
     89e:	84 c0       	rjmp	.+264    	; 0x9a8 <Brick_Tick+0x138>
     8a0:	40 ef       	ldi	r20, 0xF0	; 240
     8a2:	5f ef       	ldi	r21, 0xFF	; 255
     8a4:	28 ef       	ldi	r18, 0xF8	; 248
     8a6:	3f ef       	ldi	r19, 0xFF	; 255
     8a8:	82 e0       	ldi	r24, 0x02	; 2
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	06 c0       	rjmp	.+12     	; 0x8ba <Brick_Tick+0x4a>
     8ae:	40 ef       	ldi	r20, 0xF0	; 240
     8b0:	5f ef       	ldi	r21, 0xFF	; 255
     8b2:	28 ef       	ldi	r18, 0xF8	; 248
     8b4:	3f ef       	ldi	r19, 0xFF	; 255
     8b6:	82 e0       	ldi	r24, 0x02	; 2
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	ff 24       	eor	r15, r15
     8bc:	f3 94       	inc	r15
     8be:	cf e7       	ldi	r28, 0x7F	; 127
     8c0:	d0 e0       	ldi	r29, 0x00	; 0
     8c2:	af ef       	ldi	r26, 0xFF	; 255
     8c4:	b0 e0       	ldi	r27, 0x00	; 0
     8c6:	68 94       	set
     8c8:	dd 24       	eor	r13, r13
     8ca:	d2 f8       	bld	r13, 2
     8cc:	0a e1       	ldi	r16, 0x1A	; 26
     8ce:	10 e0       	ldi	r17, 0x00	; 0
     8d0:	68 94       	set
     8d2:	ee 24       	eor	r14, r14
     8d4:	e1 f8       	bld	r14, 1
     8d6:	8a 30       	cpi	r24, 0x0A	; 10
     8d8:	91 05       	cpc	r25, r1
     8da:	f4 f4       	brge	.+60     	; 0x918 <Brick_Tick+0xa8>
     8dc:	fc 01       	movw	r30, r24
     8de:	e9 52       	subi	r30, 0x29	; 41
     8e0:	fe 4f       	sbci	r31, 0xFE	; 254
     8e2:	f0 82       	st	Z, r15
     8e4:	bc 01       	movw	r22, r24
     8e6:	62 50       	subi	r22, 0x02	; 2
     8e8:	71 09       	sbc	r23, r1
     8ea:	fe 01       	movw	r30, r28
     8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <Brick_Tick+0x82>
     8ee:	f5 95       	asr	r31
     8f0:	e7 95       	ror	r30
     8f2:	6a 95       	dec	r22
     8f4:	e2 f7       	brpl	.-8      	; 0x8ee <Brick_Tick+0x7e>
     8f6:	66 27       	eor	r22, r22
     8f8:	77 27       	eor	r23, r23
     8fa:	62 1b       	sub	r22, r18
     8fc:	73 0b       	sbc	r23, r19
     8fe:	5d 01       	movw	r10, r26
     900:	02 c0       	rjmp	.+4      	; 0x906 <Brick_Tick+0x96>
     902:	aa 0c       	add	r10, r10
     904:	bb 1c       	adc	r11, r11
     906:	6a 95       	dec	r22
     908:	e2 f7       	brpl	.-8      	; 0x902 <Brick_Tick+0x92>
     90a:	b5 01       	movw	r22, r10
     90c:	6e 2b       	or	r22, r30
     90e:	fc 01       	movw	r30, r24
     910:	ef 50       	subi	r30, 0x0F	; 15
     912:	fe 4f       	sbci	r31, 0xFE	; 254
     914:	60 83       	st	Z, r22
     916:	3a c0       	rjmp	.+116    	; 0x98c <Brick_Tick+0x11c>
     918:	28 30       	cpi	r18, 0x08	; 8
     91a:	31 05       	cpc	r19, r1
     91c:	d8 f4       	brcc	.+54     	; 0x954 <Brick_Tick+0xe4>
     91e:	fc 01       	movw	r30, r24
     920:	e9 52       	subi	r30, 0x29	; 41
     922:	fe 4f       	sbci	r31, 0xFE	; 254
     924:	e0 82       	st	Z, r14
     926:	66 27       	eor	r22, r22
     928:	77 27       	eor	r23, r23
     92a:	64 1b       	sub	r22, r20
     92c:	75 0b       	sbc	r23, r21
     92e:	fd 01       	movw	r30, r26
     930:	02 c0       	rjmp	.+4      	; 0x936 <Brick_Tick+0xc6>
     932:	ee 0f       	add	r30, r30
     934:	ff 1f       	adc	r31, r31
     936:	6a 95       	dec	r22
     938:	e2 f7       	brpl	.-8      	; 0x932 <Brick_Tick+0xc2>
     93a:	be 01       	movw	r22, r28
     93c:	02 2e       	mov	r0, r18
     93e:	02 c0       	rjmp	.+4      	; 0x944 <Brick_Tick+0xd4>
     940:	75 95       	asr	r23
     942:	67 95       	ror	r22
     944:	0a 94       	dec	r0
     946:	e2 f7       	brpl	.-8      	; 0x940 <Brick_Tick+0xd0>
     948:	6e 2b       	or	r22, r30
     94a:	fc 01       	movw	r30, r24
     94c:	ef 50       	subi	r30, 0x0F	; 15
     94e:	fe 4f       	sbci	r31, 0xFE	; 254
     950:	60 83       	st	Z, r22
     952:	1c c0       	rjmp	.+56     	; 0x98c <Brick_Tick+0x11c>
     954:	48 30       	cpi	r20, 0x08	; 8
     956:	51 05       	cpc	r21, r1
     958:	c8 f4       	brcc	.+50     	; 0x98c <Brick_Tick+0x11c>
     95a:	fc 01       	movw	r30, r24
     95c:	e9 52       	subi	r30, 0x29	; 41
     95e:	fe 4f       	sbci	r31, 0xFE	; 254
     960:	d0 82       	st	Z, r13
     962:	b8 01       	movw	r22, r16
     964:	68 1b       	sub	r22, r24
     966:	79 0b       	sbc	r23, r25
     968:	fd 01       	movw	r30, r26
     96a:	02 c0       	rjmp	.+4      	; 0x970 <Brick_Tick+0x100>
     96c:	ee 0f       	add	r30, r30
     96e:	ff 1f       	adc	r31, r31
     970:	6a 95       	dec	r22
     972:	e2 f7       	brpl	.-8      	; 0x96c <Brick_Tick+0xfc>
     974:	be 01       	movw	r22, r28
     976:	04 2e       	mov	r0, r20
     978:	02 c0       	rjmp	.+4      	; 0x97e <Brick_Tick+0x10e>
     97a:	75 95       	asr	r23
     97c:	67 95       	ror	r22
     97e:	0a 94       	dec	r0
     980:	e2 f7       	brpl	.-8      	; 0x97a <Brick_Tick+0x10a>
     982:	6e 2b       	or	r22, r30
     984:	fc 01       	movw	r30, r24
     986:	ef 50       	subi	r30, 0x0F	; 15
     988:	fe 4f       	sbci	r31, 0xFE	; 254
     98a:	60 83       	st	Z, r22
     98c:	01 96       	adiw	r24, 0x01	; 1
     98e:	2f 5f       	subi	r18, 0xFF	; 255
     990:	3f 4f       	sbci	r19, 0xFF	; 255
     992:	4f 5f       	subi	r20, 0xFF	; 255
     994:	5f 4f       	sbci	r21, 0xFF	; 255
     996:	8a 31       	cpi	r24, 0x1A	; 26
     998:	91 05       	cpc	r25, r1
     99a:	09 f0       	breq	.+2      	; 0x99e <Brick_Tick+0x12e>
     99c:	9c cf       	rjmp	.-200    	; 0x8d6 <Brick_Tick+0x66>
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <Brick_Tick+0x138>
     9a4:	82 e0       	ldi	r24, 0x02	; 2
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	1f 91       	pop	r17
     9ae:	0f 91       	pop	r16
     9b0:	ff 90       	pop	r15
     9b2:	ef 90       	pop	r14
     9b4:	df 90       	pop	r13
     9b6:	bf 90       	pop	r11
     9b8:	af 90       	pop	r10
     9ba:	08 95       	ret

000009bc <LED_MATRIX_OUTPUT_Tick>:
     9bc:	01 97       	sbiw	r24, 0x01	; 1
     9be:	02 97       	sbiw	r24, 0x02	; 2
     9c0:	30 f5       	brcc	.+76     	; 0xa0e <LED_MATRIX_OUTPUT_Tick+0x52>
     9c2:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <index.2061>
     9c6:	f0 91 82 01 	lds	r31, 0x0182	; 0x800182 <index.2061+0x1>
     9ca:	e9 52       	subi	r30, 0x29	; 41
     9cc:	fe 4f       	sbci	r31, 0xFE	; 254
     9ce:	80 81       	ld	r24, Z
     9d0:	82 b9       	out	0x02, r24	; 2
     9d2:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <index.2061>
     9d6:	f0 91 82 01 	lds	r31, 0x0182	; 0x800182 <index.2061+0x1>
     9da:	ef 50       	subi	r30, 0x0F	; 15
     9dc:	fe 4f       	sbci	r31, 0xFE	; 254
     9de:	80 81       	ld	r24, Z
     9e0:	85 b9       	out	0x05, r24	; 5
     9e2:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <index.2061>
     9e6:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <index.2061+0x1>
     9ea:	89 31       	cpi	r24, 0x19	; 25
     9ec:	91 05       	cpc	r25, r1
     9ee:	39 f4       	brne	.+14     	; 0x9fe <LED_MATRIX_OUTPUT_Tick+0x42>
     9f0:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <index.2061+0x1>
     9f4:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <index.2061>
     9f8:	82 e0       	ldi	r24, 0x02	; 2
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	08 95       	ret
     9fe:	01 96       	adiw	r24, 0x01	; 1
     a00:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <index.2061+0x1>
     a04:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <index.2061>
     a08:	82 e0       	ldi	r24, 0x02	; 2
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	08 95       	ret
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	08 95       	ret

00000a14 <GetNESControllerButton>:
     a14:	41 9a       	sbi	0x08, 1	; 8
     a16:	41 98       	cbi	0x08, 1	; 8
     a18:	40 e0       	ldi	r20, 0x00	; 0
     a1a:	50 e0       	ldi	r21, 0x00	; 0
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	26 b1       	in	r18, 0x06	; 6
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	20 95       	com	r18
     a24:	30 95       	com	r19
     a26:	22 fb       	bst	r18, 2
     a28:	66 27       	eor	r22, r22
     a2a:	60 f9       	bld	r22, 0
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	9b 01       	movw	r18, r22
     a30:	04 2e       	mov	r0, r20
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <GetNESControllerButton+0x24>
     a34:	22 0f       	add	r18, r18
     a36:	33 1f       	adc	r19, r19
     a38:	0a 94       	dec	r0
     a3a:	e2 f7       	brpl	.-8      	; 0xa34 <GetNESControllerButton+0x20>
     a3c:	82 2b       	or	r24, r18
     a3e:	40 9a       	sbi	0x08, 0	; 8
     a40:	40 98       	cbi	0x08, 0	; 8
     a42:	4f 5f       	subi	r20, 0xFF	; 255
     a44:	5f 4f       	sbci	r21, 0xFF	; 255
     a46:	48 30       	cpi	r20, 0x08	; 8
     a48:	51 05       	cpc	r21, r1
     a4a:	49 f7       	brne	.-46     	; 0xa1e <GetNESControllerButton+0xa>
     a4c:	08 95       	ret

00000a4e <Paddle_Tick>:
     a4e:	1f 93       	push	r17
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	ec 01       	movw	r28, r24
     a56:	de df       	rcall	.-68     	; 0xa14 <GetNESControllerButton>
     a58:	18 2f       	mov	r17, r24
     a5a:	fe 01       	movw	r30, r28
     a5c:	31 97       	sbiw	r30, 0x01	; 1
     a5e:	e7 30       	cpi	r30, 0x07	; 7
     a60:	f1 05       	cpc	r31, r1
     a62:	08 f0       	brcs	.+2      	; 0xa66 <Paddle_Tick+0x18>
     a64:	77 c0       	rjmp	.+238    	; 0xb54 <Paddle_Tick+0x106>
     a66:	e5 5a       	subi	r30, 0xA5	; 165
     a68:	ff 4f       	sbci	r31, 0xFF	; 255
     a6a:	9c c4       	rjmp	.+2360   	; 0x13a4 <__tablejump2__>
     a6c:	c7 e0       	ldi	r28, 0x07	; 7
     a6e:	d0 e0       	ldi	r29, 0x00	; 0
     a70:	b1 c0       	rjmp	.+354    	; 0xbd4 <Paddle_Tick+0x186>
     a72:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <gameInPlay>
     a76:	81 30       	cpi	r24, 0x01	; 1
     a78:	09 f0       	breq	.+2      	; 0xa7c <Paddle_Tick+0x2e>
     a7a:	ac c0       	rjmp	.+344    	; 0xbd4 <Paddle_Tick+0x186>
     a7c:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <gameInPause>
     a80:	81 11       	cpse	r24, r1
     a82:	a8 c0       	rjmp	.+336    	; 0xbd4 <Paddle_Tick+0x186>
     a84:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <gameEndTurn>
     a88:	81 11       	cpse	r24, r1
     a8a:	a4 c0       	rjmp	.+328    	; 0xbd4 <Paddle_Tick+0x186>
     a8c:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <gameOver>
     a90:	88 23       	and	r24, r24
     a92:	09 f4       	brne	.+2      	; 0xa96 <Paddle_Tick+0x48>
     a94:	85 c0       	rjmp	.+266    	; 0xba0 <Paddle_Tick+0x152>
     a96:	9e c0       	rjmp	.+316    	; 0xbd4 <Paddle_Tick+0x186>
     a98:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <NES_LEFT_DPAD>
     a9c:	18 13       	cpse	r17, r24
     a9e:	12 c0       	rjmp	.+36     	; 0xac4 <Paddle_Tick+0x76>
     aa0:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <gameInPlay>
     aa4:	81 30       	cpi	r24, 0x01	; 1
     aa6:	21 f5       	brne	.+72     	; 0xaf0 <Paddle_Tick+0xa2>
     aa8:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <gameInPause>
     aac:	81 11       	cpse	r24, r1
     aae:	3c c0       	rjmp	.+120    	; 0xb28 <Paddle_Tick+0xda>
     ab0:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <gameEndTurn>
     ab4:	81 11       	cpse	r24, r1
     ab6:	89 c0       	rjmp	.+274    	; 0xbca <Paddle_Tick+0x17c>
     ab8:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <gameOver>
     abc:	88 23       	and	r24, r24
     abe:	09 f4       	brne	.+2      	; 0xac2 <Paddle_Tick+0x74>
     ac0:	74 c0       	rjmp	.+232    	; 0xbaa <Paddle_Tick+0x15c>
     ac2:	83 c0       	rjmp	.+262    	; 0xbca <Paddle_Tick+0x17c>
     ac4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <NES_RIGHT_DPAD>
     ac8:	18 13       	cpse	r17, r24
     aca:	12 c0       	rjmp	.+36     	; 0xaf0 <Paddle_Tick+0xa2>
     acc:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <gameInPlay>
     ad0:	81 30       	cpi	r24, 0x01	; 1
     ad2:	71 f4       	brne	.+28     	; 0xaf0 <Paddle_Tick+0xa2>
     ad4:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <gameInPause>
     ad8:	81 11       	cpse	r24, r1
     ada:	26 c0       	rjmp	.+76     	; 0xb28 <Paddle_Tick+0xda>
     adc:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <gameEndTurn>
     ae0:	81 11       	cpse	r24, r1
     ae2:	22 c0       	rjmp	.+68     	; 0xb28 <Paddle_Tick+0xda>
     ae4:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <gameOver>
     ae8:	88 23       	and	r24, r24
     aea:	09 f4       	brne	.+2      	; 0xaee <Paddle_Tick+0xa0>
     aec:	63 c0       	rjmp	.+198    	; 0xbb4 <Paddle_Tick+0x166>
     aee:	1c c0       	rjmp	.+56     	; 0xb28 <Paddle_Tick+0xda>
     af0:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <gameInPlay>
     af4:	81 11       	cpse	r24, r1
     af6:	18 c0       	rjmp	.+48     	; 0xb28 <Paddle_Tick+0xda>
     af8:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <gameInPause>
     afc:	81 30       	cpi	r24, 0x01	; 1
     afe:	51 f4       	brne	.+20     	; 0xb14 <Paddle_Tick+0xc6>
     b00:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <gameEndTurn>
     b04:	81 11       	cpse	r24, r1
     b06:	10 c0       	rjmp	.+32     	; 0xb28 <Paddle_Tick+0xda>
     b08:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <gameOver>
     b0c:	88 23       	and	r24, r24
     b0e:	09 f4       	brne	.+2      	; 0xb12 <Paddle_Tick+0xc4>
     b10:	59 c0       	rjmp	.+178    	; 0xbc4 <Paddle_Tick+0x176>
     b12:	0a c0       	rjmp	.+20     	; 0xb28 <Paddle_Tick+0xda>
     b14:	81 11       	cpse	r24, r1
     b16:	08 c0       	rjmp	.+16     	; 0xb28 <Paddle_Tick+0xda>
     b18:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <gameEndTurn>
     b1c:	81 30       	cpi	r24, 0x01	; 1
     b1e:	19 f1       	breq	.+70     	; 0xb66 <Paddle_Tick+0x118>
     b20:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <gameOver>
     b24:	81 30       	cpi	r24, 0x01	; 1
     b26:	f9 f0       	breq	.+62     	; 0xb66 <Paddle_Tick+0x118>
     b28:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <gameReset>
     b2c:	81 30       	cpi	r24, 0x01	; 1
     b2e:	c1 f5       	brne	.+112    	; 0xba0 <Paddle_Tick+0x152>
     b30:	11 c0       	rjmp	.+34     	; 0xb54 <Paddle_Tick+0x106>
     b32:	70 df       	rcall	.-288    	; 0xa14 <GetNESControllerButton>
     b34:	88 23       	and	r24, r24
     b36:	a1 f1       	breq	.+104    	; 0xba0 <Paddle_Tick+0x152>
     b38:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <button_hold_count.1932>
     b3c:	82 30       	cpi	r24, 0x02	; 2
     b3e:	20 f4       	brcc	.+8      	; 0xb48 <Paddle_Tick+0xfa>
     b40:	8f 5f       	subi	r24, 0xFF	; 255
     b42:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <button_hold_count.1932>
     b46:	46 c0       	rjmp	.+140    	; 0xbd4 <Paddle_Tick+0x186>
     b48:	10 34       	cpi	r17, 0x40	; 64
     b4a:	79 f1       	breq	.+94     	; 0xbaa <Paddle_Tick+0x15c>
     b4c:	10 38       	cpi	r17, 0x80	; 128
     b4e:	09 f0       	breq	.+2      	; 0xb52 <Paddle_Tick+0x104>
     b50:	41 c0       	rjmp	.+130    	; 0xbd4 <Paddle_Tick+0x186>
     b52:	30 c0       	rjmp	.+96     	; 0xbb4 <Paddle_Tick+0x166>
     b54:	80 e8       	ldi	r24, 0x80	; 128
     b56:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <bottom_row.1930>
     b5a:	88 ef       	ldi	r24, 0xF8	; 248
     b5c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <paddle_pos.1931>
     b60:	c1 e0       	ldi	r28, 0x01	; 1
     b62:	d0 e0       	ldi	r29, 0x00	; 0
     b64:	37 c0       	rjmp	.+110    	; 0xbd4 <Paddle_Tick+0x186>
     b66:	80 e8       	ldi	r24, 0x80	; 128
     b68:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <DISPLAY_PORTA>
     b6c:	88 ef       	ldi	r24, 0xF8	; 248
     b6e:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <DISPLAY_PORTB>
     b72:	c3 e0       	ldi	r28, 0x03	; 3
     b74:	d0 e0       	ldi	r29, 0x00	; 0
     b76:	2e c0       	rjmp	.+92     	; 0xbd4 <Paddle_Tick+0x186>
     b78:	88 0f       	add	r24, r24
     b7a:	81 60       	ori	r24, 0x01	; 1
     b7c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <paddle_pos.1931>
     b80:	c5 e0       	ldi	r28, 0x05	; 5
     b82:	d0 e0       	ldi	r29, 0x00	; 0
     b84:	27 c0       	rjmp	.+78     	; 0xbd4 <Paddle_Tick+0x186>
     b86:	86 95       	lsr	r24
     b88:	80 68       	ori	r24, 0x80	; 128
     b8a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <paddle_pos.1931>
     b8e:	c6 e0       	ldi	r28, 0x06	; 6
     b90:	d0 e0       	ldi	r29, 0x00	; 0
     b92:	20 c0       	rjmp	.+64     	; 0xbd4 <Paddle_Tick+0x186>
     b94:	c5 e0       	ldi	r28, 0x05	; 5
     b96:	d0 e0       	ldi	r29, 0x00	; 0
     b98:	1d c0       	rjmp	.+58     	; 0xbd4 <Paddle_Tick+0x186>
     b9a:	c6 e0       	ldi	r28, 0x06	; 6
     b9c:	d0 e0       	ldi	r29, 0x00	; 0
     b9e:	1a c0       	rjmp	.+52     	; 0xbd4 <Paddle_Tick+0x186>
     ba0:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <button_hold_count.1932>
     ba4:	c4 e0       	ldi	r28, 0x04	; 4
     ba6:	d0 e0       	ldi	r29, 0x00	; 0
     ba8:	15 c0       	rjmp	.+42     	; 0xbd4 <Paddle_Tick+0x186>
     baa:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <paddle_pos.1931>
     bae:	8f 31       	cpi	r24, 0x1F	; 31
     bb0:	19 f7       	brne	.-58     	; 0xb78 <Paddle_Tick+0x12a>
     bb2:	f0 cf       	rjmp	.-32     	; 0xb94 <Paddle_Tick+0x146>
     bb4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <paddle_pos.1931>
     bb8:	88 3f       	cpi	r24, 0xF8	; 248
     bba:	29 f7       	brne	.-54     	; 0xb86 <Paddle_Tick+0x138>
     bbc:	ee cf       	rjmp	.-36     	; 0xb9a <Paddle_Tick+0x14c>
     bbe:	c3 e0       	ldi	r28, 0x03	; 3
     bc0:	d0 e0       	ldi	r29, 0x00	; 0
     bc2:	08 c0       	rjmp	.+16     	; 0xbd4 <Paddle_Tick+0x186>
     bc4:	c3 e0       	ldi	r28, 0x03	; 3
     bc6:	d0 e0       	ldi	r29, 0x00	; 0
     bc8:	05 c0       	rjmp	.+10     	; 0xbd4 <Paddle_Tick+0x186>
     bca:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <NES_RIGHT_DPAD>
     bce:	18 13       	cpse	r17, r24
     bd0:	ab cf       	rjmp	.-170    	; 0xb28 <Paddle_Tick+0xda>
     bd2:	84 cf       	rjmp	.-248    	; 0xadc <Paddle_Tick+0x8e>
     bd4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <bottom_row.1930>
     bd8:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <DISPLAY_PORTA>
     bdc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <paddle_pos.1931>
     be0:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <DISPLAY_PORTB>
     be4:	ce 01       	movw	r24, r28
     be6:	df 91       	pop	r29
     be8:	cf 91       	pop	r28
     bea:	1f 91       	pop	r17
     bec:	08 95       	ret

00000bee <TimerSet>:
     bee:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <_avr_timer_M>
     bf2:	70 93 14 01 	sts	0x0114, r23	; 0x800114 <_avr_timer_M+0x1>
     bf6:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <_avr_timer_M+0x2>
     bfa:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <_avr_timer_M+0x3>
     bfe:	60 93 89 01 	sts	0x0189, r22	; 0x800189 <_avr_timer_cntcurr>
     c02:	70 93 8a 01 	sts	0x018A, r23	; 0x80018a <_avr_timer_cntcurr+0x1>
     c06:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <_avr_timer_cntcurr+0x2>
     c0a:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <_avr_timer_cntcurr+0x3>
     c0e:	08 95       	ret

00000c10 <TimerOn>:
     c10:	8b e0       	ldi	r24, 0x0B	; 11
     c12:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     c16:	8d e7       	ldi	r24, 0x7D	; 125
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     c1e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     c22:	82 e0       	ldi	r24, 0x02	; 2
     c24:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     c28:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     c2c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     c30:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <_avr_timer_M>
     c34:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <_avr_timer_M+0x1>
     c38:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <_avr_timer_M+0x2>
     c3c:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <_avr_timer_M+0x3>
     c40:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <_avr_timer_cntcurr>
     c44:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <_avr_timer_cntcurr+0x1>
     c48:	a0 93 8b 01 	sts	0x018B, r26	; 0x80018b <_avr_timer_cntcurr+0x2>
     c4c:	b0 93 8c 01 	sts	0x018C, r27	; 0x80018c <_avr_timer_cntcurr+0x3>
     c50:	8f b7       	in	r24, 0x3f	; 63
     c52:	80 68       	ori	r24, 0x80	; 128
     c54:	8f bf       	out	0x3f, r24	; 63
     c56:	08 95       	ret

00000c58 <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
     c58:	18 16       	cp	r1, r24
     c5a:	19 06       	cpc	r1, r25
     c5c:	5c f0       	brlt	.+22     	; 0xc74 <delay_ms+0x1c>
     c5e:	08 95       	ret
    for(j=0;j<775;j++)
  {
   asm("nop");
     c60:	00 00       	nop
     c62:	21 50       	subi	r18, 0x01	; 1
     c64:	31 09       	sbc	r19, r1
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
     c66:	e1 f7       	brne	.-8      	; 0xc60 <delay_ms+0x8>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
     c68:	4f 5f       	subi	r20, 0xFF	; 255
     c6a:	5f 4f       	sbci	r21, 0xFF	; 255
     c6c:	84 17       	cp	r24, r20
     c6e:	95 07       	cpc	r25, r21
     c70:	19 f4       	brne	.+6      	; 0xc78 <delay_ms+0x20>
     c72:	08 95       	ret
     c74:	40 e0       	ldi	r20, 0x00	; 0
     c76:	50 e0       	ldi	r21, 0x00	; 0
   }
}

void delay_ms(int miliSec) //for 8 Mhz crystal

{
     c78:	27 e0       	ldi	r18, 0x07	; 7
     c7a:	33 e0       	ldi	r19, 0x03	; 3
     c7c:	f1 cf       	rjmp	.-30     	; 0xc60 <delay_ms+0x8>

00000c7e <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);						 
}

void LCD_WriteCommand (unsigned char Command) {
   CLR_BIT(CONTROL_BUS,RS);
     c7e:	46 98       	cbi	0x08, 6	; 8
   DATA_BUS = Command;
     c80:	8b b9       	out	0x0b, r24	; 11
   SET_BIT(CONTROL_BUS,E);
     c82:	47 9a       	sbi	0x08, 7	; 8
   asm("nop");
     c84:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
     c86:	47 98       	cbi	0x08, 7	; 8
   delay_ms(2); // ClearScreen requires 1.52ms to execute
     c88:	82 e0       	ldi	r24, 0x02	; 2
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	e5 cf       	rjmp	.-54     	; 0xc58 <delay_ms>
     c8e:	08 95       	ret

00000c90 <LCD_ClearScreen>:
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	f5 cf       	rjmp	.-22     	; 0xc7e <LCD_WriteCommand>
     c94:	08 95       	ret

00000c96 <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
     c96:	81 31       	cpi	r24, 0x11	; 17
     c98:	18 f4       	brcc	.+6      	; 0xca0 <LCD_Cursor+0xa>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
     c9a:	81 58       	subi	r24, 0x81	; 129
     c9c:	f0 cf       	rjmp	.-32     	; 0xc7e <LCD_WriteCommand>
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
     c9e:	08 95       	ret
     ca0:	81 55       	subi	r24, 0x51	; 81
     ca2:	ed cf       	rjmp	.-38     	; 0xc7e <LCD_WriteCommand>
     ca4:	08 95       	ret

00000ca6 <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
     ca6:	84 e6       	ldi	r24, 0x64	; 100
     ca8:	90 e0       	ldi	r25, 0x00	; 0
	LCD_WriteCommand(0x38);
     caa:	d6 df       	rcall	.-84     	; 0xc58 <delay_ms>
	LCD_WriteCommand(0x06);
     cac:	88 e3       	ldi	r24, 0x38	; 56
	LCD_WriteCommand(0x0f);
     cae:	e7 df       	rcall	.-50     	; 0xc7e <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
     cb0:	86 e0       	ldi	r24, 0x06	; 6
     cb2:	e5 df       	rcall	.-54     	; 0xc7e <LCD_WriteCommand>
	delay_ms(10);						 
     cb4:	8f e0       	ldi	r24, 0x0F	; 15
     cb6:	e3 df       	rcall	.-58     	; 0xc7e <LCD_WriteCommand>
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	e1 df       	rcall	.-62     	; 0xc7e <LCD_WriteCommand>
     cbc:	8a e0       	ldi	r24, 0x0A	; 10
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	cb cf       	rjmp	.-106    	; 0xc58 <delay_ms>
     cc2:	08 95       	ret

00000cc4 <LCD_WriteData>:
   CLR_BIT(CONTROL_BUS,E);
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
     cc4:	46 9a       	sbi	0x08, 6	; 8
   DATA_BUS = Data;
     cc6:	8b b9       	out	0x0b, r24	; 11
   SET_BIT(CONTROL_BUS,E);
     cc8:	47 9a       	sbi	0x08, 7	; 8
   asm("nop");
     cca:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
     ccc:	47 98       	cbi	0x08, 7	; 8
   delay_ms(1);
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	c2 cf       	rjmp	.-124    	; 0xc58 <delay_ms>
     cd4:	08 95       	ret

00000cd6 <LCD_DisplayString>:
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
     cd6:	0f 93       	push	r16
     cd8:	1f 93       	push	r17
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
     cde:	18 2f       	mov	r17, r24
   LCD_ClearScreen();
     ce0:	eb 01       	movw	r28, r22
   unsigned char c = column;
   while(*string) {
     ce2:	d6 df       	rcall	.-84     	; 0xc90 <LCD_ClearScreen>
     ce4:	88 81       	ld	r24, Y
     ce6:	88 23       	and	r24, r24
      LCD_Cursor(c++);
     ce8:	51 f0       	breq	.+20     	; 0xcfe <LCD_DisplayString+0x28>
     cea:	01 e0       	ldi	r16, 0x01	; 1
     cec:	01 0f       	add	r16, r17
      LCD_WriteData(*string++);
     cee:	81 2f       	mov	r24, r17
     cf0:	d2 df       	rcall	.-92     	; 0xc96 <LCD_Cursor>
     cf2:	89 91       	ld	r24, Y+

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
     cf4:	e7 df       	rcall	.-50     	; 0xcc4 <LCD_WriteData>
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
     cf6:	10 2f       	mov	r17, r16
     cf8:	88 81       	ld	r24, Y
     cfa:	81 11       	cpse	r24, r1
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
     cfc:	f6 cf       	rjmp	.-20     	; 0xcea <LCD_DisplayString+0x14>
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	1f 91       	pop	r17
     d04:	0f 91       	pop	r16
     d06:	08 95       	ret

00000d08 <GAME_Tick>:

// ====================
// GAME_TICK:OUTPUT TO LED matrix
// ====================
enum G_States {G_START, G_INIT, G_MENU, G_WAIT1, G_PLAY, G_WAIT2, G_WAIT3, G_PAUSE, G_ENDTURN, G_GAME_OVER,  G_RESET};
int GAME_Tick(int state) {
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29

	// === Local Variables ===
	unsigned char button = GetNESControllerButton();
     d0c:	ec 01       	movw	r28, r24
	unsigned static short game_over_count = 0; 
	unsigned static short game_over_display_time = 3000;
	unsigned static short reset_count = 0;

	// === Transitions ===
	switch (state) {
     d0e:	82 de       	rcall	.-764    	; 0xa14 <GetNESControllerButton>
     d10:	fe 01       	movw	r30, r28
     d12:	31 97       	sbiw	r30, 0x01	; 1
     d14:	ea 30       	cpi	r30, 0x0A	; 10
     d16:	f1 05       	cpc	r31, r1
     d18:	08 f0       	brcs	.+2      	; 0xd1c <GAME_Tick+0x14>
     d1a:	be c0       	rjmp	.+380    	; 0xe98 <GAME_Tick+0x190>
     d1c:	ee 59       	subi	r30, 0x9E	; 158
     d1e:	ff 4f       	sbci	r31, 0xFF	; 255
				state = G_WAIT2;
			}
		break;

		case G_PAUSE:
			state = G_WAIT1;
     d20:	41 c3       	rjmp	.+1666   	; 0x13a4 <__tablejump2__>
     d22:	c3 e0       	ldi	r28, 0x03	; 3
     d24:	d0 e0       	ldi	r29, 0x00	; 0
			state = G_MENU;
			gameInPlay = 0x00;
			gameInPause = 0x00;
			gameEndTurn = 0x00;
			gameOver = 0x00;
			gameReset = 0x00;
     d26:	0e c1       	rjmp	.+540    	; 0xf44 <GAME_Tick+0x23c>
     d28:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <gameReset>
		break;

		case G_MENU:
			if (button == NES_START)
     d2c:	e9 c0       	rjmp	.+466    	; 0xf00 <GAME_Tick+0x1f8>
     d2e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <NES_START>
     d32:	89 13       	cpse	r24, r25
     d34:	e5 c0       	rjmp	.+458    	; 0xf00 <GAME_Tick+0x1f8>
				state = G_WAIT1;
			}
		break;
		
		case G_WAIT1:
			if (button != NES_START)
     d36:	de c0       	rjmp	.+444    	; 0xef4 <GAME_Tick+0x1ec>
     d38:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <NES_START>
     d3c:	89 13       	cpse	r24, r25
     d3e:	bd c0       	rjmp	.+378    	; 0xeba <GAME_Tick+0x1b2>
		case G_PLAY:
			state = G_WAIT2;
		break;

		case G_WAIT2:
			if (!(button == NES_START) && (gameInPlay == 0x01) && (gameOver==0x00)&& (gameInPause == 0x00) && (gameEndTurn == 0x00))
     d40:	01 c1       	rjmp	.+514    	; 0xf44 <GAME_Tick+0x23c>
     d42:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <NES_START>
     d46:	89 17       	cp	r24, r25
     d48:	91 f0       	breq	.+36     	; 0xd6e <GAME_Tick+0x66>
     d4a:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <gameInPlay>
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	99 f5       	brne	.+102    	; 0xdb8 <GAME_Tick+0xb0>
     d52:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <gameOver>
     d56:	81 11       	cpse	r24, r1
     d58:	ea c0       	rjmp	.+468    	; 0xf2e <GAME_Tick+0x226>
     d5a:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <gameInPause>
     d5e:	81 11       	cpse	r24, r1
     d60:	e6 c0       	rjmp	.+460    	; 0xf2e <GAME_Tick+0x226>
     d62:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <gameEndTurn>
     d66:	88 23       	and	r24, r24
     d68:	09 f4       	brne	.+2      	; 0xd6c <GAME_Tick+0x64>
     d6a:	ec c0       	rjmp	.+472    	; 0xf44 <GAME_Tick+0x23c>
			{
				state = G_WAIT2;
			}
			else if ((button==NES_START) && (button==NES_SELECT))
     d6c:	e0 c0       	rjmp	.+448    	; 0xf2e <GAME_Tick+0x226>
     d6e:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <NES_SELECT>
     d72:	89 17       	cp	r24, r25
     d74:	09 f4       	brne	.+2      	; 0xd78 <GAME_Tick+0x70>
			{
				state = G_RESET;
			}
			else if ((button == NES_START) && (gameInPlay == 0x01) && (gameOver==0x00) && (gameInPause == 0x00) && (gameEndTurn == 0x00))
     d76:	ad c0       	rjmp	.+346    	; 0xed2 <GAME_Tick+0x1ca>
     d78:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <gameInPlay>
     d7c:	81 30       	cpi	r24, 0x01	; 1
     d7e:	e1 f4       	brne	.+56     	; 0xdb8 <GAME_Tick+0xb0>
     d80:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <gameOver>
     d84:	81 11       	cpse	r24, r1
     d86:	18 c0       	rjmp	.+48     	; 0xdb8 <GAME_Tick+0xb0>
     d88:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <gameInPause>
     d8c:	81 11       	cpse	r24, r1
     d8e:	05 c0       	rjmp	.+10     	; 0xd9a <GAME_Tick+0x92>
     d90:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <gameEndTurn>
     d94:	88 23       	and	r24, r24
     d96:	09 f4       	brne	.+2      	; 0xd9a <GAME_Tick+0x92>
			{
				state = G_WAIT3;
			}
			else if ((gameInPlay == 0x01) && (gameOver==0x00)&& (gameInPause == 0x00) && (gameEndTurn == 0x01))
     d98:	b0 c0       	rjmp	.+352    	; 0xefa <GAME_Tick+0x1f2>
     d9a:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <gameInPause>
     d9e:	81 11       	cpse	r24, r1
     da0:	cc c0       	rjmp	.+408    	; 0xf3a <GAME_Tick+0x232>
     da2:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <gameEndTurn>
     da6:	81 30       	cpi	r24, 0x01	; 1
     da8:	09 f0       	breq	.+2      	; 0xdac <GAME_Tick+0xa4>
			{
				 state = G_ENDTURN;
				 gameNumberOfTurns--;
     daa:	cc c0       	rjmp	.+408    	; 0xf44 <GAME_Tick+0x23c>
     dac:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <gameNumberOfTurns>
     db0:	81 50       	subi	r24, 0x01	; 1
     db2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <gameNumberOfTurns>
			}
			else if ((gameEndTurn == 0x01))
     db6:	af c0       	rjmp	.+350    	; 0xf16 <GAME_Tick+0x20e>
     db8:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <gameEndTurn>
     dbc:	81 30       	cpi	r24, 0x01	; 1
			{
				state = G_ENDTURN;
				gameNumberOfTurns--;
     dbe:	31 f4       	brne	.+12     	; 0xdcc <GAME_Tick+0xc4>
     dc0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <gameNumberOfTurns>
     dc4:	81 50       	subi	r24, 0x01	; 1
     dc6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <gameNumberOfTurns>
			}
			else if ((gameOver==0x01))
     dca:	a5 c0       	rjmp	.+330    	; 0xf16 <GAME_Tick+0x20e>
     dcc:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <gameOver>
     dd0:	81 30       	cpi	r24, 0x01	; 1
     dd2:	09 f0       	breq	.+2      	; 0xdd6 <GAME_Tick+0xce>
     dd4:	b7 c0       	rjmp	.+366    	; 0xf44 <GAME_Tick+0x23c>
		case G_PAUSE:
			state = G_WAIT1;
		break;

		case G_ENDTURN:
			if ((button == NES_START) && (gameNumberOfTurns > 0x00))
     dd6:	94 c0       	rjmp	.+296    	; 0xf00 <GAME_Tick+0x1f8>
     dd8:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <NES_START>
     ddc:	89 13       	cpse	r24, r25
     dde:	10 c0       	rjmp	.+32     	; 0xe00 <GAME_Tick+0xf8>
     de0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <gameNumberOfTurns>
     de4:	88 23       	and	r24, r24
			{
				gameInPlay = 0x01;
     de6:	81 f0       	breq	.+32     	; 0xe08 <GAME_Tick+0x100>
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <gameInPlay>
				gameInPause = 0x00;
     dee:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <gameInPause>
				gameEndTurn = 0x00;
     df2:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <gameEndTurn>
				gameOver = 0x00;
     df6:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <gameOver>
				state = G_WAIT1;
     dfa:	c3 e0       	ldi	r28, 0x03	; 3
     dfc:	d0 e0       	ldi	r29, 0x00	; 0
			}
			else if (gameNumberOfTurns <= 0x00)
     dfe:	a2 c0       	rjmp	.+324    	; 0xf44 <GAME_Tick+0x23c>
     e00:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <gameNumberOfTurns>
     e04:	81 11       	cpse	r24, r1
			{
				gameInPlay = 0x00;
     e06:	87 c0       	rjmp	.+270    	; 0xf16 <GAME_Tick+0x20e>
     e08:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <gameInPlay>
				gameInPause = 0x00;
     e0c:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <gameInPause>
				gameEndTurn = 0x00;
     e10:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <gameEndTurn>
				gameOver = 0x01;
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <gameOver>
				state = G_GAME_OVER;
     e1a:	c9 e0       	ldi	r28, 0x09	; 9
     e1c:	d0 e0       	ldi	r29, 0x00	; 0
			}
		break;

		case G_GAME_OVER:
			if (game_over_count >= game_over_display_time)
     e1e:	92 c0       	rjmp	.+292    	; 0xf44 <GAME_Tick+0x23c>
     e20:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <game_over_count.2124>
     e24:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <game_over_count.2124+0x1>
     e28:	88 3b       	cpi	r24, 0xB8	; 184
     e2a:	2b e0       	ldi	r18, 0x0B	; 11
     e2c:	92 07       	cpc	r25, r18
				state = G_RESET; // RESET GAME
				gameInPlay = 0x00;
				gameInPause = 0x00;
				gameEndTurn = 0x00;
				gameReset = 0x01;
				SCORE = 0x00;
     e2e:	50 f0       	brcs	.+20     	; 0xe44 <GAME_Tick+0x13c>
     e30:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <SCORE>
				gameNumberOfTurns = 0x03;
     e34:	83 e0       	ldi	r24, 0x03	; 3
     e36:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <gameNumberOfTurns>
				game_over_count = 0;
     e3a:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <game_over_count.2124+0x1>
     e3e:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <game_over_count.2124>
			}
			else 
			{
				game_over_count++;
     e42:	47 c0       	rjmp	.+142    	; 0xed2 <GAME_Tick+0x1ca>
     e44:	01 96       	adiw	r24, 0x01	; 1
     e46:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <game_over_count.2124+0x1>
     e4a:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <game_over_count.2124>
// 				gameNumberOfTurns = 0x03;
// 				game_over_count = 0x0000;
		break;

		case G_RESET:
			if (((button != NES_START) || (button != NES_SELECT)) && (reset_count > longestPeriod + 100))
     e4e:	7a c0       	rjmp	.+244    	; 0xf44 <GAME_Tick+0x23c>
     e50:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <NES_START>
     e54:	89 13       	cpse	r24, r25
     e56:	04 c0       	rjmp	.+8      	; 0xe60 <GAME_Tick+0x158>
     e58:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <NES_SELECT>
     e5c:	89 17       	cp	r24, r25
     e5e:	61 f0       	breq	.+24     	; 0xe78 <GAME_Tick+0x170>
     e60:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <__data_end>
     e64:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <__data_end+0x1>
     e68:	8d 32       	cpi	r24, 0x2D	; 45
     e6a:	91 40       	sbci	r25, 0x01	; 1
			{
				state = G_INIT;
				reset_count = 0;
     e6c:	28 f0       	brcs	.+10     	; 0xe78 <GAME_Tick+0x170>
     e6e:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <__data_end+0x1>
     e72:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <__data_end>
			}
			else
			{
				
				if (reset_count == 0)
     e76:	10 c0       	rjmp	.+32     	; 0xe98 <GAME_Tick+0x190>
     e78:	c0 91 7a 01 	lds	r28, 0x017A	; 0x80017a <__data_end>
     e7c:	d0 91 7b 01 	lds	r29, 0x017B	; 0x80017b <__data_end+0x1>
     e80:	20 97       	sbiw	r28, 0x00	; 0
				{	
					LCD_DisplayString(1, "LOADING...      ");
     e82:	21 f4       	brne	.+8      	; 0xe8c <GAME_Tick+0x184>
     e84:	67 e1       	ldi	r22, 0x17	; 23
     e86:	71 e0       	ldi	r23, 0x01	; 1
     e88:	81 e0       	ldi	r24, 0x01	; 1
				}
				reset_count++;
     e8a:	25 df       	rcall	.-438    	; 0xcd6 <LCD_DisplayString>
     e8c:	21 96       	adiw	r28, 0x01	; 1
     e8e:	d0 93 7b 01 	sts	0x017B, r29	; 0x80017b <__data_end+0x1>
     e92:	c0 93 7a 01 	sts	0x017A, r28	; 0x80017a <__data_end>
	switch (state) {
		case G_START:
		break;
		
		case G_INIT:
			gameInPlay = 0x00;
     e96:	1d c0       	rjmp	.+58     	; 0xed2 <GAME_Tick+0x1ca>
     e98:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <gameInPlay>
			gameInPause = 0x00;
     e9c:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <gameInPause>
			gameEndTurn = 0x00;
     ea0:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <gameEndTurn>
			gameOver = 0x00;
     ea4:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <gameOver>

			SCORE = 0x00;
     ea8:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <SCORE>
			game_over_count = 0;
     eac:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <game_over_count.2124+0x1>
     eb0:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <game_over_count.2124>
		break;
     eb4:	c1 e0       	ldi	r28, 0x01	; 1
     eb6:	d0 e0       	ldi	r29, 0x00	; 0
		
		case G_WAIT1:
		break;

		case G_PLAY:
			gameInPlay = 0x01;
     eb8:	45 c0       	rjmp	.+138    	; 0xf44 <GAME_Tick+0x23c>
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <gameInPlay>
			gameInPause = 0x00;
     ec0:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <gameInPause>
			gameEndTurn = 0x00;
     ec4:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <gameEndTurn>
			gameOver = 0x00;
     ec8:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <gameOver>
		break;
     ecc:	c4 e0       	ldi	r28, 0x04	; 4
     ece:	d0 e0       	ldi	r29, 0x00	; 0
			gameEndTurn = 0x00;
			gameOver = 0x00;
		break;

		case G_RESET:
			gameInPlay = 0x00;
     ed0:	39 c0       	rjmp	.+114    	; 0xf44 <GAME_Tick+0x23c>
     ed2:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <gameInPlay>
			gameInPause = 0x00;
     ed6:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <gameInPause>
			gameReset = 0x01;
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <gameReset>
			gameEndTurn = 0x00;
     ee0:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <gameEndTurn>
			SCORE = 0x00;
     ee4:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <SCORE>
		break;
     ee8:	ca e0       	ldi	r28, 0x0A	; 10
     eea:	d0 e0       	ldi	r29, 0x00	; 0
				state = G_PLAY;
			}
		break;

		case G_PLAY:
			state = G_WAIT2;
     eec:	2b c0       	rjmp	.+86     	; 0xf44 <GAME_Tick+0x23c>
     eee:	c5 e0       	ldi	r28, 0x05	; 5
     ef0:	d0 e0       	ldi	r29, 0x00	; 0
		break;

		case G_MENU:
			if (button == NES_START)
			{
				state = G_WAIT1;
     ef2:	28 c0       	rjmp	.+80     	; 0xf44 <GAME_Tick+0x23c>
     ef4:	c3 e0       	ldi	r28, 0x03	; 3
     ef6:	d0 e0       	ldi	r29, 0x00	; 0
			{
				state = G_RESET;
			}
			else if ((button == NES_START) && (gameInPlay == 0x01) && (gameOver==0x00) && (gameInPause == 0x00) && (gameEndTurn == 0x00))
			{
				state = G_WAIT3;
     ef8:	25 c0       	rjmp	.+74     	; 0xf44 <GAME_Tick+0x23c>
     efa:	c6 e0       	ldi	r28, 0x06	; 6
     efc:	d0 e0       	ldi	r29, 0x00	; 0
			SCORE = 0x00;
			game_over_count = 0;
		break;

		case G_MENU:
			gameInPlay = 0x00;
     efe:	22 c0       	rjmp	.+68     	; 0xf44 <GAME_Tick+0x23c>
     f00:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <gameInPlay>
			gameInPause = 0x00;
     f04:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <gameInPause>
			gameEndTurn = 0x00;
     f08:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <gameEndTurn>
			gameOver = 0x00;
     f0c:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <gameOver>
		break;
     f10:	c2 e0       	ldi	r28, 0x02	; 2
     f12:	d0 e0       	ldi	r29, 0x00	; 0

		case G_WAIT3:
		break;
		
		case G_ENDTURN:
			gameInPlay = 0x00;
     f14:	17 c0       	rjmp	.+46     	; 0xf44 <GAME_Tick+0x23c>
     f16:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <gameInPlay>
			gameInPause = 0x00;
     f1a:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <gameInPause>
			gameEndTurn = 0x01;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <gameEndTurn>
			gameOver = 0x00;
     f24:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <gameOver>
		break;
     f28:	c8 e0       	ldi	r28, 0x08	; 8
     f2a:	d0 e0       	ldi	r29, 0x00	; 0
			}
			else if ((button == NES_START) && (gameInPlay == 0x01) && (gameOver==0x00) && (gameInPause == 0x00) && (gameEndTurn == 0x00))
			{
				state = G_WAIT3;
			}
			else if ((gameInPlay == 0x01) && (gameOver==0x00)&& (gameInPause == 0x00) && (gameEndTurn == 0x01))
     f2c:	0b c0       	rjmp	.+22     	; 0xf44 <GAME_Tick+0x23c>
     f2e:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <gameOver>
     f32:	88 23       	and	r24, r24
     f34:	09 f4       	brne	.+2      	; 0xf38 <GAME_Tick+0x230>
     f36:	31 cf       	rjmp	.-414    	; 0xd9a <GAME_Tick+0x92>
			{
				 state = G_ENDTURN;
				 gameNumberOfTurns--;
			}
			else if ((gameEndTurn == 0x01))
     f38:	3f cf       	rjmp	.-386    	; 0xdb8 <GAME_Tick+0xb0>
     f3a:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <gameEndTurn>
     f3e:	81 30       	cpi	r24, 0x01	; 1
     f40:	09 f4       	brne	.+2      	; 0xf44 <GAME_Tick+0x23c>
		
		default:
		break;
	}
	return state;
};
     f42:	3e cf       	rjmp	.-388    	; 0xdc0 <GAME_Tick+0xb8>
     f44:	ce 01       	movw	r24, r28
     f46:	df 91       	pop	r29
     f48:	cf 91       	pop	r28
     f4a:	08 95       	ret

00000f4c <LCD_OUTPUT_Tick>:
// ====================
// LCD_OUTPUT_TICK:OUTPUT TO LED matrix
// ====================
enum LCD_O_States {LCD_O_START, LCD_O_INIT, LCD_O_DISPLAY_MENU, LCD_O_DISPLAY_SCORE, 
				   LCD_O_DISPLAY_PAUSE, LCD_O_DISPLAY_TURNS_REMAINING, LCD_O_DISPLAY_GAME_OVER, LCD_O_WAIT};
int LCD_OUTPUT_Tick(int state) {
     f4c:	cf 93       	push	r28
     f4e:	df 93       	push	r29
     f50:	ec 01       	movw	r28, r24
	static unsigned char SCORE_HUNDREDS_PLACE = 0x00;
	static unsigned char SCORE_TENS_PLACE = 0x00;
	static unsigned char SCORE_ONES_PLACE = 0x00;
	static unsigned char score_count = 0x01;
	// === Transitions ===
	switch (state) {
     f52:	87 30       	cpi	r24, 0x07	; 7
     f54:	91 05       	cpc	r25, r1
     f56:	44 f4       	brge	.+16     	; 0xf68 <LCD_OUTPUT_Tick+0x1c>
     f58:	05 97       	sbiw	r24, 0x05	; 5
     f5a:	0c f0       	brlt	.+2      	; 0xf5e <LCD_OUTPUT_Tick+0x12>
     f5c:	ed c0       	rjmp	.+474    	; 0x1138 <LCD_OUTPUT_Tick+0x1ec>
     f5e:	21 97       	sbiw	r28, 0x01	; 1
     f60:	23 97       	sbiw	r28, 0x03	; 3
     f62:	08 f4       	brcc	.+2      	; 0xf66 <LCD_OUTPUT_Tick+0x1a>
     f64:	e9 c0       	rjmp	.+466    	; 0x1138 <LCD_OUTPUT_Tick+0x1ec>
     f66:	5d c0       	rjmp	.+186    	; 0x1022 <LCD_OUTPUT_Tick+0xd6>
     f68:	07 97       	sbiw	r24, 0x07	; 7
     f6a:	09 f0       	breq	.+2      	; 0xf6e <LCD_OUTPUT_Tick+0x22>
     f6c:	5a c0       	rjmp	.+180    	; 0x1022 <LCD_OUTPUT_Tick+0xd6>
		case LCD_O_INIT:
			state = LCD_O_WAIT;
		break;

		case LCD_O_WAIT:
				if ((gameInPlay == 0x00) && (gameInPause == 0x00) && (gameEndTurn == 0x00) && (gameOver==0x00))
     f6e:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <gameInPlay>
     f72:	81 11       	cpse	r24, r1
     f74:	0e c0       	rjmp	.+28     	; 0xf92 <LCD_OUTPUT_Tick+0x46>
     f76:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <gameInPause>
     f7a:	81 11       	cpse	r24, r1
     f7c:	1a c0       	rjmp	.+52     	; 0xfb2 <LCD_OUTPUT_Tick+0x66>
     f7e:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <gameEndTurn>
     f82:	81 11       	cpse	r24, r1
     f84:	df c0       	rjmp	.+446    	; 0x1144 <LCD_OUTPUT_Tick+0x1f8>
     f86:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <gameOver>
     f8a:	88 23       	and	r24, r24
     f8c:	09 f4       	brne	.+2      	; 0xf90 <LCD_OUTPUT_Tick+0x44>
     f8e:	4d c0       	rjmp	.+154    	; 0x102a <LCD_OUTPUT_Tick+0xde>
     f90:	d9 c0       	rjmp	.+434    	; 0x1144 <LCD_OUTPUT_Tick+0x1f8>
				{
					state = LCD_O_DISPLAY_MENU;
				}
				else if ((gameInPlay == 0x01) && (gameInPause == 0x00) && (gameEndTurn == 0x00) && (gameOver==0x00))
     f92:	81 30       	cpi	r24, 0x01	; 1
     f94:	c1 f5       	brne	.+112    	; 0x1006 <LCD_OUTPUT_Tick+0xba>
     f96:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <gameInPause>
     f9a:	81 11       	cpse	r24, r1
     f9c:	34 c0       	rjmp	.+104    	; 0x1006 <LCD_OUTPUT_Tick+0xba>
     f9e:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <gameEndTurn>
     fa2:	81 11       	cpse	r24, r1
     fa4:	d7 c0       	rjmp	.+430    	; 0x1154 <LCD_OUTPUT_Tick+0x208>
     fa6:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <gameOver>
     faa:	88 23       	and	r24, r24
     fac:	09 f4       	brne	.+2      	; 0xfb0 <LCD_OUTPUT_Tick+0x64>
     fae:	52 c0       	rjmp	.+164    	; 0x1054 <LCD_OUTPUT_Tick+0x108>
     fb0:	d1 c0       	rjmp	.+418    	; 0x1154 <LCD_OUTPUT_Tick+0x208>
				{
					state = LCD_O_DISPLAY_SCORE;
				}
				else if ((gameInPlay == 0x00) && (gameInPause == 0x01) && (gameEndTurn == 0x00) && (gameOver==0x00))
     fb2:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <gameInPause>
     fb6:	81 30       	cpi	r24, 0x01	; 1
     fb8:	51 f4       	brne	.+20     	; 0xfce <LCD_OUTPUT_Tick+0x82>
     fba:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <gameEndTurn>
     fbe:	81 11       	cpse	r24, r1
     fc0:	c4 c0       	rjmp	.+392    	; 0x114a <LCD_OUTPUT_Tick+0x1fe>
     fc2:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <gameOver>
     fc6:	88 23       	and	r24, r24
     fc8:	09 f4       	brne	.+2      	; 0xfcc <LCD_OUTPUT_Tick+0x80>
     fca:	b9 c0       	rjmp	.+370    	; 0x113e <LCD_OUTPUT_Tick+0x1f2>
     fcc:	be c0       	rjmp	.+380    	; 0x114a <LCD_OUTPUT_Tick+0x1fe>
				{
					state = LCD_O_DISPLAY_PAUSE;
				}
				else if ((gameInPlay == 0x00) && (gameInPause == 0x00) && (gameEndTurn == 0x01) && (gameOver==0x00))
     fce:	81 11       	cpse	r24, r1
     fd0:	1a c0       	rjmp	.+52     	; 0x1006 <LCD_OUTPUT_Tick+0xba>
     fd2:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <gameEndTurn>
     fd6:	81 30       	cpi	r24, 0x01	; 1
     fd8:	61 f4       	brne	.+24     	; 0xff2 <LCD_OUTPUT_Tick+0xa6>
     fda:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <gameOver>
     fde:	88 23       	and	r24, r24
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <LCD_OUTPUT_Tick+0x98>
     fe2:	7e c0       	rjmp	.+252    	; 0x10e0 <LCD_OUTPUT_Tick+0x194>
     fe4:	06 c0       	rjmp	.+12     	; 0xff2 <LCD_OUTPUT_Tick+0xa6>
				{
					state = LCD_O_DISPLAY_TURNS_REMAINING;
				}
				else if ((gameInPlay == 0x01) && (gameInPause == 0x00) && (gameEndTurn == 0x01) && (gameOver==0x00))
     fe6:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <gameOver>
     fea:	88 23       	and	r24, r24
     fec:	09 f4       	brne	.+2      	; 0xff0 <LCD_OUTPUT_Tick+0xa4>
     fee:	78 c0       	rjmp	.+240    	; 0x10e0 <LCD_OUTPUT_Tick+0x194>
     ff0:	0a c0       	rjmp	.+20     	; 0x1006 <LCD_OUTPUT_Tick+0xba>
				{
					state = LCD_O_DISPLAY_TURNS_REMAINING;
				}
				else if (((gameInPlay == 0x00) && (gameInPause == 0x00)) && ((gameEndTurn == 0x00) || (gameOver==0x01)))
     ff2:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <gameEndTurn>
     ff6:	88 23       	and	r24, r24
     ff8:	09 f4       	brne	.+2      	; 0xffc <LCD_OUTPUT_Tick+0xb0>
     ffa:	83 c0       	rjmp	.+262    	; 0x1102 <LCD_OUTPUT_Tick+0x1b6>
     ffc:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <gameOver>
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	31 f4       	brne	.+12     	; 0x1010 <LCD_OUTPUT_Tick+0xc4>
    1004:	7e c0       	rjmp	.+252    	; 0x1102 <LCD_OUTPUT_Tick+0x1b6>
				{
					state = LCD_O_DISPLAY_GAME_OVER;
				}
				else if ((gameOver==0x01))
    1006:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <gameOver>
    100a:	81 30       	cpi	r24, 0x01	; 1
    100c:	09 f4       	brne	.+2      	; 0x1010 <LCD_OUTPUT_Tick+0xc4>
    100e:	79 c0       	rjmp	.+242    	; 0x1102 <LCD_OUTPUT_Tick+0x1b6>
				{
					state = LCD_O_DISPLAY_GAME_OVER;
				}
				else if (gameReset == 0x01)
    1010:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <gameReset>
    1014:	81 30       	cpi	r24, 0x01	; 1
    1016:	29 f0       	breq	.+10     	; 0x1022 <LCD_OUTPUT_Tick+0xd6>
				{
					state = LCD_O_INIT;
				}
				else
				{
					LCD_DisplayString(1,"ERROR");
    1018:	68 e2       	ldi	r22, 0x28	; 40
    101a:	71 e0       	ldi	r23, 0x01	; 1
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	5b de       	rcall	.-842    	; 0xcd6 <LCD_DisplayString>
	{
		case LCD_O_START:
		break;
		
		case LCD_O_INIT:
			LCD_ClearScreen();
    1020:	9f c0       	rjmp	.+318    	; 0x1160 <LCD_OUTPUT_Tick+0x214>
    1022:	36 de       	rcall	.-916    	; 0xc90 <LCD_ClearScreen>
		break;
    1024:	c1 e0       	ldi	r28, 0x01	; 1
    1026:	d0 e0       	ldi	r29, 0x00	; 0
    1028:	9b c0       	rjmp	.+310    	; 0x1160 <LCD_OUTPUT_Tick+0x214>

		case LCD_O_DISPLAY_MENU:
			if (state != PREV_STATE)
    102a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <PREV_STATE.2084>
    102e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <PREV_STATE.2084+0x1>
    1032:	02 97       	sbiw	r24, 0x02	; 2
			{
				LCD_Cursor(0x01);
    1034:	31 f0       	breq	.+12     	; 0x1042 <LCD_OUTPUT_Tick+0xf6>
    1036:	81 e0       	ldi	r24, 0x01	; 1
				LCD_DisplayString(1, "BRICK BREAKER!  PRESS START");
    1038:	2e de       	rcall	.-932    	; 0xc96 <LCD_Cursor>
    103a:	6e e2       	ldi	r22, 0x2E	; 46
    103c:	71 e0       	ldi	r23, 0x01	; 1
    103e:	81 e0       	ldi	r24, 0x01	; 1
			}
			PREV_STATE = state;
    1040:	4a de       	rcall	.-876    	; 0xcd6 <LCD_DisplayString>
    1042:	82 e0       	ldi	r24, 0x02	; 2
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <PREV_STATE.2084+0x1>
    104a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <PREV_STATE.2084>
		break;
    104e:	c2 e0       	ldi	r28, 0x02	; 2
    1050:	d0 e0       	ldi	r29, 0x00	; 0

		case LCD_O_DISPLAY_SCORE:
				// Express SCORE by factors of 10
				if (SCORE != PREV_SCORE)
    1052:	86 c0       	rjmp	.+268    	; 0x1160 <LCD_OUTPUT_Tick+0x214>
    1054:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <SCORE>
    1058:	88 23       	and	r24, r24
    105a:	09 f4       	brne	.+2      	; 0x105e <LCD_OUTPUT_Tick+0x112>
				{
					score_count++;
    105c:	38 c0       	rjmp	.+112    	; 0x10ce <LCD_OUTPUT_Tick+0x182>
    105e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1062:	8f 5f       	subi	r24, 0xFF	; 255
    1064:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					if (SCORE_TENS_PLACE == 0x0A)
    1068:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <SCORE_TENS_PLACE.2087>
    106c:	8a 30       	cpi	r24, 0x0A	; 10
					{
						SCORE_HUNDREDS_PLACE++;
    106e:	39 f4       	brne	.+14     	; 0x107e <LCD_OUTPUT_Tick+0x132>
    1070:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <SCORE_HUNDREDS_PLACE.2086>
    1074:	8f 5f       	subi	r24, 0xFF	; 255
    1076:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <SCORE_HUNDREDS_PLACE.2086>
						SCORE_TENS_PLACE = 0;
    107a:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <SCORE_TENS_PLACE.2087>
					}
					if (SCORE_ONES_PLACE == 0x0A)
    107e:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <SCORE_ONES_PLACE.2088>
    1082:	8a 30       	cpi	r24, 0x0A	; 10
					{
						SCORE_TENS_PLACE++;
    1084:	39 f4       	brne	.+14     	; 0x1094 <LCD_OUTPUT_Tick+0x148>
    1086:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <SCORE_TENS_PLACE.2087>
    108a:	8f 5f       	subi	r24, 0xFF	; 255
    108c:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <SCORE_TENS_PLACE.2087>
						SCORE_ONES_PLACE = 0;
    1090:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <SCORE_ONES_PLACE.2088>
					}
					SCORE_ONES_PLACE++;
    1094:	c0 91 7e 01 	lds	r28, 0x017E	; 0x80017e <SCORE_ONES_PLACE.2088>
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	8c 0f       	add	r24, r28
					LCD_Cursor(0x01);
    109c:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <SCORE_ONES_PLACE.2088>
					LCD_DisplayString(1, "SCORE:");
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	f9 dd       	rcall	.-1038   	; 0xc96 <LCD_Cursor>
    10a4:	6a e4       	ldi	r22, 0x4A	; 74
    10a6:	71 e0       	ldi	r23, 0x01	; 1
					LCD_WriteData('0' + SCORE_HUNDREDS_PLACE);
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	15 de       	rcall	.-982    	; 0xcd6 <LCD_DisplayString>
    10ac:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <SCORE_HUNDREDS_PLACE.2086>
					LCD_WriteData('0' + SCORE_TENS_PLACE);
    10b0:	80 5d       	subi	r24, 0xD0	; 208
    10b2:	08 de       	rcall	.-1008   	; 0xcc4 <LCD_WriteData>
					LCD_WriteData('0' + SCORE_ONES_PLACE);
    10b4:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <SCORE_TENS_PLACE.2087>
    10b8:	80 5d       	subi	r24, 0xD0	; 208
    10ba:	04 de       	rcall	.-1016   	; 0xcc4 <LCD_WriteData>
					LCD_WriteData('0'); // Make the score a little bigger =P
    10bc:	81 e3       	ldi	r24, 0x31	; 49
    10be:	8c 0f       	add	r24, r28
    10c0:	01 de       	rcall	.-1022   	; 0xcc4 <LCD_WriteData>
					LCD_Cursor(0x30);
    10c2:	80 e3       	ldi	r24, 0x30	; 48
    10c4:	ff dd       	rcall	.-1026   	; 0xcc4 <LCD_WriteData>
    10c6:	80 e3       	ldi	r24, 0x30	; 48

					SCORE = PREV_SCORE;
    10c8:	e6 dd       	rcall	.-1076   	; 0xc96 <LCD_Cursor>
    10ca:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <SCORE>
				}
			PREV_STATE = state;
    10ce:	83 e0       	ldi	r24, 0x03	; 3
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <PREV_STATE.2084+0x1>
			
		break;
    10d6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <PREV_STATE.2084>
		
		case LCD_O_DISPLAY_TURNS_REMAINING:

			LCD_DisplayString(1, "TURNS LEFT:");
    10da:	c3 e0       	ldi	r28, 0x03	; 3
    10dc:	d0 e0       	ldi	r29, 0x00	; 0
    10de:	40 c0       	rjmp	.+128    	; 0x1160 <LCD_OUTPUT_Tick+0x214>
    10e0:	61 e5       	ldi	r22, 0x51	; 81
    10e2:	71 e0       	ldi	r23, 0x01	; 1
			LCD_WriteData('0' + gameNumberOfTurns);
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	f7 dd       	rcall	.-1042   	; 0xcd6 <LCD_DisplayString>
    10e8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <gameNumberOfTurns>
			PREV_STATE = state;
    10ec:	80 5d       	subi	r24, 0xD0	; 208
    10ee:	ea dd       	rcall	.-1068   	; 0xcc4 <LCD_WriteData>
    10f0:	85 e0       	ldi	r24, 0x05	; 5
    10f2:	90 e0       	ldi	r25, 0x00	; 0

		break;
    10f4:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <PREV_STATE.2084+0x1>
    10f8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <PREV_STATE.2084>

		case LCD_O_DISPLAY_GAME_OVER:
			LCD_Cursor(0x01);
    10fc:	c5 e0       	ldi	r28, 0x05	; 5
    10fe:	d0 e0       	ldi	r29, 0x00	; 0
			LCD_DisplayString(1, "GAME OVER!      ");
    1100:	2f c0       	rjmp	.+94     	; 0x1160 <LCD_OUTPUT_Tick+0x214>
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	c8 dd       	rcall	.-1136   	; 0xc96 <LCD_Cursor>
    1106:	6d e5       	ldi	r22, 0x5D	; 93
    1108:	71 e0       	ldi	r23, 0x01	; 1
			LCD_WriteData( '0' + gameNumberOfTurns);
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	e4 dd       	rcall	.-1080   	; 0xcd6 <LCD_DisplayString>
    110e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <gameNumberOfTurns>
    1112:	80 5d       	subi	r24, 0xD0	; 208
			
			SCORE_HUNDREDS_PLACE = 0x00;
    1114:	d7 dd       	rcall	.-1106   	; 0xcc4 <LCD_WriteData>
    1116:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <SCORE_HUNDREDS_PLACE.2086>
			SCORE_TENS_PLACE = 0x00;
    111a:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <SCORE_TENS_PLACE.2087>
			SCORE_ONES_PLACE = 0x00;
    111e:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <SCORE_ONES_PLACE.2088>
			score_count = 0;
    1122:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>

			PREV_STATE = state;
    1126:	86 e0       	ldi	r24, 0x06	; 6
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <PREV_STATE.2084+0x1>
    112e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <PREV_STATE.2084>
		break;
    1132:	c6 e0       	ldi	r28, 0x06	; 6
    1134:	d0 e0       	ldi	r29, 0x00	; 0
		case LCD_O_START:
			state = LCD_O_INIT;
		break;
		
		case LCD_O_INIT:
			state = LCD_O_WAIT;
    1136:	14 c0       	rjmp	.+40     	; 0x1160 <LCD_OUTPUT_Tick+0x214>
    1138:	c7 e0       	ldi	r28, 0x07	; 7
    113a:	d0 e0       	ldi	r29, 0x00	; 0
				{
					state = LCD_O_DISPLAY_SCORE;
				}
				else if ((gameInPlay == 0x00) && (gameInPause == 0x01) && (gameEndTurn == 0x00) && (gameOver==0x00))
				{
					state = LCD_O_DISPLAY_PAUSE;
    113c:	11 c0       	rjmp	.+34     	; 0x1160 <LCD_OUTPUT_Tick+0x214>
    113e:	c4 e0       	ldi	r28, 0x04	; 4
		break;

		default:
		break;
	}
	return state;
    1140:	d0 e0       	ldi	r29, 0x00	; 0
				}
				else if ((gameInPlay == 0x01) && (gameInPause == 0x00) && (gameEndTurn == 0x00) && (gameOver==0x00))
				{
					state = LCD_O_DISPLAY_SCORE;
				}
				else if ((gameInPlay == 0x00) && (gameInPause == 0x01) && (gameEndTurn == 0x00) && (gameOver==0x00))
    1142:	0e c0       	rjmp	.+28     	; 0x1160 <LCD_OUTPUT_Tick+0x214>
    1144:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <gameInPause>
				}
				else if ((gameInPlay == 0x01) && (gameInPause == 0x00) && (gameEndTurn == 0x01) && (gameOver==0x00))
				{
					state = LCD_O_DISPLAY_TURNS_REMAINING;
				}
				else if (((gameInPlay == 0x00) && (gameInPause == 0x00)) && ((gameEndTurn == 0x00) || (gameOver==0x01)))
    1148:	42 cf       	rjmp	.-380    	; 0xfce <LCD_OUTPUT_Tick+0x82>
    114a:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <gameInPause>
    114e:	81 11       	cpse	r24, r1
    1150:	5a cf       	rjmp	.-332    	; 0x1006 <LCD_OUTPUT_Tick+0xba>
				}
				else if ((gameInPlay == 0x00) && (gameInPause == 0x00) && (gameEndTurn == 0x01) && (gameOver==0x00))
				{
					state = LCD_O_DISPLAY_TURNS_REMAINING;
				}
				else if ((gameInPlay == 0x01) && (gameInPause == 0x00) && (gameEndTurn == 0x01) && (gameOver==0x00))
    1152:	4f cf       	rjmp	.-354    	; 0xff2 <LCD_OUTPUT_Tick+0xa6>
    1154:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <gameEndTurn>
    1158:	81 30       	cpi	r24, 0x01	; 1
    115a:	09 f0       	breq	.+2      	; 0x115e <LCD_OUTPUT_Tick+0x212>
    115c:	54 cf       	rjmp	.-344    	; 0x1006 <LCD_OUTPUT_Tick+0xba>

		default:
		break;
	}
	return state;
};
    115e:	43 cf       	rjmp	.-378    	; 0xfe6 <LCD_OUTPUT_Tick+0x9a>
    1160:	ce 01       	movw	r24, r28
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28
    1166:	08 95       	ret

00001168 <TimerISR>:
	return state;
};


// == TimerISR() ==
void TimerISR() {
    1168:	ef 92       	push	r14
    116a:	ff 92       	push	r15
    116c:	0f 93       	push	r16
    116e:	1f 93       	push	r17
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	ce e8       	ldi	r28, 0x8E	; 142
    1176:	d1 e0       	ldi	r29, 0x01	; 1
    1178:	0f 2e       	mov	r0, r31
    117a:	f6 ed       	ldi	r31, 0xD6	; 214
    117c:	ef 2e       	mov	r14, r31
    117e:	f1 e0       	ldi	r31, 0x01	; 1
    1180:	ff 2e       	mov	r15, r31
    1182:	f0 2d       	mov	r31, r0
    1184:	8e 01       	movw	r16, r28
	unsigned char i;
	for(i = 0; i < tasksNum; ++i) { // Heart of the scheduler code
		if (tasks[i].elapsedTime >= tasks[i].period)
    1186:	4e 81       	ldd	r20, Y+6	; 0x06
    1188:	5f 81       	ldd	r21, Y+7	; 0x07
    118a:	68 85       	ldd	r22, Y+8	; 0x08
    118c:	79 85       	ldd	r23, Y+9	; 0x09
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	9b 81       	ldd	r25, Y+3	; 0x03
    1192:	ac 81       	ldd	r26, Y+4	; 0x04
    1194:	bd 81       	ldd	r27, Y+5	; 0x05
    1196:	48 17       	cp	r20, r24
    1198:	59 07       	cpc	r21, r25
    119a:	6a 07       	cpc	r22, r26
    119c:	7b 07       	cpc	r23, r27
    119e:	58 f0       	brcs	.+22     	; 0x11b6 <TimerISR+0x4e>
		{ // Ready
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
    11a0:	ea 85       	ldd	r30, Y+10	; 0x0a
    11a2:	fb 85       	ldd	r31, Y+11	; 0x0b
    11a4:	88 81       	ld	r24, Y
    11a6:	99 81       	ldd	r25, Y+1	; 0x01
    11a8:	09 95       	icall
    11aa:	99 83       	std	Y+1, r25	; 0x01
    11ac:	88 83       	st	Y, r24
			tasks[i].elapsedTime = 0;
    11ae:	1e 82       	std	Y+6, r1	; 0x06
    11b0:	1f 82       	std	Y+7, r1	; 0x07
    11b2:	18 86       	std	Y+8, r1	; 0x08
    11b4:	19 86       	std	Y+9, r1	; 0x09
		}
		tasks[i].elapsedTime += tasksPeriodGCD;
    11b6:	f8 01       	movw	r30, r16
    11b8:	86 81       	ldd	r24, Z+6	; 0x06
    11ba:	97 81       	ldd	r25, Z+7	; 0x07
    11bc:	a0 85       	ldd	r26, Z+8	; 0x08
    11be:	b1 85       	ldd	r27, Z+9	; 0x09
    11c0:	01 96       	adiw	r24, 0x01	; 1
    11c2:	a1 1d       	adc	r26, r1
    11c4:	b1 1d       	adc	r27, r1
    11c6:	86 83       	std	Z+6, r24	; 0x06
    11c8:	97 83       	std	Z+7, r25	; 0x07
    11ca:	a0 87       	std	Z+8, r26	; 0x08
    11cc:	b1 87       	std	Z+9, r27	; 0x09
    11ce:	2c 96       	adiw	r28, 0x0c	; 12


// == TimerISR() ==
void TimerISR() {
	unsigned char i;
	for(i = 0; i < tasksNum; ++i) { // Heart of the scheduler code
    11d0:	ce 15       	cp	r28, r14
    11d2:	df 05       	cpc	r29, r15
    11d4:	b9 f6       	brne	.-82     	; 0x1184 <TimerISR+0x1c>
			tasks[i].elapsedTime = 0;
		}
		tasks[i].elapsedTime += tasksPeriodGCD;

	}
	TimerFlag = 1;
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <TimerFlag>
}
    11dc:	df 91       	pop	r29
    11de:	cf 91       	pop	r28
    11e0:	1f 91       	pop	r17
    11e2:	0f 91       	pop	r16
    11e4:	ff 90       	pop	r15
    11e6:	ef 90       	pop	r14
    11e8:	08 95       	ret

000011ea <__vector_13>:
//	TimerFlag = 1;
//}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
    11ea:	1f 92       	push	r1
    11ec:	0f 92       	push	r0
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	0f 92       	push	r0
    11f2:	11 24       	eor	r1, r1
    11f4:	0b b6       	in	r0, 0x3b	; 59
    11f6:	0f 92       	push	r0
    11f8:	2f 93       	push	r18
    11fa:	3f 93       	push	r19
    11fc:	4f 93       	push	r20
    11fe:	5f 93       	push	r21
    1200:	6f 93       	push	r22
    1202:	7f 93       	push	r23
    1204:	8f 93       	push	r24
    1206:	9f 93       	push	r25
    1208:	af 93       	push	r26
    120a:	bf 93       	push	r27
    120c:	ef 93       	push	r30
    120e:	ff 93       	push	r31
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
    1210:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <_avr_timer_cntcurr>
    1214:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <_avr_timer_cntcurr+0x1>
    1218:	a0 91 8b 01 	lds	r26, 0x018B	; 0x80018b <_avr_timer_cntcurr+0x2>
    121c:	b0 91 8c 01 	lds	r27, 0x018C	; 0x80018c <_avr_timer_cntcurr+0x3>
    1220:	01 97       	sbiw	r24, 0x01	; 1
    1222:	a1 09       	sbc	r26, r1
    1224:	b1 09       	sbc	r27, r1
    1226:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <_avr_timer_cntcurr>
    122a:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <_avr_timer_cntcurr+0x1>
    122e:	a0 93 8b 01 	sts	0x018B, r26	; 0x80018b <_avr_timer_cntcurr+0x2>
    1232:	b0 93 8c 01 	sts	0x018C, r27	; 0x80018c <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
    1236:	89 2b       	or	r24, r25
    1238:	8a 2b       	or	r24, r26
    123a:	8b 2b       	or	r24, r27
		TimerISR(); 				// Call the ISR that the user uses
    123c:	89 f4       	brne	.+34     	; 0x1260 <__vector_13+0x76>
		_avr_timer_cntcurr = _avr_timer_M;
    123e:	94 df       	rcall	.-216    	; 0x1168 <TimerISR>
    1240:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <_avr_timer_M>
    1244:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <_avr_timer_M+0x1>
    1248:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <_avr_timer_M+0x2>
    124c:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <_avr_timer_M+0x3>
    1250:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <_avr_timer_cntcurr>
    1254:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <_avr_timer_cntcurr+0x1>
    1258:	a0 93 8b 01 	sts	0x018B, r26	; 0x80018b <_avr_timer_cntcurr+0x2>
    125c:	b0 93 8c 01 	sts	0x018C, r27	; 0x80018c <_avr_timer_cntcurr+0x3>
	}
}
    1260:	ff 91       	pop	r31
    1262:	ef 91       	pop	r30
    1264:	bf 91       	pop	r27
    1266:	af 91       	pop	r26
    1268:	9f 91       	pop	r25
    126a:	8f 91       	pop	r24
    126c:	7f 91       	pop	r23
    126e:	6f 91       	pop	r22
    1270:	5f 91       	pop	r21
    1272:	4f 91       	pop	r20
    1274:	3f 91       	pop	r19
    1276:	2f 91       	pop	r18
    1278:	0f 90       	pop	r0
    127a:	0b be       	out	0x3b, r0	; 59
    127c:	0f 90       	pop	r0
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	0f 90       	pop	r0
    1282:	1f 90       	pop	r1
    1284:	18 95       	reti

00001286 <main>:


int main() {

	DDRA = 0xFF; PORTA = 0x00; // Initialize to output to PORT A
    1286:	8f ef       	ldi	r24, 0xFF	; 255
    1288:	81 b9       	out	0x01, r24	; 1
    128a:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xFF; PORTB = 0x00;
    128c:	84 b9       	out	0x04, r24	; 4
    128e:	15 b8       	out	0x05, r1	; 5
	//DDRC = 0x03; PORTC = 0x04; // Before LCD implementation
	DDRC = 0xFB; PORTC = 0x04; // LCD control lines on Pin 4 and Pin 5. NES Outputs on Pin 1 and Pin 2. NES Read on Pin 3
    1290:	9b ef       	ldi	r25, 0xFB	; 251
    1292:	97 b9       	out	0x07, r25	; 7
    1294:	94 e0       	ldi	r25, 0x04	; 4
    1296:	98 b9       	out	0x08, r25	; 8
	DDRD = 0xFF; PORTD = 0x00; // LCD data lines
    1298:	8a b9       	out	0x0a, r24	; 10
    129a:	1b b8       	out	0x0b, r1	; 11

	unsigned char i = 0;
	tasks[i].state = P_START;
    129c:	ee e8       	ldi	r30, 0x8E	; 142
    129e:	f1 e0       	ldi	r31, 0x01	; 1
    12a0:	11 82       	std	Z+1, r1	; 0x01
    12a2:	10 82       	st	Z, r1
	tasks[i].period = periodPaddle;
    12a4:	8e e1       	ldi	r24, 0x1E	; 30
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	a0 e0       	ldi	r26, 0x00	; 0
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	82 83       	std	Z+2, r24	; 0x02
    12ae:	93 83       	std	Z+3, r25	; 0x03
    12b0:	a4 83       	std	Z+4, r26	; 0x04
    12b2:	b5 83       	std	Z+5, r27	; 0x05
	tasks[i].elapsedTime = tasks[i].period;
    12b4:	86 83       	std	Z+6, r24	; 0x06
    12b6:	97 83       	std	Z+7, r25	; 0x07
    12b8:	a0 87       	std	Z+8, r26	; 0x08
    12ba:	b1 87       	std	Z+9, r27	; 0x09
	tasks[i].TickFct= &Paddle_Tick;
    12bc:	87 e2       	ldi	r24, 0x27	; 39
    12be:	95 e0       	ldi	r25, 0x05	; 5
    12c0:	93 87       	std	Z+11, r25	; 0x0b
    12c2:	82 87       	std	Z+10, r24	; 0x0a
	++i;
	tasks[i].state = B_START;
    12c4:	15 86       	std	Z+13, r1	; 0x0d
    12c6:	14 86       	std	Z+12, r1	; 0x0c
	tasks[i].period = periodBall;
    12c8:	48 ec       	ldi	r20, 0xC8	; 200
    12ca:	50 e0       	ldi	r21, 0x00	; 0
    12cc:	60 e0       	ldi	r22, 0x00	; 0
    12ce:	70 e0       	ldi	r23, 0x00	; 0
    12d0:	46 87       	std	Z+14, r20	; 0x0e
    12d2:	57 87       	std	Z+15, r21	; 0x0f
    12d4:	60 8b       	std	Z+16, r22	; 0x10
    12d6:	71 8b       	std	Z+17, r23	; 0x11
	tasks[i].elapsedTime = tasks[i].period;
    12d8:	42 8b       	std	Z+18, r20	; 0x12
    12da:	53 8b       	std	Z+19, r21	; 0x13
    12dc:	64 8b       	std	Z+20, r22	; 0x14
    12de:	75 8b       	std	Z+21, r23	; 0x15
	tasks[i].TickFct= &Ball_Tick;
    12e0:	87 e5       	ldi	r24, 0x57	; 87
    12e2:	91 e0       	ldi	r25, 0x01	; 1
    12e4:	97 8b       	std	Z+23, r25	; 0x17
    12e6:	86 8b       	std	Z+22, r24	; 0x16
	++i;
	tasks[i].state = BRICK_START;
    12e8:	11 8e       	std	Z+25, r1	; 0x19
    12ea:	10 8e       	std	Z+24, r1	; 0x18
	tasks[i].period = periodBrick;
    12ec:	82 e3       	ldi	r24, 0x32	; 50
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	a0 e0       	ldi	r26, 0x00	; 0
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	82 8f       	std	Z+26, r24	; 0x1a
    12f6:	93 8f       	std	Z+27, r25	; 0x1b
    12f8:	a4 8f       	std	Z+28, r26	; 0x1c
    12fa:	b5 8f       	std	Z+29, r27	; 0x1d
	tasks[i].elapsedTime = tasks[i].period;
    12fc:	86 8f       	std	Z+30, r24	; 0x1e
    12fe:	97 8f       	std	Z+31, r25	; 0x1f
    1300:	a0 a3       	std	Z+32, r26	; 0x20
    1302:	b1 a3       	std	Z+33, r27	; 0x21
	tasks[i].TickFct= &Brick_Tick;
    1304:	88 e3       	ldi	r24, 0x38	; 56
    1306:	94 e0       	ldi	r25, 0x04	; 4
    1308:	93 a3       	std	Z+35, r25	; 0x23
    130a:	82 a3       	std	Z+34, r24	; 0x22
	++i;
	tasks[i].state = O_START;
    130c:	15 a2       	std	Z+37, r1	; 0x25
    130e:	14 a2       	std	Z+36, r1	; 0x24
	tasks[i].period = periodOutput;
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	a0 e0       	ldi	r26, 0x00	; 0
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	86 a3       	std	Z+38, r24	; 0x26
    131a:	97 a3       	std	Z+39, r25	; 0x27
    131c:	a0 a7       	std	Z+40, r26	; 0x28
    131e:	b1 a7       	std	Z+41, r27	; 0x29
	tasks[i].elapsedTime = tasks[i].period;
    1320:	82 a7       	std	Z+42, r24	; 0x2a
    1322:	93 a7       	std	Z+43, r25	; 0x2b
    1324:	a4 a7       	std	Z+44, r26	; 0x2c
    1326:	b5 a7       	std	Z+45, r27	; 0x2d
	tasks[i].TickFct= &LED_MATRIX_OUTPUT_Tick;
    1328:	2e ed       	ldi	r18, 0xDE	; 222
    132a:	34 e0       	ldi	r19, 0x04	; 4
    132c:	37 a7       	std	Z+47, r19	; 0x2f
    132e:	26 a7       	std	Z+46, r18	; 0x2e
	++i;
	tasks[i].state = LCD_O_START;
    1330:	11 aa       	std	Z+49, r1	; 0x31
    1332:	10 aa       	std	Z+48, r1	; 0x30
	tasks[i].period = periodLCDOutput;
    1334:	42 ab       	std	Z+50, r20	; 0x32
    1336:	53 ab       	std	Z+51, r21	; 0x33
    1338:	64 ab       	std	Z+52, r22	; 0x34
    133a:	75 ab       	std	Z+53, r23	; 0x35
	tasks[i].elapsedTime = tasks[i].period;
    133c:	46 ab       	std	Z+54, r20	; 0x36
    133e:	57 ab       	std	Z+55, r21	; 0x37
    1340:	60 af       	std	Z+56, r22	; 0x38
    1342:	71 af       	std	Z+57, r23	; 0x39
	tasks[i].TickFct= &LCD_OUTPUT_Tick;
    1344:	26 ea       	ldi	r18, 0xA6	; 166
    1346:	37 e0       	ldi	r19, 0x07	; 7
    1348:	33 af       	std	Z+59, r19	; 0x3b
    134a:	22 af       	std	Z+58, r18	; 0x3a
	++i;
	tasks[i].state = G_START;
    134c:	15 ae       	std	Z+61, r1	; 0x3d
    134e:	14 ae       	std	Z+60, r1	; 0x3c
	tasks[i].period = periodGame;
    1350:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <tasks+0x3e>
    1354:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <tasks+0x3f>
    1358:	a0 93 ce 01 	sts	0x01CE, r26	; 0x8001ce <tasks+0x40>
    135c:	b0 93 cf 01 	sts	0x01CF, r27	; 0x8001cf <tasks+0x41>
	tasks[i].elapsedTime = tasks[i].period;
    1360:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <tasks+0x42>
    1364:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <tasks+0x43>
    1368:	a0 93 d2 01 	sts	0x01D2, r26	; 0x8001d2 <tasks+0x44>
    136c:	b0 93 d3 01 	sts	0x01D3, r27	; 0x8001d3 <tasks+0x45>
	tasks[i].TickFct= &GAME_Tick;
    1370:	84 e8       	ldi	r24, 0x84	; 132
    1372:	96 e0       	ldi	r25, 0x06	; 6
    1374:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <tasks+0x47>
    1378:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <tasks+0x46>

	

 	TimerSet(tasksPeriodGCD);
    137c:	61 e0       	ldi	r22, 0x01	; 1
    137e:	70 e0       	ldi	r23, 0x00	; 0
    1380:	80 e0       	ldi	r24, 0x00	; 0
 	TimerOn();
	
	   // Initializes the LCD display
	   	LCD_init();
    1382:	90 e0       	ldi	r25, 0x00	; 0
	   	LCD_Cursor(0x01);
    1384:	34 dc       	rcall	.-1944   	; 0xbee <TimerSet>
    1386:	44 dc       	rcall	.-1912   	; 0xc10 <TimerOn>
		//LCD_DisplayString(1, "Systems Online.");
		LCD_DisplayString(1, "LOADING...");
    1388:	8e dc       	rcall	.-1764   	; 0xca6 <LCD_init>
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	84 dc       	rcall	.-1784   	; 0xc96 <LCD_Cursor>
    138e:	6e e6       	ldi	r22, 0x6E	; 110
    1390:	71 e0       	ldi	r23, 0x01	; 1

	while(1)
	{
		while (!TimerFlag);
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	a0 dc       	rcall	.-1728   	; 0xcd6 <LCD_DisplayString>
    1396:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <TimerFlag>
		TimerFlag = 0;			
    139a:	88 23       	and	r24, r24
    139c:	e1 f3       	breq	.-8      	; 0x1396 <main+0x110>
	}
    139e:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <TimerFlag>
    13a2:	f9 cf       	rjmp	.-14     	; 0x1396 <main+0x110>

000013a4 <__tablejump2__>:
    13a4:	ee 0f       	add	r30, r30
    13a6:	ff 1f       	adc	r31, r31
    13a8:	00 24       	eor	r0, r0
    13aa:	00 1c       	adc	r0, r0
    13ac:	0b be       	out	0x3b, r0	; 59
    13ae:	07 90       	elpm	r0, Z+
    13b0:	f6 91       	elpm	r31, Z
    13b2:	e0 2d       	mov	r30, r0
    13b4:	09 94       	ijmp

000013b6 <_exit>:
    13b6:	f8 94       	cli

000013b8 <__stop_program>:
    13b8:	ff cf       	rjmp	.-2      	; 0x13b8 <__stop_program>
