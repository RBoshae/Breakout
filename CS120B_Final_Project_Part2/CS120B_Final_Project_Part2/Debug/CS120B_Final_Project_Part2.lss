
CS120B_Final_Project_Part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000d6e  00000e02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007c  00800128  00800128  00000e2a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001392  00000000  00000000  00000f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a3f  00000000  00000000  000022fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cb1  00000000  00000000  00002d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  000039f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000088a  00000000  00000000  00003c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000af1  00000000  00000000  00004526  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00005017  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	56 c0       	rjmp	.+172    	; 0xae <__ctors_end>
   2:	00 00       	nop
   4:	71 c0       	rjmp	.+226    	; 0xe8 <__bad_interrupt>
   6:	00 00       	nop
   8:	6f c0       	rjmp	.+222    	; 0xe8 <__bad_interrupt>
   a:	00 00       	nop
   c:	6d c0       	rjmp	.+218    	; 0xe8 <__bad_interrupt>
   e:	00 00       	nop
  10:	6b c0       	rjmp	.+214    	; 0xe8 <__bad_interrupt>
  12:	00 00       	nop
  14:	69 c0       	rjmp	.+210    	; 0xe8 <__bad_interrupt>
  16:	00 00       	nop
  18:	67 c0       	rjmp	.+206    	; 0xe8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	65 c0       	rjmp	.+202    	; 0xe8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	63 c0       	rjmp	.+198    	; 0xe8 <__bad_interrupt>
  22:	00 00       	nop
  24:	61 c0       	rjmp	.+194    	; 0xe8 <__bad_interrupt>
  26:	00 00       	nop
  28:	5f c0       	rjmp	.+190    	; 0xe8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5d c0       	rjmp	.+186    	; 0xe8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	5b c0       	rjmp	.+182    	; 0xe8 <__bad_interrupt>
  32:	00 00       	nop
  34:	cc c5       	rjmp	.+2968   	; 0xbce <__vector_13>
  36:	00 00       	nop
  38:	57 c0       	rjmp	.+174    	; 0xe8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	55 c0       	rjmp	.+170    	; 0xe8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	53 c0       	rjmp	.+166    	; 0xe8 <__bad_interrupt>
  42:	00 00       	nop
  44:	51 c0       	rjmp	.+162    	; 0xe8 <__bad_interrupt>
  46:	00 00       	nop
  48:	4f c0       	rjmp	.+158    	; 0xe8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4d c0       	rjmp	.+154    	; 0xe8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	4b c0       	rjmp	.+150    	; 0xe8 <__bad_interrupt>
  52:	00 00       	nop
  54:	49 c0       	rjmp	.+146    	; 0xe8 <__bad_interrupt>
  56:	00 00       	nop
  58:	47 c0       	rjmp	.+142    	; 0xe8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	45 c0       	rjmp	.+138    	; 0xe8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	43 c0       	rjmp	.+134    	; 0xe8 <__bad_interrupt>
  62:	00 00       	nop
  64:	41 c0       	rjmp	.+130    	; 0xe8 <__bad_interrupt>
  66:	00 00       	nop
  68:	3f c0       	rjmp	.+126    	; 0xe8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3d c0       	rjmp	.+122    	; 0xe8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	3b c0       	rjmp	.+118    	; 0xe8 <__bad_interrupt>
  72:	00 00       	nop
  74:	39 c0       	rjmp	.+114    	; 0xe8 <__bad_interrupt>
  76:	00 00       	nop
  78:	37 c0       	rjmp	.+110    	; 0xe8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	35 c0       	rjmp	.+106    	; 0xe8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	33 c0       	rjmp	.+102    	; 0xe8 <__bad_interrupt>
  82:	00 00       	nop
  84:	31 c0       	rjmp	.+98     	; 0xe8 <__bad_interrupt>
  86:	00 00       	nop
  88:	2f c0       	rjmp	.+94     	; 0xe8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	02 02       	muls	r16, r18
  8e:	07 02       	muls	r16, r23
  90:	0c 02       	muls	r16, r28
  92:	10 02       	muls	r17, r16
  94:	3f 02       	muls	r19, r31
  96:	4e 02       	muls	r20, r30
  98:	da 02       	muls	r29, r26
  9a:	6c 03       	fmul	r22, r20
  9c:	91 03       	fmuls	r17, r17
  9e:	c6 03       	fmuls	r20, r22
  a0:	0c 04       	cpc	r0, r12
  a2:	cd 03       	fmulsu	r20, r21
  a4:	d3 03       	fmuls	r21, r19
  a6:	db 03       	fmulsu	r21, r19
  a8:	f5 03       	fmuls	r23, r21
  aa:	e9 03       	fmulsu	r22, r17
  ac:	01 04       	cpc	r0, r1

000000ae <__ctors_end>:
  ae:	11 24       	eor	r1, r1
  b0:	1f be       	out	0x3f, r1	; 63
  b2:	cf ef       	ldi	r28, 0xFF	; 255
  b4:	d0 e4       	ldi	r29, 0x40	; 64
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	cd bf       	out	0x3d, r28	; 61

000000ba <__do_copy_data>:
  ba:	11 e0       	ldi	r17, 0x01	; 1
  bc:	a0 e0       	ldi	r26, 0x00	; 0
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	ee e6       	ldi	r30, 0x6E	; 110
  c2:	fd e0       	ldi	r31, 0x0D	; 13
  c4:	00 e0       	ldi	r16, 0x00	; 0
  c6:	0b bf       	out	0x3b, r16	; 59
  c8:	02 c0       	rjmp	.+4      	; 0xce <__do_copy_data+0x14>
  ca:	07 90       	elpm	r0, Z+
  cc:	0d 92       	st	X+, r0
  ce:	a8 32       	cpi	r26, 0x28	; 40
  d0:	b1 07       	cpc	r27, r17
  d2:	d9 f7       	brne	.-10     	; 0xca <__do_copy_data+0x10>

000000d4 <__do_clear_bss>:
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	a8 e2       	ldi	r26, 0x28	; 40
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	01 c0       	rjmp	.+2      	; 0xde <.do_clear_bss_start>

000000dc <.do_clear_bss_loop>:
  dc:	1d 92       	st	X+, r1

000000de <.do_clear_bss_start>:
  de:	a4 3a       	cpi	r26, 0xA4	; 164
  e0:	b2 07       	cpc	r27, r18
  e2:	e1 f7       	brne	.-8      	; 0xdc <.do_clear_bss_loop>
  e4:	c2 d5       	rcall	.+2948   	; 0xc6a <main>
  e6:	41 c6       	rjmp	.+3202   	; 0xd6a <_exit>

000000e8 <__bad_interrupt>:
  e8:	8b cf       	rjmp	.-234    	; 0x0 <__vectors>

000000ea <turn_off_LED.1958>:
	//Enable global interrupts
	SREG |= 0x80;	// 0x80: 1000000
}

void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
  ea:	8a 31       	cpi	r24, 0x1A	; 26
  ec:	91 05       	cpc	r25, r1
  ee:	40 f4       	brcc	.+16     	; 0x100 <turn_off_LED.1958+0x16>
  f0:	fc 01       	movw	r30, r24
  f2:	e0 59       	subi	r30, 0x90	; 144
  f4:	fe 4f       	sbci	r31, 0xFE	; 254
  f6:	10 82       	st	Z, r1
  f8:	fc 01       	movw	r30, r24
  fa:	e6 57       	subi	r30, 0x76	; 118
  fc:	fe 4f       	sbci	r31, 0xFE	; 254
  fe:	10 82       	st	Z, r1
 100:	08 95       	ret

00000102 <paddle_collision_detection.1960>:
 102:	2f 92       	push	r2
 104:	3f 92       	push	r3
 106:	ef 92       	push	r14
 108:	ff 92       	push	r15
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <FLOOR>
 116:	86 95       	lsr	r24
 118:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <ball_row.1953>
 11c:	89 13       	cpse	r24, r25
 11e:	9f c0       	rjmp	.+318    	; 0x25e <paddle_collision_detection.1960+0x15c>
 120:	00 91 01 01 	lds	r16, 0x0101	; 0x800101 <ball_column.1954>
 124:	a0 2f       	mov	r26, r16
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	10 e0       	ldi	r17, 0x00	; 0
 12e:	ea e8       	ldi	r30, 0x8A	; 138
 130:	f1 e0       	ldi	r31, 0x01	; 1
 132:	0f 2e       	mov	r0, r31
 134:	f5 e0       	ldi	r31, 0x05	; 5
 136:	ef 2e       	mov	r14, r31
 138:	f1 2c       	mov	r15, r1
 13a:	f0 2d       	mov	r31, r0
 13c:	ad 01       	movw	r20, r26
 13e:	02 2e       	mov	r0, r18
 140:	02 c0       	rjmp	.+4      	; 0x146 <paddle_collision_detection.1960+0x44>
 142:	55 95       	asr	r21
 144:	47 95       	ror	r20
 146:	0a 94       	dec	r0
 148:	e2 f7       	brpl	.-8      	; 0x142 <paddle_collision_detection.1960+0x40>
 14a:	80 81       	ld	r24, Z
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 2e       	mov	r0, r18
 150:	02 c0       	rjmp	.+4      	; 0x156 <paddle_collision_detection.1960+0x54>
 152:	95 95       	asr	r25
 154:	87 95       	ror	r24
 156:	0a 94       	dec	r0
 158:	e2 f7       	brpl	.-8      	; 0x152 <paddle_collision_detection.1960+0x50>
 15a:	78 2f       	mov	r23, r24
 15c:	71 70       	andi	r23, 0x01	; 1
 15e:	64 2f       	mov	r22, r20
 160:	61 70       	andi	r22, 0x01	; 1
 162:	40 ff       	sbrs	r20, 0
 164:	04 c0       	rjmp	.+8      	; 0x16e <paddle_collision_detection.1960+0x6c>
 166:	71 11       	cpse	r23, r1
 168:	3b c0       	rjmp	.+118    	; 0x1e0 <paddle_collision_detection.1960+0xde>
 16a:	1f 5f       	subi	r17, 0xFF	; 255
 16c:	3d c0       	rjmp	.+122    	; 0x1e8 <paddle_collision_detection.1960+0xe6>
 16e:	61 11       	cpse	r22, r1
 170:	37 c0       	rjmp	.+110    	; 0x1e0 <paddle_collision_detection.1960+0xde>
 172:	71 30       	cpi	r23, 0x01	; 1
 174:	a9 f5       	brne	.+106    	; 0x1e0 <paddle_collision_detection.1960+0xde>
 176:	80 81       	ld	r24, Z
 178:	a9 01       	movw	r20, r18
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	b9 01       	movw	r22, r18
 17e:	6f 5f       	subi	r22, 0xFF	; 255
 180:	7f 4f       	sbci	r23, 0xFF	; 255
 182:	02 c0       	rjmp	.+4      	; 0x188 <paddle_collision_detection.1960+0x86>
 184:	95 95       	asr	r25
 186:	87 95       	ror	r24
 188:	6a 95       	dec	r22
 18a:	e2 f7       	brpl	.-8      	; 0x184 <paddle_collision_detection.1960+0x82>
 18c:	80 fd       	sbrc	r24, 0
 18e:	12 c0       	rjmp	.+36     	; 0x1b4 <paddle_collision_detection.1960+0xb2>
 190:	e1 01       	movw	r28, r2
 192:	88 81       	ld	r24, Y
 194:	99 81       	ldd	r25, Y+1	; 0x01
 196:	07 97       	sbiw	r24, 0x07	; 7
 198:	09 f0       	breq	.+2      	; 0x19c <paddle_collision_detection.1960+0x9a>
 19a:	5c c0       	rjmp	.+184    	; 0x254 <paddle_collision_detection.1960+0x152>
 19c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <RIGHT_WALL>
 1a0:	08 13       	cpse	r16, r24
 1a2:	03 c0       	rjmp	.+6      	; 0x1aa <paddle_collision_detection.1960+0xa8>
 1a4:	f9 82       	std	Y+1, r15	; 0x01
 1a6:	e8 82       	st	Y, r14
 1a8:	05 c0       	rjmp	.+10     	; 0x1b4 <paddle_collision_detection.1960+0xb2>
 1aa:	86 e0       	ldi	r24, 0x06	; 6
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	99 83       	std	Y+1, r25	; 0x01
 1b0:	88 83       	st	Y, r24
 1b2:	55 c0       	rjmp	.+170    	; 0x25e <paddle_collision_detection.1960+0x15c>
 1b4:	80 81       	ld	r24, Z
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	41 50       	subi	r20, 0x01	; 1
 1ba:	51 09       	sbc	r21, r1
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <paddle_collision_detection.1960+0xc0>
 1be:	95 95       	asr	r25
 1c0:	87 95       	ror	r24
 1c2:	4a 95       	dec	r20
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <paddle_collision_detection.1960+0xbc>
 1c6:	80 fd       	sbrc	r24, 0
 1c8:	0f c0       	rjmp	.+30     	; 0x1e8 <paddle_collision_detection.1960+0xe6>
 1ca:	e1 01       	movw	r28, r2
 1cc:	88 81       	ld	r24, Y
 1ce:	99 81       	ldd	r25, Y+1	; 0x01
 1d0:	08 97       	sbiw	r24, 0x08	; 8
 1d2:	09 f0       	breq	.+2      	; 0x1d6 <paddle_collision_detection.1960+0xd4>
 1d4:	3f c0       	rjmp	.+126    	; 0x254 <paddle_collision_detection.1960+0x152>
 1d6:	85 e0       	ldi	r24, 0x05	; 5
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	99 83       	std	Y+1, r25	; 0x01
 1dc:	88 83       	st	Y, r24
 1de:	3f c0       	rjmp	.+126    	; 0x25e <paddle_collision_detection.1960+0x15c>
 1e0:	84 2b       	or	r24, r20
 1e2:	95 2b       	or	r25, r21
 1e4:	80 ff       	sbrs	r24, 0
 1e6:	06 c0       	rjmp	.+12     	; 0x1f4 <paddle_collision_detection.1960+0xf2>
 1e8:	2f 5f       	subi	r18, 0xFF	; 255
 1ea:	3f 4f       	sbci	r19, 0xFF	; 255
 1ec:	28 30       	cpi	r18, 0x08	; 8
 1ee:	31 05       	cpc	r19, r1
 1f0:	09 f0       	breq	.+2      	; 0x1f4 <paddle_collision_detection.1960+0xf2>
 1f2:	a4 cf       	rjmp	.-184    	; 0x13c <paddle_collision_detection.1960+0x3a>
 1f4:	11 11       	cpse	r17, r1
 1f6:	10 c0       	rjmp	.+32     	; 0x218 <paddle_collision_detection.1960+0x116>
 1f8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <RIGHT_WALL>
 1fc:	08 13       	cpse	r16, r24
 1fe:	06 c0       	rjmp	.+12     	; 0x20c <paddle_collision_detection.1960+0x10a>
 200:	85 e0       	ldi	r24, 0x05	; 5
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	f1 01       	movw	r30, r2
 206:	91 83       	std	Z+1, r25	; 0x01
 208:	80 83       	st	Z, r24
 20a:	29 c0       	rjmp	.+82     	; 0x25e <paddle_collision_detection.1960+0x15c>
 20c:	86 e0       	ldi	r24, 0x06	; 6
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	e1 01       	movw	r28, r2
 212:	99 83       	std	Y+1, r25	; 0x01
 214:	88 83       	st	Y, r24
 216:	23 c0       	rjmp	.+70     	; 0x25e <paddle_collision_detection.1960+0x15c>
 218:	11 30       	cpi	r17, 0x01	; 1
 21a:	91 f4       	brne	.+36     	; 0x240 <paddle_collision_detection.1960+0x13e>
 21c:	f1 01       	movw	r30, r2
 21e:	80 81       	ld	r24, Z
 220:	91 81       	ldd	r25, Z+1	; 0x01
 222:	88 30       	cpi	r24, 0x08	; 8
 224:	91 05       	cpc	r25, r1
 226:	29 f4       	brne	.+10     	; 0x232 <paddle_collision_detection.1960+0x130>
 228:	86 e0       	ldi	r24, 0x06	; 6
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	91 83       	std	Z+1, r25	; 0x01
 22e:	80 83       	st	Z, r24
 230:	16 c0       	rjmp	.+44     	; 0x25e <paddle_collision_detection.1960+0x15c>
 232:	07 97       	sbiw	r24, 0x07	; 7
 234:	a1 f4       	brne	.+40     	; 0x25e <paddle_collision_detection.1960+0x15c>
 236:	85 e0       	ldi	r24, 0x05	; 5
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	91 83       	std	Z+1, r25	; 0x01
 23c:	80 83       	st	Z, r24
 23e:	0f c0       	rjmp	.+30     	; 0x25e <paddle_collision_detection.1960+0x15c>
 240:	12 30       	cpi	r17, 0x02	; 2
 242:	31 f4       	brne	.+12     	; 0x250 <paddle_collision_detection.1960+0x14e>
 244:	85 e0       	ldi	r24, 0x05	; 5
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	f1 01       	movw	r30, r2
 24a:	91 83       	std	Z+1, r25	; 0x01
 24c:	80 83       	st	Z, r24
 24e:	07 c0       	rjmp	.+14     	; 0x25e <paddle_collision_detection.1960+0x15c>
 250:	18 30       	cpi	r17, 0x08	; 8
 252:	29 f0       	breq	.+10     	; 0x25e <paddle_collision_detection.1960+0x15c>
 254:	82 e0       	ldi	r24, 0x02	; 2
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	e1 01       	movw	r28, r2
 25a:	99 83       	std	Y+1, r25	; 0x01
 25c:	88 83       	st	Y, r24
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	1f 91       	pop	r17
 264:	0f 91       	pop	r16
 266:	ff 90       	pop	r15
 268:	ef 90       	pop	r14
 26a:	3f 90       	pop	r3
 26c:	2f 90       	pop	r2
 26e:	08 95       	ret

00000270 <LED_MATRIX_OUTPUT_Tick>:
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	02 97       	sbiw	r24, 0x02	; 2
 274:	30 f5       	brcc	.+76     	; 0x2c2 <LED_MATRIX_OUTPUT_Tick+0x52>
 276:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <index.2043>
 27a:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <index.2043+0x1>
 27e:	e0 59       	subi	r30, 0x90	; 144
 280:	fe 4f       	sbci	r31, 0xFE	; 254
 282:	80 81       	ld	r24, Z
 284:	82 b9       	out	0x02, r24	; 2
 286:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <index.2043>
 28a:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <index.2043+0x1>
 28e:	e6 57       	subi	r30, 0x76	; 118
 290:	fe 4f       	sbci	r31, 0xFE	; 254
 292:	80 81       	ld	r24, Z
 294:	85 b9       	out	0x05, r24	; 5
 296:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <index.2043>
 29a:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <index.2043+0x1>
 29e:	89 31       	cpi	r24, 0x19	; 25
 2a0:	91 05       	cpc	r25, r1
 2a2:	39 f4       	brne	.+14     	; 0x2b2 <LED_MATRIX_OUTPUT_Tick+0x42>
 2a4:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <index.2043+0x1>
 2a8:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <index.2043>
 2ac:	82 e0       	ldi	r24, 0x02	; 2
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	08 95       	ret
 2b2:	01 96       	adiw	r24, 0x01	; 1
 2b4:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <index.2043+0x1>
 2b8:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <index.2043>
 2bc:	82 e0       	ldi	r24, 0x02	; 2
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	08 95       	ret
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	08 95       	ret

000002c8 <GetNESControllerButton>:
 2c8:	41 9a       	sbi	0x08, 1	; 8
 2ca:	41 98       	cbi	0x08, 1	; 8
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	50 e0       	ldi	r21, 0x00	; 0
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	26 b1       	in	r18, 0x06	; 6
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	20 95       	com	r18
 2d8:	30 95       	com	r19
 2da:	22 fb       	bst	r18, 2
 2dc:	66 27       	eor	r22, r22
 2de:	60 f9       	bld	r22, 0
 2e0:	70 e0       	ldi	r23, 0x00	; 0
 2e2:	9b 01       	movw	r18, r22
 2e4:	04 2e       	mov	r0, r20
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <GetNESControllerButton+0x24>
 2e8:	22 0f       	add	r18, r18
 2ea:	33 1f       	adc	r19, r19
 2ec:	0a 94       	dec	r0
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <GetNESControllerButton+0x20>
 2f0:	82 2b       	or	r24, r18
 2f2:	40 9a       	sbi	0x08, 0	; 8
 2f4:	40 98       	cbi	0x08, 0	; 8
 2f6:	4f 5f       	subi	r20, 0xFF	; 255
 2f8:	5f 4f       	sbci	r21, 0xFF	; 255
 2fa:	48 30       	cpi	r20, 0x08	; 8
 2fc:	51 05       	cpc	r21, r1
 2fe:	49 f7       	brne	.-46     	; 0x2d2 <GetNESControllerButton+0xa>
 300:	08 95       	ret

00000302 <Paddle_Tick>:
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	ec 01       	movw	r28, r24
 308:	df df       	rcall	.-66     	; 0x2c8 <GetNESControllerButton>
 30a:	c3 30       	cpi	r28, 0x03	; 3
 30c:	d1 05       	cpc	r29, r1
 30e:	a1 f0       	breq	.+40     	; 0x338 <Paddle_Tick+0x36>
 310:	3c f4       	brge	.+14     	; 0x320 <Paddle_Tick+0x1e>
 312:	c1 30       	cpi	r28, 0x01	; 1
 314:	d1 05       	cpc	r29, r1
 316:	69 f1       	breq	.+90     	; 0x372 <Paddle_Tick+0x70>
 318:	c2 30       	cpi	r28, 0x02	; 2
 31a:	d1 05       	cpc	r29, r1
 31c:	49 f0       	breq	.+18     	; 0x330 <Paddle_Tick+0x2e>
 31e:	20 c0       	rjmp	.+64     	; 0x360 <Paddle_Tick+0x5e>
 320:	c6 30       	cpi	r28, 0x06	; 6
 322:	d1 05       	cpc	r29, r1
 324:	0c f4       	brge	.+2      	; 0x328 <Paddle_Tick+0x26>
 326:	46 c0       	rjmp	.+140    	; 0x3b4 <Paddle_Tick+0xb2>
 328:	c6 30       	cpi	r28, 0x06	; 6
 32a:	d1 05       	cpc	r29, r1
 32c:	51 f0       	breq	.+20     	; 0x342 <Paddle_Tick+0x40>
 32e:	18 c0       	rjmp	.+48     	; 0x360 <Paddle_Tick+0x5e>
 330:	88 30       	cpi	r24, 0x08	; 8
 332:	09 f0       	breq	.+2      	; 0x336 <Paddle_Tick+0x34>
 334:	41 c0       	rjmp	.+130    	; 0x3b8 <Paddle_Tick+0xb6>
 336:	1d c0       	rjmp	.+58     	; 0x372 <Paddle_Tick+0x70>
 338:	80 34       	cpi	r24, 0x40	; 64
 33a:	01 f1       	breq	.+64     	; 0x37c <Paddle_Tick+0x7a>
 33c:	80 38       	cpi	r24, 0x80	; 128
 33e:	c9 f4       	brne	.+50     	; 0x372 <Paddle_Tick+0x70>
 340:	28 c0       	rjmp	.+80     	; 0x392 <Paddle_Tick+0x90>
 342:	88 23       	and	r24, r24
 344:	b1 f0       	breq	.+44     	; 0x372 <Paddle_Tick+0x70>
 346:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <button_hold_count.1919>
 34a:	92 30       	cpi	r25, 0x02	; 2
 34c:	20 f4       	brcc	.+8      	; 0x356 <Paddle_Tick+0x54>
 34e:	9f 5f       	subi	r25, 0xFF	; 255
 350:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <button_hold_count.1919>
 354:	31 c0       	rjmp	.+98     	; 0x3b8 <Paddle_Tick+0xb6>
 356:	80 34       	cpi	r24, 0x40	; 64
 358:	89 f0       	breq	.+34     	; 0x37c <Paddle_Tick+0x7a>
 35a:	80 38       	cpi	r24, 0x80	; 128
 35c:	69 f5       	brne	.+90     	; 0x3b8 <Paddle_Tick+0xb6>
 35e:	19 c0       	rjmp	.+50     	; 0x392 <Paddle_Tick+0x90>
 360:	80 e8       	ldi	r24, 0x80	; 128
 362:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bottom_row.1917>
 366:	88 ef       	ldi	r24, 0xF8	; 248
 368:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <paddle_pos.1918>
 36c:	c1 e0       	ldi	r28, 0x01	; 1
 36e:	d0 e0       	ldi	r29, 0x00	; 0
 370:	23 c0       	rjmp	.+70     	; 0x3b8 <Paddle_Tick+0xb6>
 372:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <button_hold_count.1919>
 376:	c3 e0       	ldi	r28, 0x03	; 3
 378:	d0 e0       	ldi	r29, 0x00	; 0
 37a:	1e c0       	rjmp	.+60     	; 0x3b8 <Paddle_Tick+0xb6>
 37c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <paddle_pos.1918>
 380:	8f 31       	cpi	r24, 0x1F	; 31
 382:	91 f0       	breq	.+36     	; 0x3a8 <Paddle_Tick+0xa6>
 384:	88 0f       	add	r24, r24
 386:	81 60       	ori	r24, 0x01	; 1
 388:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <paddle_pos.1918>
 38c:	c4 e0       	ldi	r28, 0x04	; 4
 38e:	d0 e0       	ldi	r29, 0x00	; 0
 390:	13 c0       	rjmp	.+38     	; 0x3b8 <Paddle_Tick+0xb6>
 392:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <paddle_pos.1918>
 396:	88 3f       	cpi	r24, 0xF8	; 248
 398:	51 f0       	breq	.+20     	; 0x3ae <Paddle_Tick+0xac>
 39a:	86 95       	lsr	r24
 39c:	80 68       	ori	r24, 0x80	; 128
 39e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <paddle_pos.1918>
 3a2:	c5 e0       	ldi	r28, 0x05	; 5
 3a4:	d0 e0       	ldi	r29, 0x00	; 0
 3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <Paddle_Tick+0xb6>
 3a8:	c4 e0       	ldi	r28, 0x04	; 4
 3aa:	d0 e0       	ldi	r29, 0x00	; 0
 3ac:	05 c0       	rjmp	.+10     	; 0x3b8 <Paddle_Tick+0xb6>
 3ae:	c5 e0       	ldi	r28, 0x05	; 5
 3b0:	d0 e0       	ldi	r29, 0x00	; 0
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <Paddle_Tick+0xb6>
 3b4:	c6 e0       	ldi	r28, 0x06	; 6
 3b6:	d0 e0       	ldi	r29, 0x00	; 0
 3b8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <bottom_row.1917>
 3bc:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <DISPLAY_PORTA>
 3c0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <paddle_pos.1918>
 3c4:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <DISPLAY_PORTB>
 3c8:	ce 01       	movw	r24, r28
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	08 95       	ret

000003d0 <Ball_Tick>:
 3d0:	2f 92       	push	r2
 3d2:	3f 92       	push	r3
 3d4:	bf 92       	push	r11
 3d6:	cf 92       	push	r12
 3d8:	df 92       	push	r13
 3da:	ef 92       	push	r14
 3dc:	ff 92       	push	r15
 3de:	0f 93       	push	r16
 3e0:	1f 93       	push	r17
 3e2:	cf 93       	push	r28
 3e4:	df 93       	push	r29
 3e6:	00 d0       	rcall	.+0      	; 0x3e8 <Ball_Tick+0x18>
 3e8:	cd b7       	in	r28, 0x3d	; 61
 3ea:	de b7       	in	r29, 0x3e	; 62
 3ec:	9a 83       	std	Y+2, r25	; 0x02
 3ee:	89 83       	std	Y+1, r24	; 0x01
 3f0:	6b df       	rcall	.-298    	; 0x2c8 <GetNESControllerButton>
 3f2:	e9 81       	ldd	r30, Y+1	; 0x01
 3f4:	fa 81       	ldd	r31, Y+2	; 0x02
 3f6:	e9 30       	cpi	r30, 0x09	; 9
 3f8:	f1 05       	cpc	r31, r1
 3fa:	08 f0       	brcs	.+2      	; 0x3fe <Ball_Tick+0x2e>
 3fc:	b7 c1       	rjmp	.+878    	; 0x76c <__LOCK_REGION_LENGTH__+0x36c>
 3fe:	ea 5b       	subi	r30, 0xBA	; 186
 400:	ff 4f       	sbci	r31, 0xFF	; 255
 402:	aa c4       	rjmp	.+2388   	; 0xd58 <__tablejump2__>
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	9a 83       	std	Y+2, r25	; 0x02
 40a:	89 83       	std	Y+1, r24	; 0x01
 40c:	11 c2       	rjmp	.+1058   	; 0x830 <__LOCK_REGION_LENGTH__+0x430>
 40e:	82 e0       	ldi	r24, 0x02	; 2
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	9a 83       	std	Y+2, r25	; 0x02
 414:	89 83       	std	Y+1, r24	; 0x01
 416:	09 c2       	rjmp	.+1042   	; 0x82a <__LOCK_REGION_LENGTH__+0x42a>
 418:	88 30       	cpi	r24, 0x08	; 8
 41a:	09 f0       	breq	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41c:	06 c2       	rjmp	.+1036   	; 0x82a <__LOCK_REGION_LENGTH__+0x42a>
 41e:	cb c1       	rjmp	.+918    	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
 420:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <ball_row.1953>
 424:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <CEILING>
 428:	48 13       	cpse	r20, r24
 42a:	04 c0       	rjmp	.+8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 42c:	84 e0       	ldi	r24, 0x04	; 4
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	9a 83       	std	Y+2, r25	; 0x02
 432:	89 83       	std	Y+1, r24	; 0x01
 434:	46 95       	lsr	r20
 436:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <ball_column.1954>
 43a:	70 e0       	ldi	r23, 0x00	; 0
 43c:	60 95       	com	r22
 43e:	70 95       	com	r23
 440:	82 e0       	ldi	r24, 0x02	; 2
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	fc 01       	movw	r30, r24
 446:	e0 59       	subi	r30, 0x90	; 144
 448:	fe 4f       	sbci	r31, 0xFE	; 254
 44a:	20 81       	ld	r18, Z
 44c:	24 23       	and	r18, r20
 44e:	91 f0       	breq	.+36     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 450:	fc 01       	movw	r30, r24
 452:	e6 57       	subi	r30, 0x76	; 118
 454:	fe 4f       	sbci	r31, 0xFE	; 254
 456:	20 81       	ld	r18, Z
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	26 23       	and	r18, r22
 45c:	37 23       	and	r19, r23
 45e:	23 2b       	or	r18, r19
 460:	49 f4       	brne	.+18     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 462:	fc 01       	movw	r30, r24
 464:	e0 59       	subi	r30, 0x90	; 144
 466:	fe 4f       	sbci	r31, 0xFE	; 254
 468:	10 82       	st	Z, r1
 46a:	fc 01       	movw	r30, r24
 46c:	e6 57       	subi	r30, 0x76	; 118
 46e:	fe 4f       	sbci	r31, 0xFE	; 254
 470:	10 82       	st	Z, r1
 472:	99 c1       	rjmp	.+818    	; 0x7a6 <__LOCK_REGION_LENGTH__+0x3a6>
 474:	01 96       	adiw	r24, 0x01	; 1
 476:	8a 31       	cpi	r24, 0x1A	; 26
 478:	91 05       	cpc	r25, r1
 47a:	21 f7       	brne	.-56     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 47c:	7c c1       	rjmp	.+760    	; 0x776 <__LOCK_REGION_LENGTH__+0x376>
 47e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <ball_row.1953>
 482:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <FLOOR>
 486:	98 13       	cpse	r25, r24
 488:	04 c0       	rjmp	.+8      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 48a:	83 e0       	ldi	r24, 0x03	; 3
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	9a 83       	std	Y+2, r25	; 0x02
 490:	89 83       	std	Y+1, r24	; 0x01
 492:	ce 01       	movw	r24, r28
 494:	01 96       	adiw	r24, 0x01	; 1
 496:	1c 01       	movw	r2, r24
 498:	34 de       	rcall	.-920    	; 0x102 <paddle_collision_detection.1960>
 49a:	6d c1       	rjmp	.+730    	; 0x776 <__LOCK_REGION_LENGTH__+0x376>
 49c:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <ball_column.1954>
 4a0:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <LEFT_WALL>
 4a4:	5b 13       	cpse	r21, r27
 4a6:	10 c0       	rjmp	.+32     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4a8:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <ball_row.1953>
 4ac:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <CEILING>
 4b0:	98 13       	cpse	r25, r24
 4b2:	05 c0       	rjmp	.+10     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 4b4:	87 e0       	ldi	r24, 0x07	; 7
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	9a 83       	std	Y+2, r25	; 0x02
 4ba:	89 83       	std	Y+1, r24	; 0x01
 4bc:	0f c0       	rjmp	.+30     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4be:	86 e0       	ldi	r24, 0x06	; 6
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	9a 83       	std	Y+2, r25	; 0x02
 4c4:	89 83       	std	Y+1, r24	; 0x01
 4c6:	0a c0       	rjmp	.+20     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4c8:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <ball_row.1953>
 4cc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <CEILING>
 4d0:	98 13       	cpse	r25, r24
 4d2:	04 c0       	rjmp	.+8      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4d4:	87 e0       	ldi	r24, 0x07	; 7
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	9a 83       	std	Y+2, r25	; 0x02
 4da:	89 83       	std	Y+1, r24	; 0x01
 4dc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <ball_row.1953>
 4e0:	4a 2f       	mov	r20, r26
 4e2:	46 95       	lsr	r20
 4e4:	82 e0       	ldi	r24, 0x02	; 2
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	65 2f       	mov	r22, r21
 4ea:	70 e0       	ldi	r23, 0x00	; 0
 4ec:	60 95       	com	r22
 4ee:	70 95       	com	r23
 4f0:	fc 01       	movw	r30, r24
 4f2:	e0 59       	subi	r30, 0x90	; 144
 4f4:	fe 4f       	sbci	r31, 0xFE	; 254
 4f6:	20 81       	ld	r18, Z
 4f8:	24 23       	and	r18, r20
 4fa:	d9 f0       	breq	.+54     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 4fc:	fc 01       	movw	r30, r24
 4fe:	e6 57       	subi	r30, 0x76	; 118
 500:	fe 4f       	sbci	r31, 0xFE	; 254
 502:	20 81       	ld	r18, Z
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	26 23       	and	r18, r22
 508:	37 23       	and	r19, r23
 50a:	23 2b       	or	r18, r19
 50c:	91 f4       	brne	.+36     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 50e:	5b 13       	cpse	r21, r27
 510:	05 c0       	rjmp	.+10     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 512:	28 e0       	ldi	r18, 0x08	; 8
 514:	30 e0       	ldi	r19, 0x00	; 0
 516:	3a 83       	std	Y+2, r19	; 0x02
 518:	29 83       	std	Y+1, r18	; 0x01
 51a:	04 c0       	rjmp	.+8      	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
 51c:	27 e0       	ldi	r18, 0x07	; 7
 51e:	30 e0       	ldi	r19, 0x00	; 0
 520:	3a 83       	std	Y+2, r19	; 0x02
 522:	29 83       	std	Y+1, r18	; 0x01
 524:	e2 dd       	rcall	.-1084   	; 0xea <turn_off_LED.1958>
 526:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <SCORE>
 52a:	8f 5f       	subi	r24, 0xFF	; 255
 52c:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <SCORE>
 530:	22 c1       	rjmp	.+580    	; 0x776 <__LOCK_REGION_LENGTH__+0x376>
 532:	01 96       	adiw	r24, 0x01	; 1
 534:	8a 31       	cpi	r24, 0x1A	; 26
 536:	91 05       	cpc	r25, r1
 538:	d9 f6       	brne	.-74     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 53a:	10 91 08 01 	lds	r17, 0x0108	; 0x800108 <CEILING>
 53e:	f9 80       	ldd	r15, Y+1	; 0x01
 540:	0a 81       	ldd	r16, Y+2	; 0x02
 542:	65 2f       	mov	r22, r21
 544:	70 e0       	ldi	r23, 0x00	; 0
 546:	60 95       	com	r22
 548:	70 95       	com	r23
 54a:	66 0f       	add	r22, r22
 54c:	77 1f       	adc	r23, r23
 54e:	82 e0       	ldi	r24, 0x02	; 2
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	0f 2e       	mov	r0, r31
 554:	f6 e0       	ldi	r31, 0x06	; 6
 556:	df 2e       	mov	r13, r31
 558:	f0 2d       	mov	r31, r0
 55a:	e1 2c       	mov	r14, r1
 55c:	68 94       	set
 55e:	bb 24       	eor	r11, r11
 560:	b3 f8       	bld	r11, 3
 562:	c1 2c       	mov	r12, r1
 564:	a1 13       	cpse	r26, r17
 566:	03 c0       	rjmp	.+6      	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 568:	5b 13       	cpse	r21, r27
 56a:	03 c0       	rjmp	.+6      	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
 56c:	17 c0       	rjmp	.+46     	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 56e:	5b 17       	cp	r21, r27
 570:	c1 f0       	breq	.+48     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 572:	fc 01       	movw	r30, r24
 574:	e0 59       	subi	r30, 0x90	; 144
 576:	fe 4f       	sbci	r31, 0xFE	; 254
 578:	20 81       	ld	r18, Z
 57a:	24 23       	and	r18, r20
 57c:	a1 f0       	breq	.+40     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
 57e:	fc 01       	movw	r30, r24
 580:	e6 57       	subi	r30, 0x76	; 118
 582:	fe 4f       	sbci	r31, 0xFE	; 254
 584:	20 81       	ld	r18, Z
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	26 23       	and	r18, r22
 58a:	37 23       	and	r19, r23
 58c:	23 2b       	or	r18, r19
 58e:	59 f4       	brne	.+22     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
 590:	28 e0       	ldi	r18, 0x08	; 8
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	3a 83       	std	Y+2, r19	; 0x02
 596:	29 83       	std	Y+1, r18	; 0x01
 598:	a8 dd       	rcall	.-1200   	; 0xea <turn_off_LED.1958>
 59a:	ed c0       	rjmp	.+474    	; 0x776 <__LOCK_REGION_LENGTH__+0x376>
 59c:	fb 2c       	mov	r15, r11
 59e:	0c 2d       	mov	r16, r12
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
 5a2:	fd 2c       	mov	r15, r13
 5a4:	0e 2d       	mov	r16, r14
 5a6:	01 96       	adiw	r24, 0x01	; 1
 5a8:	8a 31       	cpi	r24, 0x1A	; 26
 5aa:	91 05       	cpc	r25, r1
 5ac:	d9 f6       	brne	.-74     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 5ae:	f9 82       	std	Y+1, r15	; 0x01
 5b0:	0a 83       	std	Y+2, r16	; 0x02
 5b2:	e1 c0       	rjmp	.+450    	; 0x776 <__LOCK_REGION_LENGTH__+0x376>
 5b4:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <ball_column.1954>
 5b8:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <RIGHT_WALL>
 5bc:	5b 13       	cpse	r21, r27
 5be:	10 c0       	rjmp	.+32     	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
 5c0:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <ball_row.1953>
 5c4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <CEILING>
 5c8:	98 13       	cpse	r25, r24
 5ca:	05 c0       	rjmp	.+10     	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 5cc:	87 e0       	ldi	r24, 0x07	; 7
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	9a 83       	std	Y+2, r25	; 0x02
 5d2:	89 83       	std	Y+1, r24	; 0x01
 5d4:	0f c0       	rjmp	.+30     	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 5d6:	85 e0       	ldi	r24, 0x05	; 5
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	9a 83       	std	Y+2, r25	; 0x02
 5dc:	89 83       	std	Y+1, r24	; 0x01
 5de:	0a c0       	rjmp	.+20     	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 5e0:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <ball_row.1953>
 5e4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <CEILING>
 5e8:	98 13       	cpse	r25, r24
 5ea:	04 c0       	rjmp	.+8      	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
 5ec:	88 e0       	ldi	r24, 0x08	; 8
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	9a 83       	std	Y+2, r25	; 0x02
 5f2:	89 83       	std	Y+1, r24	; 0x01
 5f4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <ball_row.1953>
 5f8:	4a 2f       	mov	r20, r26
 5fa:	46 95       	lsr	r20
 5fc:	82 e0       	ldi	r24, 0x02	; 2
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	65 2f       	mov	r22, r21
 602:	70 e0       	ldi	r23, 0x00	; 0
 604:	60 95       	com	r22
 606:	70 95       	com	r23
 608:	fc 01       	movw	r30, r24
 60a:	e0 59       	subi	r30, 0x90	; 144
 60c:	fe 4f       	sbci	r31, 0xFE	; 254
 60e:	20 81       	ld	r18, Z
 610:	24 23       	and	r18, r20
 612:	d9 f0       	breq	.+54     	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
 614:	fc 01       	movw	r30, r24
 616:	e6 57       	subi	r30, 0x76	; 118
 618:	fe 4f       	sbci	r31, 0xFE	; 254
 61a:	20 81       	ld	r18, Z
 61c:	30 e0       	ldi	r19, 0x00	; 0
 61e:	26 23       	and	r18, r22
 620:	37 23       	and	r19, r23
 622:	23 2b       	or	r18, r19
 624:	91 f4       	brne	.+36     	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
 626:	5b 13       	cpse	r21, r27
 628:	05 c0       	rjmp	.+10     	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
 62a:	27 e0       	ldi	r18, 0x07	; 7
 62c:	30 e0       	ldi	r19, 0x00	; 0
 62e:	3a 83       	std	Y+2, r19	; 0x02
 630:	29 83       	std	Y+1, r18	; 0x01
 632:	04 c0       	rjmp	.+8      	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
 634:	28 e0       	ldi	r18, 0x08	; 8
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	3a 83       	std	Y+2, r19	; 0x02
 63a:	29 83       	std	Y+1, r18	; 0x01
 63c:	56 dd       	rcall	.-1364   	; 0xea <turn_off_LED.1958>
 63e:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <SCORE>
 642:	8f 5f       	subi	r24, 0xFF	; 255
 644:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <SCORE>
 648:	96 c0       	rjmp	.+300    	; 0x776 <__LOCK_REGION_LENGTH__+0x376>
 64a:	01 96       	adiw	r24, 0x01	; 1
 64c:	8a 31       	cpi	r24, 0x1A	; 26
 64e:	91 05       	cpc	r25, r1
 650:	d9 f6       	brne	.-74     	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
 652:	10 91 08 01 	lds	r17, 0x0108	; 0x800108 <CEILING>
 656:	f9 80       	ldd	r15, Y+1	; 0x01
 658:	0a 81       	ldd	r16, Y+2	; 0x02
 65a:	65 2f       	mov	r22, r21
 65c:	66 95       	lsr	r22
 65e:	60 68       	ori	r22, 0x80	; 128
 660:	70 e0       	ldi	r23, 0x00	; 0
 662:	60 95       	com	r22
 664:	70 95       	com	r23
 666:	82 e0       	ldi	r24, 0x02	; 2
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	0f 2e       	mov	r0, r31
 66c:	f5 e0       	ldi	r31, 0x05	; 5
 66e:	df 2e       	mov	r13, r31
 670:	f0 2d       	mov	r31, r0
 672:	e1 2c       	mov	r14, r1
 674:	0f 2e       	mov	r0, r31
 676:	f7 e0       	ldi	r31, 0x07	; 7
 678:	bf 2e       	mov	r11, r31
 67a:	f0 2d       	mov	r31, r0
 67c:	c1 2c       	mov	r12, r1
 67e:	a1 13       	cpse	r26, r17
 680:	03 c0       	rjmp	.+6      	; 0x688 <__LOCK_REGION_LENGTH__+0x288>
 682:	5b 13       	cpse	r21, r27
 684:	03 c0       	rjmp	.+6      	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
 686:	1c c0       	rjmp	.+56     	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
 688:	5b 17       	cp	r21, r27
 68a:	e9 f0       	breq	.+58     	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
 68c:	fc 01       	movw	r30, r24
 68e:	e0 59       	subi	r30, 0x90	; 144
 690:	fe 4f       	sbci	r31, 0xFE	; 254
 692:	20 81       	ld	r18, Z
 694:	24 23       	and	r18, r20
 696:	c9 f0       	breq	.+50     	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
 698:	fc 01       	movw	r30, r24
 69a:	e6 57       	subi	r30, 0x76	; 118
 69c:	fe 4f       	sbci	r31, 0xFE	; 254
 69e:	20 81       	ld	r18, Z
 6a0:	30 e0       	ldi	r19, 0x00	; 0
 6a2:	26 23       	and	r18, r22
 6a4:	37 23       	and	r19, r23
 6a6:	23 2b       	or	r18, r19
 6a8:	81 f4       	brne	.+32     	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
 6aa:	27 e0       	ldi	r18, 0x07	; 7
 6ac:	30 e0       	ldi	r19, 0x00	; 0
 6ae:	3a 83       	std	Y+2, r19	; 0x02
 6b0:	29 83       	std	Y+1, r18	; 0x01
 6b2:	1b dd       	rcall	.-1482   	; 0xea <turn_off_LED.1958>
 6b4:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <SCORE>
 6b8:	8f 5f       	subi	r24, 0xFF	; 255
 6ba:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <SCORE>
 6be:	5b c0       	rjmp	.+182    	; 0x776 <__LOCK_REGION_LENGTH__+0x376>
 6c0:	fb 2c       	mov	r15, r11
 6c2:	0c 2d       	mov	r16, r12
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
 6c6:	fd 2c       	mov	r15, r13
 6c8:	0e 2d       	mov	r16, r14
 6ca:	01 96       	adiw	r24, 0x01	; 1
 6cc:	8a 31       	cpi	r24, 0x1A	; 26
 6ce:	91 05       	cpc	r25, r1
 6d0:	b1 f6       	brne	.-84     	; 0x67e <__LOCK_REGION_LENGTH__+0x27e>
 6d2:	f9 82       	std	Y+1, r15	; 0x01
 6d4:	0a 83       	std	Y+2, r16	; 0x02
 6d6:	4f c0       	rjmp	.+158    	; 0x776 <__LOCK_REGION_LENGTH__+0x376>
 6d8:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <ball_row.1953>
 6dc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <FLOOR>
 6e0:	98 17       	cp	r25, r24
 6e2:	59 f0       	breq	.+22     	; 0x6fa <__LOCK_REGION_LENGTH__+0x2fa>
 6e4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <ball_column.1954>
 6e8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <LEFT_WALL>
 6ec:	98 13       	cpse	r25, r24
 6ee:	14 c0       	rjmp	.+40     	; 0x718 <__LOCK_REGION_LENGTH__+0x318>
 6f0:	88 e0       	ldi	r24, 0x08	; 8
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	9a 83       	std	Y+2, r25	; 0x02
 6f6:	89 83       	std	Y+1, r24	; 0x01
 6f8:	0f c0       	rjmp	.+30     	; 0x718 <__LOCK_REGION_LENGTH__+0x318>
 6fa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <ball_column.1954>
 6fe:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <LEFT_WALL>
 702:	98 13       	cpse	r25, r24
 704:	05 c0       	rjmp	.+10     	; 0x710 <__LOCK_REGION_LENGTH__+0x310>
 706:	86 e0       	ldi	r24, 0x06	; 6
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	9a 83       	std	Y+2, r25	; 0x02
 70c:	89 83       	std	Y+1, r24	; 0x01
 70e:	04 c0       	rjmp	.+8      	; 0x718 <__LOCK_REGION_LENGTH__+0x318>
 710:	85 e0       	ldi	r24, 0x05	; 5
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	9a 83       	std	Y+2, r25	; 0x02
 716:	89 83       	std	Y+1, r24	; 0x01
 718:	ce 01       	movw	r24, r28
 71a:	01 96       	adiw	r24, 0x01	; 1
 71c:	1c 01       	movw	r2, r24
 71e:	f1 dc       	rcall	.-1566   	; 0x102 <paddle_collision_detection.1960>
 720:	2a c0       	rjmp	.+84     	; 0x776 <__LOCK_REGION_LENGTH__+0x376>
 722:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <ball_row.1953>
 726:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <FLOOR>
 72a:	98 13       	cpse	r25, r24
 72c:	10 c0       	rjmp	.+32     	; 0x74e <__LOCK_REGION_LENGTH__+0x34e>
 72e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <ball_column.1954>
 732:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <RIGHT_WALL>
 736:	98 13       	cpse	r25, r24
 738:	05 c0       	rjmp	.+10     	; 0x744 <__LOCK_REGION_LENGTH__+0x344>
 73a:	85 e0       	ldi	r24, 0x05	; 5
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	9a 83       	std	Y+2, r25	; 0x02
 740:	89 83       	std	Y+1, r24	; 0x01
 742:	0f c0       	rjmp	.+30     	; 0x762 <__LOCK_REGION_LENGTH__+0x362>
 744:	86 e0       	ldi	r24, 0x06	; 6
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	9a 83       	std	Y+2, r25	; 0x02
 74a:	89 83       	std	Y+1, r24	; 0x01
 74c:	0a c0       	rjmp	.+20     	; 0x762 <__LOCK_REGION_LENGTH__+0x362>
 74e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <ball_column.1954>
 752:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <RIGHT_WALL>
 756:	98 13       	cpse	r25, r24
 758:	04 c0       	rjmp	.+8      	; 0x762 <__LOCK_REGION_LENGTH__+0x362>
 75a:	87 e0       	ldi	r24, 0x07	; 7
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	9a 83       	std	Y+2, r25	; 0x02
 760:	89 83       	std	Y+1, r24	; 0x01
 762:	ce 01       	movw	r24, r28
 764:	01 96       	adiw	r24, 0x01	; 1
 766:	1c 01       	movw	r2, r24
 768:	cc dc       	rcall	.-1640   	; 0x102 <paddle_collision_detection.1960>
 76a:	05 c0       	rjmp	.+10     	; 0x776 <__LOCK_REGION_LENGTH__+0x376>
 76c:	81 e0       	ldi	r24, 0x01	; 1
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	9a 83       	std	Y+2, r25	; 0x02
 772:	89 83       	std	Y+1, r24	; 0x01
 774:	5d c0       	rjmp	.+186    	; 0x830 <__LOCK_REGION_LENGTH__+0x430>
 776:	89 81       	ldd	r24, Y+1	; 0x01
 778:	9a 81       	ldd	r25, Y+2	; 0x02
 77a:	fc 01       	movw	r30, r24
 77c:	31 97       	sbiw	r30, 0x01	; 1
 77e:	e8 30       	cpi	r30, 0x08	; 8
 780:	f1 05       	cpc	r31, r1
 782:	08 f0       	brcs	.+2      	; 0x786 <__LOCK_REGION_LENGTH__+0x386>
 784:	49 c0       	rjmp	.+146    	; 0x818 <__LOCK_REGION_LENGTH__+0x418>
 786:	e1 5b       	subi	r30, 0xB1	; 177
 788:	ff 4f       	sbci	r31, 0xFF	; 255
 78a:	e6 c2       	rjmp	.+1484   	; 0xd58 <__tablejump2__>
 78c:	20 e4       	ldi	r18, 0x40	; 64
 78e:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <ball_row.1953>
 792:	2b ef       	ldi	r18, 0xFB	; 251
 794:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <ball_column.1954>
 798:	3f c0       	rjmp	.+126    	; 0x818 <__LOCK_REGION_LENGTH__+0x418>
 79a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <ball_row.1953>
 79e:	26 95       	lsr	r18
 7a0:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <ball_row.1953>
 7a4:	39 c0       	rjmp	.+114    	; 0x818 <__LOCK_REGION_LENGTH__+0x418>
 7a6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ball_row.1953>
 7aa:	88 0f       	add	r24, r24
 7ac:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ball_row.1953>
 7b0:	84 e0       	ldi	r24, 0x04	; 4
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	31 c0       	rjmp	.+98     	; 0x818 <__LOCK_REGION_LENGTH__+0x418>
 7b6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ball_row.1953>
 7ba:	86 95       	lsr	r24
 7bc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ball_row.1953>
 7c0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_column.1954>
 7c4:	88 0f       	add	r24, r24
 7c6:	81 60       	ori	r24, 0x01	; 1
 7c8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ball_column.1954>
 7cc:	85 e0       	ldi	r24, 0x05	; 5
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	23 c0       	rjmp	.+70     	; 0x818 <__LOCK_REGION_LENGTH__+0x418>
 7d2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <ball_row.1953>
 7d6:	22 0f       	add	r18, r18
 7d8:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <ball_row.1953>
 7dc:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <ball_column.1954>
 7e0:	22 0f       	add	r18, r18
 7e2:	21 60       	ori	r18, 0x01	; 1
 7e4:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <ball_column.1954>
 7e8:	17 c0       	rjmp	.+46     	; 0x818 <__LOCK_REGION_LENGTH__+0x418>
 7ea:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <ball_row.1953>
 7ee:	26 95       	lsr	r18
 7f0:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <ball_row.1953>
 7f4:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <ball_column.1954>
 7f8:	26 95       	lsr	r18
 7fa:	20 68       	ori	r18, 0x80	; 128
 7fc:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <ball_column.1954>
 800:	0b c0       	rjmp	.+22     	; 0x818 <__LOCK_REGION_LENGTH__+0x418>
 802:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <ball_row.1953>
 806:	22 0f       	add	r18, r18
 808:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <ball_row.1953>
 80c:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <ball_column.1954>
 810:	26 95       	lsr	r18
 812:	20 68       	ori	r18, 0x80	; 128
 814:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <ball_column.1954>
 818:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <ball_row.1953>
 81c:	20 93 71 01 	sts	0x0171, r18	; 0x800171 <DISPLAY_PORTA+0x1>
 820:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <ball_column.1954>
 824:	20 93 8b 01 	sts	0x018B, r18	; 0x80018b <DISPLAY_PORTB+0x1>
 828:	06 c0       	rjmp	.+12     	; 0x836 <__LOCK_REGION_LENGTH__+0x436>
 82a:	89 81       	ldd	r24, Y+1	; 0x01
 82c:	9a 81       	ldd	r25, Y+2	; 0x02
 82e:	f4 cf       	rjmp	.-24     	; 0x818 <__LOCK_REGION_LENGTH__+0x418>
 830:	89 81       	ldd	r24, Y+1	; 0x01
 832:	9a 81       	ldd	r25, Y+2	; 0x02
 834:	ab cf       	rjmp	.-170    	; 0x78c <__LOCK_REGION_LENGTH__+0x38c>
 836:	0f 90       	pop	r0
 838:	0f 90       	pop	r0
 83a:	df 91       	pop	r29
 83c:	cf 91       	pop	r28
 83e:	1f 91       	pop	r17
 840:	0f 91       	pop	r16
 842:	ff 90       	pop	r15
 844:	ef 90       	pop	r14
 846:	df 90       	pop	r13
 848:	cf 90       	pop	r12
 84a:	bf 90       	pop	r11
 84c:	3f 90       	pop	r3
 84e:	2f 90       	pop	r2
 850:	08 95       	ret

00000852 <Brick_Tick>:
 852:	af 92       	push	r10
 854:	bf 92       	push	r11
 856:	df 92       	push	r13
 858:	ef 92       	push	r14
 85a:	ff 92       	push	r15
 85c:	0f 93       	push	r16
 85e:	1f 93       	push	r17
 860:	cf 93       	push	r28
 862:	df 93       	push	r29
 864:	ec 01       	movw	r28, r24
 866:	30 dd       	rcall	.-1440   	; 0x2c8 <GetNESControllerButton>
 868:	c2 30       	cpi	r28, 0x02	; 2
 86a:	d1 05       	cpc	r29, r1
 86c:	39 f0       	breq	.+14     	; 0x87c <Brick_Tick+0x2a>
 86e:	c3 30       	cpi	r28, 0x03	; 3
 870:	d1 05       	cpc	r29, r1
 872:	09 f4       	brne	.+2      	; 0x876 <Brick_Tick+0x24>
 874:	87 c0       	rjmp	.+270    	; 0x984 <Brick_Tick+0x132>
 876:	21 97       	sbiw	r28, 0x01	; 1
 878:	29 f4       	brne	.+10     	; 0x884 <Brick_Tick+0x32>
 87a:	7f c0       	rjmp	.+254    	; 0x97a <Brick_Tick+0x128>
 87c:	88 30       	cpi	r24, 0x08	; 8
 87e:	09 f0       	breq	.+2      	; 0x882 <Brick_Tick+0x30>
 880:	81 c0       	rjmp	.+258    	; 0x984 <Brick_Tick+0x132>
 882:	7e c0       	rjmp	.+252    	; 0x980 <Brick_Tick+0x12e>
 884:	40 ef       	ldi	r20, 0xF0	; 240
 886:	5f ef       	ldi	r21, 0xFF	; 255
 888:	28 ef       	ldi	r18, 0xF8	; 248
 88a:	3f ef       	ldi	r19, 0xFF	; 255
 88c:	82 e0       	ldi	r24, 0x02	; 2
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	68 94       	set
 892:	dd 24       	eor	r13, r13
 894:	d2 f8       	bld	r13, 2
 896:	0a e1       	ldi	r16, 0x1A	; 26
 898:	10 e0       	ldi	r17, 0x00	; 0
 89a:	cf ef       	ldi	r28, 0xFF	; 255
 89c:	d0 e0       	ldi	r29, 0x00	; 0
 89e:	af e7       	ldi	r26, 0x7F	; 127
 8a0:	b0 e0       	ldi	r27, 0x00	; 0
 8a2:	68 94       	set
 8a4:	ee 24       	eor	r14, r14
 8a6:	e1 f8       	bld	r14, 1
 8a8:	ff 24       	eor	r15, r15
 8aa:	f3 94       	inc	r15
 8ac:	8a 30       	cpi	r24, 0x0A	; 10
 8ae:	91 05       	cpc	r25, r1
 8b0:	f4 f4       	brge	.+60     	; 0x8ee <Brick_Tick+0x9c>
 8b2:	fc 01       	movw	r30, r24
 8b4:	e0 59       	subi	r30, 0x90	; 144
 8b6:	fe 4f       	sbci	r31, 0xFE	; 254
 8b8:	f0 82       	st	Z, r15
 8ba:	bc 01       	movw	r22, r24
 8bc:	62 50       	subi	r22, 0x02	; 2
 8be:	71 09       	sbc	r23, r1
 8c0:	fd 01       	movw	r30, r26
 8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <Brick_Tick+0x76>
 8c4:	f5 95       	asr	r31
 8c6:	e7 95       	ror	r30
 8c8:	6a 95       	dec	r22
 8ca:	e2 f7       	brpl	.-8      	; 0x8c4 <Brick_Tick+0x72>
 8cc:	66 27       	eor	r22, r22
 8ce:	77 27       	eor	r23, r23
 8d0:	62 1b       	sub	r22, r18
 8d2:	73 0b       	sbc	r23, r19
 8d4:	5e 01       	movw	r10, r28
 8d6:	02 c0       	rjmp	.+4      	; 0x8dc <Brick_Tick+0x8a>
 8d8:	aa 0c       	add	r10, r10
 8da:	bb 1c       	adc	r11, r11
 8dc:	6a 95       	dec	r22
 8de:	e2 f7       	brpl	.-8      	; 0x8d8 <Brick_Tick+0x86>
 8e0:	b5 01       	movw	r22, r10
 8e2:	6e 2b       	or	r22, r30
 8e4:	fc 01       	movw	r30, r24
 8e6:	e6 57       	subi	r30, 0x76	; 118
 8e8:	fe 4f       	sbci	r31, 0xFE	; 254
 8ea:	60 83       	st	Z, r22
 8ec:	3a c0       	rjmp	.+116    	; 0x962 <Brick_Tick+0x110>
 8ee:	28 30       	cpi	r18, 0x08	; 8
 8f0:	31 05       	cpc	r19, r1
 8f2:	d8 f4       	brcc	.+54     	; 0x92a <Brick_Tick+0xd8>
 8f4:	fc 01       	movw	r30, r24
 8f6:	e0 59       	subi	r30, 0x90	; 144
 8f8:	fe 4f       	sbci	r31, 0xFE	; 254
 8fa:	e0 82       	st	Z, r14
 8fc:	66 27       	eor	r22, r22
 8fe:	77 27       	eor	r23, r23
 900:	64 1b       	sub	r22, r20
 902:	75 0b       	sbc	r23, r21
 904:	fe 01       	movw	r30, r28
 906:	02 c0       	rjmp	.+4      	; 0x90c <Brick_Tick+0xba>
 908:	ee 0f       	add	r30, r30
 90a:	ff 1f       	adc	r31, r31
 90c:	6a 95       	dec	r22
 90e:	e2 f7       	brpl	.-8      	; 0x908 <Brick_Tick+0xb6>
 910:	bd 01       	movw	r22, r26
 912:	02 2e       	mov	r0, r18
 914:	02 c0       	rjmp	.+4      	; 0x91a <Brick_Tick+0xc8>
 916:	75 95       	asr	r23
 918:	67 95       	ror	r22
 91a:	0a 94       	dec	r0
 91c:	e2 f7       	brpl	.-8      	; 0x916 <Brick_Tick+0xc4>
 91e:	6e 2b       	or	r22, r30
 920:	fc 01       	movw	r30, r24
 922:	e6 57       	subi	r30, 0x76	; 118
 924:	fe 4f       	sbci	r31, 0xFE	; 254
 926:	60 83       	st	Z, r22
 928:	1c c0       	rjmp	.+56     	; 0x962 <Brick_Tick+0x110>
 92a:	48 30       	cpi	r20, 0x08	; 8
 92c:	51 05       	cpc	r21, r1
 92e:	c8 f4       	brcc	.+50     	; 0x962 <Brick_Tick+0x110>
 930:	fc 01       	movw	r30, r24
 932:	e0 59       	subi	r30, 0x90	; 144
 934:	fe 4f       	sbci	r31, 0xFE	; 254
 936:	d0 82       	st	Z, r13
 938:	b8 01       	movw	r22, r16
 93a:	68 1b       	sub	r22, r24
 93c:	79 0b       	sbc	r23, r25
 93e:	fe 01       	movw	r30, r28
 940:	02 c0       	rjmp	.+4      	; 0x946 <Brick_Tick+0xf4>
 942:	ee 0f       	add	r30, r30
 944:	ff 1f       	adc	r31, r31
 946:	6a 95       	dec	r22
 948:	e2 f7       	brpl	.-8      	; 0x942 <Brick_Tick+0xf0>
 94a:	bd 01       	movw	r22, r26
 94c:	04 2e       	mov	r0, r20
 94e:	02 c0       	rjmp	.+4      	; 0x954 <Brick_Tick+0x102>
 950:	75 95       	asr	r23
 952:	67 95       	ror	r22
 954:	0a 94       	dec	r0
 956:	e2 f7       	brpl	.-8      	; 0x950 <Brick_Tick+0xfe>
 958:	6e 2b       	or	r22, r30
 95a:	fc 01       	movw	r30, r24
 95c:	e6 57       	subi	r30, 0x76	; 118
 95e:	fe 4f       	sbci	r31, 0xFE	; 254
 960:	60 83       	st	Z, r22
 962:	01 96       	adiw	r24, 0x01	; 1
 964:	2f 5f       	subi	r18, 0xFF	; 255
 966:	3f 4f       	sbci	r19, 0xFF	; 255
 968:	4f 5f       	subi	r20, 0xFF	; 255
 96a:	5f 4f       	sbci	r21, 0xFF	; 255
 96c:	8a 31       	cpi	r24, 0x1A	; 26
 96e:	91 05       	cpc	r25, r1
 970:	09 f0       	breq	.+2      	; 0x974 <Brick_Tick+0x122>
 972:	9c cf       	rjmp	.-200    	; 0x8ac <Brick_Tick+0x5a>
 974:	c1 e0       	ldi	r28, 0x01	; 1
 976:	d0 e0       	ldi	r29, 0x00	; 0
 978:	05 c0       	rjmp	.+10     	; 0x984 <Brick_Tick+0x132>
 97a:	c2 e0       	ldi	r28, 0x02	; 2
 97c:	d0 e0       	ldi	r29, 0x00	; 0
 97e:	02 c0       	rjmp	.+4      	; 0x984 <Brick_Tick+0x132>
 980:	c3 e0       	ldi	r28, 0x03	; 3
 982:	d0 e0       	ldi	r29, 0x00	; 0
 984:	ce 01       	movw	r24, r28
 986:	df 91       	pop	r29
 988:	cf 91       	pop	r28
 98a:	1f 91       	pop	r17
 98c:	0f 91       	pop	r16
 98e:	ff 90       	pop	r15
 990:	ef 90       	pop	r14
 992:	df 90       	pop	r13
 994:	bf 90       	pop	r11
 996:	af 90       	pop	r10
 998:	08 95       	ret

0000099a <TimerSet>:
 99a:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <_avr_timer_M>
 99e:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <_avr_timer_M+0x1>
 9a2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_avr_timer_M+0x2>
 9a6:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <_avr_timer_M+0x3>
 9aa:	60 93 2e 01 	sts	0x012E, r22	; 0x80012e <_avr_timer_cntcurr>
 9ae:	70 93 2f 01 	sts	0x012F, r23	; 0x80012f <_avr_timer_cntcurr+0x1>
 9b2:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <_avr_timer_cntcurr+0x2>
 9b6:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <_avr_timer_cntcurr+0x3>
 9ba:	08 95       	ret

000009bc <TimerOn>:
 9bc:	8b e0       	ldi	r24, 0x0B	; 11
 9be:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 9c2:	8d e7       	ldi	r24, 0x7D	; 125
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 9ca:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 9ce:	82 e0       	ldi	r24, 0x02	; 2
 9d0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 9d4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 9d8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 9dc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_avr_timer_M>
 9e0:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_avr_timer_M+0x1>
 9e4:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <_avr_timer_M+0x2>
 9e8:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <_avr_timer_M+0x3>
 9ec:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <_avr_timer_cntcurr>
 9f0:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <_avr_timer_cntcurr+0x1>
 9f4:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <_avr_timer_cntcurr+0x2>
 9f8:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <_avr_timer_cntcurr+0x3>
 9fc:	8f b7       	in	r24, 0x3f	; 63
 9fe:	80 68       	ori	r24, 0x80	; 128
 a00:	8f bf       	out	0x3f, r24	; 63
 a02:	08 95       	ret

00000a04 <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 a04:	18 16       	cp	r1, r24
 a06:	19 06       	cpc	r1, r25
 a08:	5c f0       	brlt	.+22     	; 0xa20 <delay_ms+0x1c>
 a0a:	08 95       	ret
    for(j=0;j<775;j++)
  {
   asm("nop");
 a0c:	00 00       	nop
 a0e:	21 50       	subi	r18, 0x01	; 1
 a10:	31 09       	sbc	r19, r1
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
 a12:	e1 f7       	brne	.-8      	; 0xa0c <delay_ms+0x8>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 a14:	4f 5f       	subi	r20, 0xFF	; 255
 a16:	5f 4f       	sbci	r21, 0xFF	; 255
 a18:	84 17       	cp	r24, r20
 a1a:	95 07       	cpc	r25, r21
 a1c:	19 f4       	brne	.+6      	; 0xa24 <delay_ms+0x20>
 a1e:	08 95       	ret
 a20:	40 e0       	ldi	r20, 0x00	; 0
 a22:	50 e0       	ldi	r21, 0x00	; 0
   }
}

void delay_ms(int miliSec) //for 8 Mhz crystal

{
 a24:	27 e0       	ldi	r18, 0x07	; 7
 a26:	33 e0       	ldi	r19, 0x03	; 3
 a28:	f1 cf       	rjmp	.-30     	; 0xa0c <delay_ms+0x8>

00000a2a <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);						 
}

void LCD_WriteCommand (unsigned char Command) {
   CLR_BIT(CONTROL_BUS,RS);
 a2a:	46 98       	cbi	0x08, 6	; 8
   DATA_BUS = Command;
 a2c:	8b b9       	out	0x0b, r24	; 11
   SET_BIT(CONTROL_BUS,E);
 a2e:	47 9a       	sbi	0x08, 7	; 8
   asm("nop");
 a30:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 a32:	47 98       	cbi	0x08, 7	; 8
   delay_ms(2); // ClearScreen requires 1.52ms to execute
 a34:	82 e0       	ldi	r24, 0x02	; 2
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	e5 cf       	rjmp	.-54     	; 0xa04 <delay_ms>
 a3a:	08 95       	ret

00000a3c <LCD_ClearScreen>:
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
 a3c:	81 e0       	ldi	r24, 0x01	; 1
 a3e:	f5 cf       	rjmp	.-22     	; 0xa2a <LCD_WriteCommand>
 a40:	08 95       	ret

00000a42 <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
 a42:	81 31       	cpi	r24, 0x11	; 17
 a44:	18 f4       	brcc	.+6      	; 0xa4c <LCD_Cursor+0xa>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 a46:	81 58       	subi	r24, 0x81	; 129
 a48:	f0 cf       	rjmp	.-32     	; 0xa2a <LCD_WriteCommand>
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 a4a:	08 95       	ret
 a4c:	81 55       	subi	r24, 0x51	; 81
 a4e:	ed cf       	rjmp	.-38     	; 0xa2a <LCD_WriteCommand>
 a50:	08 95       	ret

00000a52 <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 a52:	84 e6       	ldi	r24, 0x64	; 100
 a54:	90 e0       	ldi	r25, 0x00	; 0
	LCD_WriteCommand(0x38);
 a56:	d6 df       	rcall	.-84     	; 0xa04 <delay_ms>
	LCD_WriteCommand(0x06);
 a58:	88 e3       	ldi	r24, 0x38	; 56
	LCD_WriteCommand(0x0f);
 a5a:	e7 df       	rcall	.-50     	; 0xa2a <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 a5c:	86 e0       	ldi	r24, 0x06	; 6
 a5e:	e5 df       	rcall	.-54     	; 0xa2a <LCD_WriteCommand>
	delay_ms(10);						 
 a60:	8f e0       	ldi	r24, 0x0F	; 15
 a62:	e3 df       	rcall	.-58     	; 0xa2a <LCD_WriteCommand>
 a64:	81 e0       	ldi	r24, 0x01	; 1
 a66:	e1 df       	rcall	.-62     	; 0xa2a <LCD_WriteCommand>
 a68:	8a e0       	ldi	r24, 0x0A	; 10
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	cb cf       	rjmp	.-106    	; 0xa04 <delay_ms>
 a6e:	08 95       	ret

00000a70 <LCD_WriteData>:
   CLR_BIT(CONTROL_BUS,E);
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
 a70:	46 9a       	sbi	0x08, 6	; 8
   DATA_BUS = Data;
 a72:	8b b9       	out	0x0b, r24	; 11
   SET_BIT(CONTROL_BUS,E);
 a74:	47 9a       	sbi	0x08, 7	; 8
   asm("nop");
 a76:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 a78:	47 98       	cbi	0x08, 7	; 8
   delay_ms(1);
 a7a:	81 e0       	ldi	r24, 0x01	; 1
 a7c:	90 e0       	ldi	r25, 0x00	; 0
 a7e:	c2 cf       	rjmp	.-124    	; 0xa04 <delay_ms>
 a80:	08 95       	ret

00000a82 <LCD_DisplayString>:
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 a82:	0f 93       	push	r16
 a84:	1f 93       	push	r17
 a86:	cf 93       	push	r28
 a88:	df 93       	push	r29
 a8a:	18 2f       	mov	r17, r24
   LCD_ClearScreen();
 a8c:	eb 01       	movw	r28, r22
   unsigned char c = column;
   while(*string) {
 a8e:	d6 df       	rcall	.-84     	; 0xa3c <LCD_ClearScreen>
 a90:	88 81       	ld	r24, Y
 a92:	88 23       	and	r24, r24
      LCD_Cursor(c++);
 a94:	51 f0       	breq	.+20     	; 0xaaa <LCD_DisplayString+0x28>
 a96:	01 e0       	ldi	r16, 0x01	; 1
 a98:	01 0f       	add	r16, r17
      LCD_WriteData(*string++);
 a9a:	81 2f       	mov	r24, r17
 a9c:	d2 df       	rcall	.-92     	; 0xa42 <LCD_Cursor>
 a9e:	89 91       	ld	r24, Y+

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
 aa0:	e7 df       	rcall	.-50     	; 0xa70 <LCD_WriteData>
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 aa2:	10 2f       	mov	r17, r16
 aa4:	88 81       	ld	r24, Y
 aa6:	81 11       	cpse	r24, r1
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 aa8:	f6 cf       	rjmp	.-20     	; 0xa96 <LCD_DisplayString+0x14>
 aaa:	df 91       	pop	r29
 aac:	cf 91       	pop	r28
 aae:	1f 91       	pop	r17
 ab0:	0f 91       	pop	r16
 ab2:	08 95       	ret

00000ab4 <LCD_OUTPUT_Tick>:

// ====================
// LCD_OUTPUT_TICK:OUTPUT TO LED matrix
// ====================
enum LCD_O_States {LCD_O_START, LCD_O_INIT, LCD_O_DISPLAY_SCORE};
int LCD_OUTPUT_Tick(int state) {
 ab4:	cf 93       	push	r28
	unsigned static char SCORE_HUNDREDS_PLACE = 0x00;
	unsigned static char SCORE_TENS_PLACE = 0x00;
	unsigned static char SCORE_ONES_PLACE = 0x00;
	unsigned static char count = 0x01;
	// === Transitions ===
	switch (state) {
 ab6:	01 97       	sbiw	r24, 0x01	; 1
 ab8:	02 97       	sbiw	r24, 0x02	; 2
	{
		case LCD_O_START:
		break;
		
		case LCD_O_INIT:
			LCD_ClearScreen();
 aba:	20 f0       	brcs	.+8      	; 0xac4 <LCD_OUTPUT_Tick+0x10>
	unsigned static char SCORE_ONES_PLACE = 0x00;
	unsigned static char count = 0x01;
	// === Transitions ===
	switch (state) {
		case LCD_O_START:
			state = LCD_O_INIT;
 abc:	bf df       	rcall	.-130    	; 0xa3c <LCD_ClearScreen>
 abe:	81 e0       	ldi	r24, 0x01	; 1
		case LCD_O_START:
		break;
		
		case LCD_O_INIT:
			LCD_ClearScreen();
		break;
 ac0:	90 e0       	ldi	r25, 0x00	; 0

		case LCD_O_DISPLAY_SCORE:
			// Express SCORE by factors of 10
			if (SCORE != PREV_SCORE)
 ac2:	42 c0       	rjmp	.+132    	; 0xb48 <LCD_OUTPUT_Tick+0x94>
 ac4:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <SCORE>
 ac8:	88 23       	and	r24, r24
 aca:	09 f4       	brne	.+2      	; 0xace <LCD_OUTPUT_Tick+0x1a>
			{
					count++;
 acc:	3b c0       	rjmp	.+118    	; 0xb44 <LCD_OUTPUT_Tick+0x90>
 ace:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 ad2:	8f 5f       	subi	r24, 0xFF	; 255
 ad4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					if (SCORE_TENS_PLACE == 0x0A)
 ad8:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <SCORE_TENS_PLACE.2063>
 adc:	8a 30       	cpi	r24, 0x0A	; 10
					{
						SCORE_HUNDREDS_PLACE++;
 ade:	39 f4       	brne	.+14     	; 0xaee <LCD_OUTPUT_Tick+0x3a>
 ae0:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <SCORE_HUNDREDS_PLACE.2062>
 ae4:	8f 5f       	subi	r24, 0xFF	; 255
 ae6:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <SCORE_HUNDREDS_PLACE.2062>
						SCORE_TENS_PLACE = 0;
 aea:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <SCORE_TENS_PLACE.2063>
					}
					if (SCORE_ONES_PLACE == 0x0A)
 aee:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
 af2:	8a 30       	cpi	r24, 0x0A	; 10
					{
						SCORE_TENS_PLACE++;
 af4:	39 f4       	brne	.+14     	; 0xb04 <LCD_OUTPUT_Tick+0x50>
 af6:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <SCORE_TENS_PLACE.2063>
 afa:	8f 5f       	subi	r24, 0xFF	; 255
 afc:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <SCORE_TENS_PLACE.2063>
						SCORE_ONES_PLACE = 0;
 b00:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__data_end>
					}
					SCORE_ONES_PLACE++;
 b04:	c0 91 28 01 	lds	r28, 0x0128	; 0x800128 <__data_end>
 b08:	81 e0       	ldi	r24, 0x01	; 1
 b0a:	8c 0f       	add	r24, r28
				LCD_Cursor(0x01);
 b0c:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
				LCD_DisplayString(1, "SCORE: ");
 b10:	81 e0       	ldi	r24, 0x01	; 1
 b12:	97 df       	rcall	.-210    	; 0xa42 <LCD_Cursor>
 b14:	6e e0       	ldi	r22, 0x0E	; 14
				LCD_WriteData('0' + SCORE_HUNDREDS_PLACE);
 b16:	71 e0       	ldi	r23, 0x01	; 1
 b18:	81 e0       	ldi	r24, 0x01	; 1
 b1a:	b3 df       	rcall	.-154    	; 0xa82 <LCD_DisplayString>
				LCD_WriteData('0' + SCORE_TENS_PLACE);
 b1c:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <SCORE_HUNDREDS_PLACE.2062>
 b20:	80 5d       	subi	r24, 0xD0	; 208
				LCD_WriteData('0' + SCORE_ONES_PLACE);
 b22:	a6 df       	rcall	.-180    	; 0xa70 <LCD_WriteData>
 b24:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <SCORE_TENS_PLACE.2063>
				LCD_WriteData('0'); // Make the score a little bigger =P
 b28:	80 5d       	subi	r24, 0xD0	; 208
 b2a:	a2 df       	rcall	.-188    	; 0xa70 <LCD_WriteData>
 b2c:	81 e3       	ldi	r24, 0x31	; 49
				LCD_Cursor(0x30);
 b2e:	8c 0f       	add	r24, r28
 b30:	9f df       	rcall	.-194    	; 0xa70 <LCD_WriteData>
 b32:	80 e3       	ldi	r24, 0x30	; 48

				SCORE = PREV_SCORE;
 b34:	9d df       	rcall	.-198    	; 0xa70 <LCD_WriteData>
 b36:	80 e3       	ldi	r24, 0x30	; 48
 b38:	84 df       	rcall	.-248    	; 0xa42 <LCD_Cursor>
 b3a:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <SCORE>
 b3e:	82 e0       	ldi	r24, 0x02	; 2
 b40:	90 e0       	ldi	r25, 0x00	; 0
		
		default:
		break;
	}
	return state;
};
 b42:	02 c0       	rjmp	.+4      	; 0xb48 <LCD_OUTPUT_Tick+0x94>
 b44:	82 e0       	ldi	r24, 0x02	; 2
 b46:	90 e0       	ldi	r25, 0x00	; 0
 b48:	cf 91       	pop	r28
 b4a:	08 95       	ret

00000b4c <TimerISR>:


void TimerISR() {
 b4c:	ef 92       	push	r14
 b4e:	ff 92       	push	r15
 b50:	0f 93       	push	r16
 b52:	1f 93       	push	r17
 b54:	cf 93       	push	r28
 b56:	df 93       	push	r29
 b58:	c3 e3       	ldi	r28, 0x33	; 51
 b5a:	d1 e0       	ldi	r29, 0x01	; 1
 b5c:	0f 2e       	mov	r0, r31
 b5e:	ff e6       	ldi	r31, 0x6F	; 111
 b60:	ef 2e       	mov	r14, r31
 b62:	f1 e0       	ldi	r31, 0x01	; 1
 b64:	ff 2e       	mov	r15, r31
 b66:	f0 2d       	mov	r31, r0
 b68:	8e 01       	movw	r16, r28
	unsigned char i;
	for(i = 0; i < tasksNum; ++i) { // Heart of the scheduler code
		if (tasks[i].elapsedTime >= tasks[i].period)
 b6a:	4e 81       	ldd	r20, Y+6	; 0x06
 b6c:	5f 81       	ldd	r21, Y+7	; 0x07
 b6e:	68 85       	ldd	r22, Y+8	; 0x08
 b70:	79 85       	ldd	r23, Y+9	; 0x09
 b72:	8a 81       	ldd	r24, Y+2	; 0x02
 b74:	9b 81       	ldd	r25, Y+3	; 0x03
 b76:	ac 81       	ldd	r26, Y+4	; 0x04
 b78:	bd 81       	ldd	r27, Y+5	; 0x05
 b7a:	48 17       	cp	r20, r24
 b7c:	59 07       	cpc	r21, r25
 b7e:	6a 07       	cpc	r22, r26
 b80:	7b 07       	cpc	r23, r27
 b82:	58 f0       	brcs	.+22     	; 0xb9a <TimerISR+0x4e>
		{ // Ready
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
 b84:	ea 85       	ldd	r30, Y+10	; 0x0a
 b86:	fb 85       	ldd	r31, Y+11	; 0x0b
 b88:	88 81       	ld	r24, Y
 b8a:	99 81       	ldd	r25, Y+1	; 0x01
 b8c:	09 95       	icall
 b8e:	99 83       	std	Y+1, r25	; 0x01
 b90:	88 83       	st	Y, r24
			tasks[i].elapsedTime = 0;
 b92:	1e 82       	std	Y+6, r1	; 0x06
 b94:	1f 82       	std	Y+7, r1	; 0x07
 b96:	18 86       	std	Y+8, r1	; 0x08
 b98:	19 86       	std	Y+9, r1	; 0x09
		}
		tasks[i].elapsedTime += tasksPeriodGCD;
 b9a:	f8 01       	movw	r30, r16
 b9c:	86 81       	ldd	r24, Z+6	; 0x06
 b9e:	97 81       	ldd	r25, Z+7	; 0x07
 ba0:	a0 85       	ldd	r26, Z+8	; 0x08
 ba2:	b1 85       	ldd	r27, Z+9	; 0x09
 ba4:	01 96       	adiw	r24, 0x01	; 1
 ba6:	a1 1d       	adc	r26, r1
 ba8:	b1 1d       	adc	r27, r1
 baa:	86 83       	std	Z+6, r24	; 0x06
 bac:	97 83       	std	Z+7, r25	; 0x07
 bae:	a0 87       	std	Z+8, r26	; 0x08
 bb0:	b1 87       	std	Z+9, r27	; 0x09
 bb2:	2c 96       	adiw	r28, 0x0c	; 12
};


void TimerISR() {
	unsigned char i;
	for(i = 0; i < tasksNum; ++i) { // Heart of the scheduler code
 bb4:	ce 15       	cp	r28, r14
 bb6:	df 05       	cpc	r29, r15
 bb8:	b9 f6       	brne	.-82     	; 0xb68 <TimerISR+0x1c>
			tasks[i].elapsedTime = 0;
		}
		tasks[i].elapsedTime += tasksPeriodGCD;

	}
	TimerFlag = 1;
 bba:	81 e0       	ldi	r24, 0x01	; 1
 bbc:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <TimerFlag>
}
 bc0:	df 91       	pop	r29
 bc2:	cf 91       	pop	r28
 bc4:	1f 91       	pop	r17
 bc6:	0f 91       	pop	r16
 bc8:	ff 90       	pop	r15
 bca:	ef 90       	pop	r14
 bcc:	08 95       	ret

00000bce <__vector_13>:
//	TimerFlag = 1;
//}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 bce:	1f 92       	push	r1
 bd0:	0f 92       	push	r0
 bd2:	0f b6       	in	r0, 0x3f	; 63
 bd4:	0f 92       	push	r0
 bd6:	11 24       	eor	r1, r1
 bd8:	0b b6       	in	r0, 0x3b	; 59
 bda:	0f 92       	push	r0
 bdc:	2f 93       	push	r18
 bde:	3f 93       	push	r19
 be0:	4f 93       	push	r20
 be2:	5f 93       	push	r21
 be4:	6f 93       	push	r22
 be6:	7f 93       	push	r23
 be8:	8f 93       	push	r24
 bea:	9f 93       	push	r25
 bec:	af 93       	push	r26
 bee:	bf 93       	push	r27
 bf0:	ef 93       	push	r30
 bf2:	ff 93       	push	r31
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 bf4:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <_avr_timer_cntcurr>
 bf8:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <_avr_timer_cntcurr+0x1>
 bfc:	a0 91 30 01 	lds	r26, 0x0130	; 0x800130 <_avr_timer_cntcurr+0x2>
 c00:	b0 91 31 01 	lds	r27, 0x0131	; 0x800131 <_avr_timer_cntcurr+0x3>
 c04:	01 97       	sbiw	r24, 0x01	; 1
 c06:	a1 09       	sbc	r26, r1
 c08:	b1 09       	sbc	r27, r1
 c0a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <_avr_timer_cntcurr>
 c0e:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <_avr_timer_cntcurr+0x1>
 c12:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <_avr_timer_cntcurr+0x2>
 c16:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 c1a:	89 2b       	or	r24, r25
 c1c:	8a 2b       	or	r24, r26
 c1e:	8b 2b       	or	r24, r27
		TimerISR(); 				// Call the ISR that the user uses
 c20:	89 f4       	brne	.+34     	; 0xc44 <__vector_13+0x76>
		_avr_timer_cntcurr = _avr_timer_M;
 c22:	94 df       	rcall	.-216    	; 0xb4c <TimerISR>
 c24:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_avr_timer_M>
 c28:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_avr_timer_M+0x1>
 c2c:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <_avr_timer_M+0x2>
 c30:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <_avr_timer_M+0x3>
 c34:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <_avr_timer_cntcurr>
 c38:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <_avr_timer_cntcurr+0x1>
 c3c:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <_avr_timer_cntcurr+0x2>
 c40:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <_avr_timer_cntcurr+0x3>
	}
}
 c44:	ff 91       	pop	r31
 c46:	ef 91       	pop	r30
 c48:	bf 91       	pop	r27
 c4a:	af 91       	pop	r26
 c4c:	9f 91       	pop	r25
 c4e:	8f 91       	pop	r24
 c50:	7f 91       	pop	r23
 c52:	6f 91       	pop	r22
 c54:	5f 91       	pop	r21
 c56:	4f 91       	pop	r20
 c58:	3f 91       	pop	r19
 c5a:	2f 91       	pop	r18
 c5c:	0f 90       	pop	r0
 c5e:	0b be       	out	0x3b, r0	; 59
 c60:	0f 90       	pop	r0
 c62:	0f be       	out	0x3f, r0	; 63
 c64:	0f 90       	pop	r0
 c66:	1f 90       	pop	r1
 c68:	18 95       	reti

00000c6a <main>:


int main() {

	DDRA = 0xFF; PORTA = 0x00; // Initialize to output to PORT A
 c6a:	8f ef       	ldi	r24, 0xFF	; 255
 c6c:	81 b9       	out	0x01, r24	; 1
 c6e:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xFF; PORTB = 0x00;
 c70:	84 b9       	out	0x04, r24	; 4
 c72:	15 b8       	out	0x05, r1	; 5
	//DDRC = 0x03; PORTC = 0x04; // Before LCD implementation
	DDRC = 0xFB; PORTC = 0x04; // LCD control lines on Pin 4 and Pin 5. NES Outputs on Pin 1 and Pin 2. NES Read on Pin 3
 c74:	9b ef       	ldi	r25, 0xFB	; 251
 c76:	97 b9       	out	0x07, r25	; 7
 c78:	94 e0       	ldi	r25, 0x04	; 4
 c7a:	98 b9       	out	0x08, r25	; 8
	DDRD = 0xFF; PORTD = 0x00; // LCD data lines
 c7c:	8a b9       	out	0x0a, r24	; 10
 c7e:	1b b8       	out	0x0b, r1	; 11

	unsigned char i = 0;
	tasks[i].state = P_START;
 c80:	e3 e3       	ldi	r30, 0x33	; 51
 c82:	f1 e0       	ldi	r31, 0x01	; 1
 c84:	11 82       	std	Z+1, r1	; 0x01
 c86:	10 82       	st	Z, r1
	tasks[i].period = periodPaddle;
 c88:	82 e3       	ldi	r24, 0x32	; 50
 c8a:	90 e0       	ldi	r25, 0x00	; 0
 c8c:	a0 e0       	ldi	r26, 0x00	; 0
 c8e:	b0 e0       	ldi	r27, 0x00	; 0
 c90:	82 83       	std	Z+2, r24	; 0x02
 c92:	93 83       	std	Z+3, r25	; 0x03
 c94:	a4 83       	std	Z+4, r26	; 0x04
 c96:	b5 83       	std	Z+5, r27	; 0x05
	tasks[i].elapsedTime = tasks[i].period;
 c98:	86 83       	std	Z+6, r24	; 0x06
 c9a:	97 83       	std	Z+7, r25	; 0x07
 c9c:	a0 87       	std	Z+8, r26	; 0x08
 c9e:	b1 87       	std	Z+9, r27	; 0x09
	tasks[i].TickFct= &Paddle_Tick;
 ca0:	21 e8       	ldi	r18, 0x81	; 129
 ca2:	31 e0       	ldi	r19, 0x01	; 1
 ca4:	33 87       	std	Z+11, r19	; 0x0b
 ca6:	22 87       	std	Z+10, r18	; 0x0a
	++i;
	tasks[i].state = B_START;
 ca8:	15 86       	std	Z+13, r1	; 0x0d
 caa:	14 86       	std	Z+12, r1	; 0x0c
	tasks[i].period = periodBall;
 cac:	48 ec       	ldi	r20, 0xC8	; 200
 cae:	50 e0       	ldi	r21, 0x00	; 0
 cb0:	60 e0       	ldi	r22, 0x00	; 0
 cb2:	70 e0       	ldi	r23, 0x00	; 0
 cb4:	46 87       	std	Z+14, r20	; 0x0e
 cb6:	57 87       	std	Z+15, r21	; 0x0f
 cb8:	60 8b       	std	Z+16, r22	; 0x10
 cba:	71 8b       	std	Z+17, r23	; 0x11
	tasks[i].elapsedTime = tasks[i].period;
 cbc:	42 8b       	std	Z+18, r20	; 0x12
 cbe:	53 8b       	std	Z+19, r21	; 0x13
 cc0:	64 8b       	std	Z+20, r22	; 0x14
 cc2:	75 8b       	std	Z+21, r23	; 0x15
	tasks[i].TickFct= &Ball_Tick;
 cc4:	28 ee       	ldi	r18, 0xE8	; 232
 cc6:	31 e0       	ldi	r19, 0x01	; 1
 cc8:	37 8b       	std	Z+23, r19	; 0x17
 cca:	26 8b       	std	Z+22, r18	; 0x16
	++i;
	tasks[i].state = BRICK_START;
 ccc:	11 8e       	std	Z+25, r1	; 0x19
 cce:	10 8e       	std	Z+24, r1	; 0x18
	tasks[i].period = periodBrick;
 cd0:	82 8f       	std	Z+26, r24	; 0x1a
 cd2:	93 8f       	std	Z+27, r25	; 0x1b
 cd4:	a4 8f       	std	Z+28, r26	; 0x1c
 cd6:	b5 8f       	std	Z+29, r27	; 0x1d
	tasks[i].elapsedTime = tasks[i].period;
 cd8:	86 8f       	std	Z+30, r24	; 0x1e
 cda:	97 8f       	std	Z+31, r25	; 0x1f
 cdc:	a0 a3       	std	Z+32, r26	; 0x20
 cde:	b1 a3       	std	Z+33, r27	; 0x21
	tasks[i].TickFct= &Brick_Tick;
 ce0:	89 e2       	ldi	r24, 0x29	; 41
 ce2:	94 e0       	ldi	r25, 0x04	; 4
 ce4:	93 a3       	std	Z+35, r25	; 0x23
 ce6:	82 a3       	std	Z+34, r24	; 0x22
	++i;
	tasks[i].state = O_START;
 ce8:	15 a2       	std	Z+37, r1	; 0x25
 cea:	14 a2       	std	Z+36, r1	; 0x24
	tasks[i].period = periodOutput;
 cec:	81 e0       	ldi	r24, 0x01	; 1
 cee:	90 e0       	ldi	r25, 0x00	; 0
 cf0:	a0 e0       	ldi	r26, 0x00	; 0
 cf2:	b0 e0       	ldi	r27, 0x00	; 0
 cf4:	86 a3       	std	Z+38, r24	; 0x26
 cf6:	97 a3       	std	Z+39, r25	; 0x27
 cf8:	a0 a7       	std	Z+40, r26	; 0x28
 cfa:	b1 a7       	std	Z+41, r27	; 0x29
	tasks[i].elapsedTime = tasks[i].period;
 cfc:	82 a7       	std	Z+42, r24	; 0x2a
 cfe:	93 a7       	std	Z+43, r25	; 0x2b
 d00:	a4 a7       	std	Z+44, r26	; 0x2c
 d02:	b5 a7       	std	Z+45, r27	; 0x2d
	tasks[i].TickFct= &LED_MATRIX_OUTPUT_Tick;
 d04:	88 e3       	ldi	r24, 0x38	; 56
 d06:	91 e0       	ldi	r25, 0x01	; 1
 d08:	97 a7       	std	Z+47, r25	; 0x2f
 d0a:	86 a7       	std	Z+46, r24	; 0x2e
	++i;
	tasks[i].state = LCD_O_START;
 d0c:	11 aa       	std	Z+49, r1	; 0x31
 d0e:	10 aa       	std	Z+48, r1	; 0x30
	tasks[i].period = periodLCDOutput;
 d10:	80 e2       	ldi	r24, 0x20	; 32
 d12:	93 e0       	ldi	r25, 0x03	; 3
 d14:	a0 e0       	ldi	r26, 0x00	; 0
 d16:	b0 e0       	ldi	r27, 0x00	; 0
 d18:	82 ab       	std	Z+50, r24	; 0x32
 d1a:	93 ab       	std	Z+51, r25	; 0x33
 d1c:	a4 ab       	std	Z+52, r26	; 0x34
 d1e:	b5 ab       	std	Z+53, r27	; 0x35
	tasks[i].elapsedTime = tasks[i].period;
 d20:	86 ab       	std	Z+54, r24	; 0x36
 d22:	97 ab       	std	Z+55, r25	; 0x37
 d24:	a0 af       	std	Z+56, r26	; 0x38
 d26:	b1 af       	std	Z+57, r27	; 0x39
	tasks[i].TickFct= &LCD_OUTPUT_Tick;
 d28:	8a e5       	ldi	r24, 0x5A	; 90
 d2a:	95 e0       	ldi	r25, 0x05	; 5
 d2c:	93 af       	std	Z+59, r25	; 0x3b
 d2e:	82 af       	std	Z+58, r24	; 0x3a

	

 	TimerSet(tasksPeriodGCD);
 d30:	61 e0       	ldi	r22, 0x01	; 1
 d32:	70 e0       	ldi	r23, 0x00	; 0
 d34:	80 e0       	ldi	r24, 0x00	; 0
 	TimerOn();
	
	   // Initializes the LCD display
	   	LCD_init();
 d36:	90 e0       	ldi	r25, 0x00	; 0
	   	LCD_Cursor(0x01);
 d38:	30 de       	rcall	.-928    	; 0x99a <TimerSet>
 d3a:	40 de       	rcall	.-896    	; 0x9bc <TimerOn>
		//LCD_DisplayString(1, "Systems Online.");
		LCD_DisplayString(1, "Go to sleep now.");
 d3c:	8a de       	rcall	.-748    	; 0xa52 <LCD_init>
 d3e:	81 e0       	ldi	r24, 0x01	; 1
 d40:	80 de       	rcall	.-768    	; 0xa42 <LCD_Cursor>
 d42:	66 e1       	ldi	r22, 0x16	; 22
 d44:	71 e0       	ldi	r23, 0x01	; 1

	while(1)
	{
		
		while (!TimerFlag);
 d46:	81 e0       	ldi	r24, 0x01	; 1
 d48:	9c de       	rcall	.-712    	; 0xa82 <LCD_DisplayString>
 d4a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <TimerFlag>
		TimerFlag = 0;			
 d4e:	88 23       	and	r24, r24
 d50:	e1 f3       	breq	.-8      	; 0xd4a <main+0xe0>
	}
 d52:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <TimerFlag>
 d56:	f9 cf       	rjmp	.-14     	; 0xd4a <main+0xe0>

00000d58 <__tablejump2__>:
 d58:	ee 0f       	add	r30, r30
 d5a:	ff 1f       	adc	r31, r31
 d5c:	00 24       	eor	r0, r0
 d5e:	00 1c       	adc	r0, r0
 d60:	0b be       	out	0x3b, r0	; 59
 d62:	07 90       	elpm	r0, Z+
 d64:	f6 91       	elpm	r31, Z
 d66:	e0 2d       	mov	r30, r0
 d68:	09 94       	ijmp

00000d6a <_exit>:
 d6a:	f8 94       	cli

00000d6c <__stop_program>:
 d6c:	ff cf       	rjmp	.-2      	; 0xd6c <__stop_program>
