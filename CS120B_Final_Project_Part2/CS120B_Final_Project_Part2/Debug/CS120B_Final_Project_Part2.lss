
CS120B_Final_Project_Part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000ac8  00000b5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ac8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005c  0080011a  0080011a  00000b76  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b76  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ba8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011e5  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a36  00000000  00000000  00001e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ac5  00000000  00000000  000028c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000234  00000000  00000000  00003388  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e6  00000000  00000000  000035bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008fc  00000000  00000000  00003da2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000469e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	56 c0       	rjmp	.+172    	; 0xae <__ctors_end>
   2:	00 00       	nop
   4:	71 c0       	rjmp	.+226    	; 0xe8 <__bad_interrupt>
   6:	00 00       	nop
   8:	6f c0       	rjmp	.+222    	; 0xe8 <__bad_interrupt>
   a:	00 00       	nop
   c:	6d c0       	rjmp	.+218    	; 0xe8 <__bad_interrupt>
   e:	00 00       	nop
  10:	6b c0       	rjmp	.+214    	; 0xe8 <__bad_interrupt>
  12:	00 00       	nop
  14:	69 c0       	rjmp	.+210    	; 0xe8 <__bad_interrupt>
  16:	00 00       	nop
  18:	67 c0       	rjmp	.+206    	; 0xe8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	65 c0       	rjmp	.+202    	; 0xe8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	63 c0       	rjmp	.+198    	; 0xe8 <__bad_interrupt>
  22:	00 00       	nop
  24:	61 c0       	rjmp	.+194    	; 0xe8 <__bad_interrupt>
  26:	00 00       	nop
  28:	5f c0       	rjmp	.+190    	; 0xe8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5d c0       	rjmp	.+186    	; 0xe8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	5b c0       	rjmp	.+182    	; 0xe8 <__bad_interrupt>
  32:	00 00       	nop
  34:	8b c4       	rjmp	.+2326   	; 0x94c <__vector_13>
  36:	00 00       	nop
  38:	57 c0       	rjmp	.+174    	; 0xe8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	55 c0       	rjmp	.+170    	; 0xe8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	53 c0       	rjmp	.+166    	; 0xe8 <__bad_interrupt>
  42:	00 00       	nop
  44:	51 c0       	rjmp	.+162    	; 0xe8 <__bad_interrupt>
  46:	00 00       	nop
  48:	4f c0       	rjmp	.+158    	; 0xe8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4d c0       	rjmp	.+154    	; 0xe8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	4b c0       	rjmp	.+150    	; 0xe8 <__bad_interrupt>
  52:	00 00       	nop
  54:	49 c0       	rjmp	.+146    	; 0xe8 <__bad_interrupt>
  56:	00 00       	nop
  58:	47 c0       	rjmp	.+142    	; 0xe8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	45 c0       	rjmp	.+138    	; 0xe8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	43 c0       	rjmp	.+134    	; 0xe8 <__bad_interrupt>
  62:	00 00       	nop
  64:	41 c0       	rjmp	.+130    	; 0xe8 <__bad_interrupt>
  66:	00 00       	nop
  68:	3f c0       	rjmp	.+126    	; 0xe8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3d c0       	rjmp	.+122    	; 0xe8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	3b c0       	rjmp	.+118    	; 0xe8 <__bad_interrupt>
  72:	00 00       	nop
  74:	39 c0       	rjmp	.+114    	; 0xe8 <__bad_interrupt>
  76:	00 00       	nop
  78:	37 c0       	rjmp	.+110    	; 0xe8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	35 c0       	rjmp	.+106    	; 0xe8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	33 c0       	rjmp	.+102    	; 0xe8 <__bad_interrupt>
  82:	00 00       	nop
  84:	31 c0       	rjmp	.+98     	; 0xe8 <__bad_interrupt>
  86:	00 00       	nop
  88:	2f c0       	rjmp	.+94     	; 0xe8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	8b 01       	movw	r16, r22
  8e:	90 01       	movw	r18, r0
  90:	95 01       	movw	r18, r10
  92:	99 01       	movw	r18, r18
  94:	c6 01       	movw	r24, r12
  96:	d4 01       	movw	r26, r8
  98:	42 02       	muls	r20, r18
  9a:	ad 02       	muls	r26, r29
  9c:	cd 02       	muls	r28, r29
  9e:	fe 02       	muls	r31, r30
  a0:	48 03       	fmul	r20, r16
  a2:	05 03       	mulsu	r16, r21
  a4:	0b 03       	fmul	r16, r19
  a6:	13 03       	mulsu	r17, r19
  a8:	2f 03       	fmul	r18, r23
  aa:	21 03       	mulsu	r18, r17
  ac:	3b 03       	fmul	r19, r19

000000ae <__ctors_end>:
  ae:	11 24       	eor	r1, r1
  b0:	1f be       	out	0x3f, r1	; 63
  b2:	cf ef       	ldi	r28, 0xFF	; 255
  b4:	d0 e4       	ldi	r29, 0x40	; 64
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	cd bf       	out	0x3d, r28	; 61

000000ba <__do_copy_data>:
  ba:	11 e0       	ldi	r17, 0x01	; 1
  bc:	a0 e0       	ldi	r26, 0x00	; 0
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	e8 ec       	ldi	r30, 0xC8	; 200
  c2:	fa e0       	ldi	r31, 0x0A	; 10
  c4:	00 e0       	ldi	r16, 0x00	; 0
  c6:	0b bf       	out	0x3b, r16	; 59
  c8:	02 c0       	rjmp	.+4      	; 0xce <__do_copy_data+0x14>
  ca:	07 90       	elpm	r0, Z+
  cc:	0d 92       	st	X+, r0
  ce:	aa 31       	cpi	r26, 0x1A	; 26
  d0:	b1 07       	cpc	r27, r17
  d2:	d9 f7       	brne	.-10     	; 0xca <__do_copy_data+0x10>

000000d4 <__do_clear_bss>:
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	aa e1       	ldi	r26, 0x1A	; 26
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	01 c0       	rjmp	.+2      	; 0xde <.do_clear_bss_start>

000000dc <.do_clear_bss_loop>:
  dc:	1d 92       	st	X+, r1

000000de <.do_clear_bss_start>:
  de:	a6 37       	cpi	r26, 0x76	; 118
  e0:	b2 07       	cpc	r27, r18
  e2:	e1 f7       	brne	.-8      	; 0xdc <.do_clear_bss_loop>
  e4:	81 d4       	rcall	.+2306   	; 0x9e8 <main>
  e6:	ee c4       	rjmp	.+2524   	; 0xac4 <_exit>

000000e8 <__bad_interrupt>:
  e8:	8b cf       	rjmp	.-234    	; 0x0 <__vectors>

000000ea <paddle_collision_detection.1955>:
	//Enable global interrupts
	SREG |= 0x80;	// 0x80: 1000000
}

void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
  ea:	2f 92       	push	r2
  ec:	3f 92       	push	r3
  ee:	f1 01       	movw	r30, r2
  f0:	82 81       	ldd	r24, Z+2	; 0x02
  f2:	86 95       	lsr	r24
  f4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <ball_row.1947>
  f8:	89 13       	cpse	r24, r25
  fa:	44 c0       	rjmp	.+136    	; 0x184 <paddle_collision_detection.1955+0x9a>
  fc:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	a0 e0       	ldi	r26, 0x00	; 0
 108:	e4 e6       	ldi	r30, 0x64	; 100
 10a:	f1 e0       	ldi	r31, 0x01	; 1
 10c:	ab 01       	movw	r20, r22
 10e:	02 2e       	mov	r0, r18
 110:	02 c0       	rjmp	.+4      	; 0x116 <paddle_collision_detection.1955+0x2c>
 112:	55 95       	asr	r21
 114:	47 95       	ror	r20
 116:	0a 94       	dec	r0
 118:	e2 f7       	brpl	.-8      	; 0x112 <paddle_collision_detection.1955+0x28>
 11a:	90 81       	ld	r25, Z
 11c:	89 2f       	mov	r24, r25
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 2e       	mov	r0, r18
 122:	02 c0       	rjmp	.+4      	; 0x128 <paddle_collision_detection.1955+0x3e>
 124:	95 95       	asr	r25
 126:	87 95       	ror	r24
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <paddle_collision_detection.1955+0x3a>
 12c:	40 ff       	sbrs	r20, 0
 12e:	04 c0       	rjmp	.+8      	; 0x138 <paddle_collision_detection.1955+0x4e>
 130:	80 fd       	sbrc	r24, 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <paddle_collision_detection.1955+0x4e>
 134:	af 5f       	subi	r26, 0xFF	; 255
 136:	04 c0       	rjmp	.+8      	; 0x140 <paddle_collision_detection.1955+0x56>
 138:	84 2b       	or	r24, r20
 13a:	95 2b       	or	r25, r21
 13c:	80 ff       	sbrs	r24, 0
 13e:	05 c0       	rjmp	.+10     	; 0x14a <paddle_collision_detection.1955+0x60>
 140:	2f 5f       	subi	r18, 0xFF	; 255
 142:	3f 4f       	sbci	r19, 0xFF	; 255
 144:	28 30       	cpi	r18, 0x08	; 8
 146:	31 05       	cpc	r19, r1
 148:	09 f7       	brne	.-62     	; 0x10c <paddle_collision_detection.1955+0x22>
 14a:	a1 11       	cpse	r26, r1
 14c:	06 c0       	rjmp	.+12     	; 0x15a <paddle_collision_detection.1955+0x70>
 14e:	86 e0       	ldi	r24, 0x06	; 6
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	f1 01       	movw	r30, r2
 154:	91 83       	std	Z+1, r25	; 0x01
 156:	80 83       	st	Z, r24
 158:	15 c0       	rjmp	.+42     	; 0x184 <paddle_collision_detection.1955+0x9a>
 15a:	a1 30       	cpi	r26, 0x01	; 1
 15c:	31 f4       	brne	.+12     	; 0x16a <paddle_collision_detection.1955+0x80>
 15e:	85 e0       	ldi	r24, 0x05	; 5
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	f1 01       	movw	r30, r2
 164:	91 83       	std	Z+1, r25	; 0x01
 166:	80 83       	st	Z, r24
 168:	0d c0       	rjmp	.+26     	; 0x184 <paddle_collision_detection.1955+0x9a>
 16a:	a2 30       	cpi	r26, 0x02	; 2
 16c:	31 f4       	brne	.+12     	; 0x17a <paddle_collision_detection.1955+0x90>
 16e:	85 e0       	ldi	r24, 0x05	; 5
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	f1 01       	movw	r30, r2
 174:	91 83       	std	Z+1, r25	; 0x01
 176:	80 83       	st	Z, r24
 178:	05 c0       	rjmp	.+10     	; 0x184 <paddle_collision_detection.1955+0x9a>
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	f1 01       	movw	r30, r2
 180:	91 83       	std	Z+1, r25	; 0x01
 182:	80 83       	st	Z, r24
 184:	3f 90       	pop	r3
 186:	2f 90       	pop	r2
 188:	08 95       	ret

0000018a <Output_Tick>:
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	02 97       	sbiw	r24, 0x02	; 2
 18e:	30 f5       	brcc	.+76     	; 0x1dc <Output_Tick+0x52>
 190:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <__data_end>
 194:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <__data_end+0x1>
 198:	ee 5a       	subi	r30, 0xAE	; 174
 19a:	fe 4f       	sbci	r31, 0xFE	; 254
 19c:	80 81       	ld	r24, Z
 19e:	82 b9       	out	0x02, r24	; 2
 1a0:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <__data_end>
 1a4:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <__data_end+0x1>
 1a8:	ec 59       	subi	r30, 0x9C	; 156
 1aa:	fe 4f       	sbci	r31, 0xFE	; 254
 1ac:	80 81       	ld	r24, Z
 1ae:	85 b9       	out	0x05, r24	; 5
 1b0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 1b4:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
 1b8:	81 31       	cpi	r24, 0x11	; 17
 1ba:	91 05       	cpc	r25, r1
 1bc:	39 f4       	brne	.+14     	; 0x1cc <Output_Tick+0x42>
 1be:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <__data_end+0x1>
 1c2:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	08 95       	ret
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x1>
 1d2:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	08 95       	ret
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	08 95       	ret

000001e2 <GetNESControllerButton>:
 1e2:	41 9a       	sbi	0x08, 1	; 8
 1e4:	41 98       	cbi	0x08, 1	; 8
 1e6:	40 e0       	ldi	r20, 0x00	; 0
 1e8:	50 e0       	ldi	r21, 0x00	; 0
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	26 b1       	in	r18, 0x06	; 6
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	20 95       	com	r18
 1f2:	30 95       	com	r19
 1f4:	22 fb       	bst	r18, 2
 1f6:	66 27       	eor	r22, r22
 1f8:	60 f9       	bld	r22, 0
 1fa:	70 e0       	ldi	r23, 0x00	; 0
 1fc:	9b 01       	movw	r18, r22
 1fe:	04 2e       	mov	r0, r20
 200:	02 c0       	rjmp	.+4      	; 0x206 <GetNESControllerButton+0x24>
 202:	22 0f       	add	r18, r18
 204:	33 1f       	adc	r19, r19
 206:	0a 94       	dec	r0
 208:	e2 f7       	brpl	.-8      	; 0x202 <GetNESControllerButton+0x20>
 20a:	82 2b       	or	r24, r18
 20c:	40 9a       	sbi	0x08, 0	; 8
 20e:	40 98       	cbi	0x08, 0	; 8
 210:	4f 5f       	subi	r20, 0xFF	; 255
 212:	5f 4f       	sbci	r21, 0xFF	; 255
 214:	48 30       	cpi	r20, 0x08	; 8
 216:	51 05       	cpc	r21, r1
 218:	49 f7       	brne	.-46     	; 0x1ec <GetNESControllerButton+0xa>
 21a:	08 95       	ret

0000021c <Paddle_Tick>:
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	ec 01       	movw	r28, r24
 222:	df df       	rcall	.-66     	; 0x1e2 <GetNESControllerButton>
 224:	c3 30       	cpi	r28, 0x03	; 3
 226:	d1 05       	cpc	r29, r1
 228:	a1 f0       	breq	.+40     	; 0x252 <Paddle_Tick+0x36>
 22a:	3c f4       	brge	.+14     	; 0x23a <Paddle_Tick+0x1e>
 22c:	c1 30       	cpi	r28, 0x01	; 1
 22e:	d1 05       	cpc	r29, r1
 230:	69 f1       	breq	.+90     	; 0x28c <Paddle_Tick+0x70>
 232:	c2 30       	cpi	r28, 0x02	; 2
 234:	d1 05       	cpc	r29, r1
 236:	49 f0       	breq	.+18     	; 0x24a <Paddle_Tick+0x2e>
 238:	20 c0       	rjmp	.+64     	; 0x27a <Paddle_Tick+0x5e>
 23a:	c6 30       	cpi	r28, 0x06	; 6
 23c:	d1 05       	cpc	r29, r1
 23e:	0c f4       	brge	.+2      	; 0x242 <Paddle_Tick+0x26>
 240:	46 c0       	rjmp	.+140    	; 0x2ce <Paddle_Tick+0xb2>
 242:	c6 30       	cpi	r28, 0x06	; 6
 244:	d1 05       	cpc	r29, r1
 246:	51 f0       	breq	.+20     	; 0x25c <Paddle_Tick+0x40>
 248:	18 c0       	rjmp	.+48     	; 0x27a <Paddle_Tick+0x5e>
 24a:	88 30       	cpi	r24, 0x08	; 8
 24c:	09 f0       	breq	.+2      	; 0x250 <Paddle_Tick+0x34>
 24e:	41 c0       	rjmp	.+130    	; 0x2d2 <Paddle_Tick+0xb6>
 250:	1d c0       	rjmp	.+58     	; 0x28c <Paddle_Tick+0x70>
 252:	80 34       	cpi	r24, 0x40	; 64
 254:	01 f1       	breq	.+64     	; 0x296 <Paddle_Tick+0x7a>
 256:	80 38       	cpi	r24, 0x80	; 128
 258:	c9 f4       	brne	.+50     	; 0x28c <Paddle_Tick+0x70>
 25a:	28 c0       	rjmp	.+80     	; 0x2ac <Paddle_Tick+0x90>
 25c:	88 23       	and	r24, r24
 25e:	b1 f0       	breq	.+44     	; 0x28c <Paddle_Tick+0x70>
 260:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <button_hold_count.1913>
 264:	92 30       	cpi	r25, 0x02	; 2
 266:	20 f4       	brcc	.+8      	; 0x270 <Paddle_Tick+0x54>
 268:	9f 5f       	subi	r25, 0xFF	; 255
 26a:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <button_hold_count.1913>
 26e:	31 c0       	rjmp	.+98     	; 0x2d2 <Paddle_Tick+0xb6>
 270:	80 34       	cpi	r24, 0x40	; 64
 272:	89 f0       	breq	.+34     	; 0x296 <Paddle_Tick+0x7a>
 274:	80 38       	cpi	r24, 0x80	; 128
 276:	69 f5       	brne	.+90     	; 0x2d2 <Paddle_Tick+0xb6>
 278:	19 c0       	rjmp	.+50     	; 0x2ac <Paddle_Tick+0x90>
 27a:	80 e8       	ldi	r24, 0x80	; 128
 27c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <bottom_row.1911>
 280:	88 ef       	ldi	r24, 0xF8	; 248
 282:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <paddle_pos.1912>
 286:	c1 e0       	ldi	r28, 0x01	; 1
 288:	d0 e0       	ldi	r29, 0x00	; 0
 28a:	23 c0       	rjmp	.+70     	; 0x2d2 <Paddle_Tick+0xb6>
 28c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <button_hold_count.1913>
 290:	c3 e0       	ldi	r28, 0x03	; 3
 292:	d0 e0       	ldi	r29, 0x00	; 0
 294:	1e c0       	rjmp	.+60     	; 0x2d2 <Paddle_Tick+0xb6>
 296:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <paddle_pos.1912>
 29a:	8f 31       	cpi	r24, 0x1F	; 31
 29c:	91 f0       	breq	.+36     	; 0x2c2 <Paddle_Tick+0xa6>
 29e:	88 0f       	add	r24, r24
 2a0:	81 60       	ori	r24, 0x01	; 1
 2a2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <paddle_pos.1912>
 2a6:	c4 e0       	ldi	r28, 0x04	; 4
 2a8:	d0 e0       	ldi	r29, 0x00	; 0
 2aa:	13 c0       	rjmp	.+38     	; 0x2d2 <Paddle_Tick+0xb6>
 2ac:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <paddle_pos.1912>
 2b0:	88 3f       	cpi	r24, 0xF8	; 248
 2b2:	51 f0       	breq	.+20     	; 0x2c8 <Paddle_Tick+0xac>
 2b4:	86 95       	lsr	r24
 2b6:	80 68       	ori	r24, 0x80	; 128
 2b8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <paddle_pos.1912>
 2bc:	c5 e0       	ldi	r28, 0x05	; 5
 2be:	d0 e0       	ldi	r29, 0x00	; 0
 2c0:	08 c0       	rjmp	.+16     	; 0x2d2 <Paddle_Tick+0xb6>
 2c2:	c4 e0       	ldi	r28, 0x04	; 4
 2c4:	d0 e0       	ldi	r29, 0x00	; 0
 2c6:	05 c0       	rjmp	.+10     	; 0x2d2 <Paddle_Tick+0xb6>
 2c8:	c5 e0       	ldi	r28, 0x05	; 5
 2ca:	d0 e0       	ldi	r29, 0x00	; 0
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <Paddle_Tick+0xb6>
 2ce:	c6 e0       	ldi	r28, 0x06	; 6
 2d0:	d0 e0       	ldi	r29, 0x00	; 0
 2d2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <bottom_row.1911>
 2d6:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <DISPLAY_PORTA>
 2da:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <paddle_pos.1912>
 2de:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <DISPLAY_PORTB>
 2e2:	ce 01       	movw	r24, r28
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <Ball_Tick>:
 2ea:	2f 92       	push	r2
 2ec:	3f 92       	push	r3
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	00 d0       	rcall	.+0      	; 0x2f4 <Ball_Tick+0xa>
 2f4:	1f 92       	push	r1
 2f6:	cd b7       	in	r28, 0x3d	; 61
 2f8:	de b7       	in	r29, 0x3e	; 62
 2fa:	9a 83       	std	Y+2, r25	; 0x02
 2fc:	89 83       	std	Y+1, r24	; 0x01
 2fe:	80 e8       	ldi	r24, 0x80	; 128
 300:	8b 83       	std	Y+3, r24	; 0x03
 302:	6f df       	rcall	.-290    	; 0x1e2 <GetNESControllerButton>
 304:	e9 81       	ldd	r30, Y+1	; 0x01
 306:	fa 81       	ldd	r31, Y+2	; 0x02
 308:	e9 30       	cpi	r30, 0x09	; 9
 30a:	f1 05       	cpc	r31, r1
 30c:	08 f0       	brcs	.+2      	; 0x310 <Ball_Tick+0x26>
 30e:	66 c1       	rjmp	.+716    	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
 310:	ea 5b       	subi	r30, 0xBA	; 186
 312:	ff 4f       	sbci	r31, 0xFF	; 255
 314:	ce c3       	rjmp	.+1948   	; 0xab2 <__tablejump2__>
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	9a 83       	std	Y+2, r25	; 0x02
 31c:	89 83       	std	Y+1, r24	; 0x01
 31e:	c4 c1       	rjmp	.+904    	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
 320:	82 e0       	ldi	r24, 0x02	; 2
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	9a 83       	std	Y+2, r25	; 0x02
 326:	89 83       	std	Y+1, r24	; 0x01
 328:	bc c1       	rjmp	.+888    	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
 32a:	88 30       	cpi	r24, 0x08	; 8
 32c:	09 f0       	breq	.+2      	; 0x330 <Ball_Tick+0x46>
 32e:	b9 c1       	rjmp	.+882    	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
 330:	7a c1       	rjmp	.+756    	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
 332:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <ball_row.1947>
 336:	41 30       	cpi	r20, 0x01	; 1
 338:	21 f4       	brne	.+8      	; 0x342 <Ball_Tick+0x58>
 33a:	84 e0       	ldi	r24, 0x04	; 4
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	9a 83       	std	Y+2, r25	; 0x02
 340:	89 83       	std	Y+1, r24	; 0x01
 342:	46 95       	lsr	r20
 344:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	60 95       	com	r22
 34c:	70 95       	com	r23
 34e:	82 e0       	ldi	r24, 0x02	; 2
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	fc 01       	movw	r30, r24
 354:	ee 5a       	subi	r30, 0xAE	; 174
 356:	fe 4f       	sbci	r31, 0xFE	; 254
 358:	20 81       	ld	r18, Z
 35a:	24 23       	and	r18, r20
 35c:	91 f0       	breq	.+36     	; 0x382 <Ball_Tick+0x98>
 35e:	fc 01       	movw	r30, r24
 360:	ec 59       	subi	r30, 0x9C	; 156
 362:	fe 4f       	sbci	r31, 0xFE	; 254
 364:	20 81       	ld	r18, Z
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	26 23       	and	r18, r22
 36a:	37 23       	and	r19, r23
 36c:	23 2b       	or	r18, r19
 36e:	49 f4       	brne	.+18     	; 0x382 <Ball_Tick+0x98>
 370:	fc 01       	movw	r30, r24
 372:	ee 5a       	subi	r30, 0xAE	; 174
 374:	fe 4f       	sbci	r31, 0xFE	; 254
 376:	10 82       	st	Z, r1
 378:	fc 01       	movw	r30, r24
 37a:	ec 59       	subi	r30, 0x9C	; 156
 37c:	fe 4f       	sbci	r31, 0xFE	; 254
 37e:	10 82       	st	Z, r1
 380:	4a c1       	rjmp	.+660    	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
 382:	01 96       	adiw	r24, 0x01	; 1
 384:	82 31       	cpi	r24, 0x12	; 18
 386:	91 05       	cpc	r25, r1
 388:	21 f7       	brne	.-56     	; 0x352 <Ball_Tick+0x68>
 38a:	2d c1       	rjmp	.+602    	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
 38c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <ball_row.1947>
 390:	8b 81       	ldd	r24, Y+3	; 0x03
 392:	98 13       	cpse	r25, r24
 394:	04 c0       	rjmp	.+8      	; 0x39e <Ball_Tick+0xb4>
 396:	83 e0       	ldi	r24, 0x03	; 3
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	9a 83       	std	Y+2, r25	; 0x02
 39c:	89 83       	std	Y+1, r24	; 0x01
 39e:	ce 01       	movw	r24, r28
 3a0:	01 96       	adiw	r24, 0x01	; 1
 3a2:	1c 01       	movw	r2, r24
 3a4:	a2 de       	rcall	.-700    	; 0xea <paddle_collision_detection.1955>
 3a6:	1f c1       	rjmp	.+574    	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
 3a8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 3ac:	6f 37       	cpi	r22, 0x7F	; 127
 3ae:	71 f4       	brne	.+28     	; 0x3cc <Ball_Tick+0xe2>
 3b0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_row.1947>
 3b4:	81 30       	cpi	r24, 0x01	; 1
 3b6:	29 f0       	breq	.+10     	; 0x3c2 <Ball_Tick+0xd8>
 3b8:	86 e0       	ldi	r24, 0x06	; 6
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	9a 83       	std	Y+2, r25	; 0x02
 3be:	89 83       	std	Y+1, r24	; 0x01
 3c0:	0d c0       	rjmp	.+26     	; 0x3dc <Ball_Tick+0xf2>
 3c2:	87 e0       	ldi	r24, 0x07	; 7
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	9a 83       	std	Y+2, r25	; 0x02
 3c8:	89 83       	std	Y+1, r24	; 0x01
 3ca:	08 c0       	rjmp	.+16     	; 0x3dc <Ball_Tick+0xf2>
 3cc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_row.1947>
 3d0:	81 30       	cpi	r24, 0x01	; 1
 3d2:	21 f4       	brne	.+8      	; 0x3dc <Ball_Tick+0xf2>
 3d4:	87 e0       	ldi	r24, 0x07	; 7
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	9a 83       	std	Y+2, r25	; 0x02
 3da:	89 83       	std	Y+1, r24	; 0x01
 3dc:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <ball_row.1947>
 3e0:	46 95       	lsr	r20
 3e2:	82 e0       	ldi	r24, 0x02	; 2
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	a6 2f       	mov	r26, r22
 3e8:	b0 e0       	ldi	r27, 0x00	; 0
 3ea:	a0 95       	com	r26
 3ec:	b0 95       	com	r27
 3ee:	fc 01       	movw	r30, r24
 3f0:	ee 5a       	subi	r30, 0xAE	; 174
 3f2:	fe 4f       	sbci	r31, 0xFE	; 254
 3f4:	20 81       	ld	r18, Z
 3f6:	24 23       	and	r18, r20
 3f8:	e9 f0       	breq	.+58     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3fa:	fc 01       	movw	r30, r24
 3fc:	ec 59       	subi	r30, 0x9C	; 156
 3fe:	fe 4f       	sbci	r31, 0xFE	; 254
 400:	20 81       	ld	r18, Z
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	2a 23       	and	r18, r26
 406:	3b 23       	and	r19, r27
 408:	23 2b       	or	r18, r19
 40a:	a1 f4       	brne	.+40     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 40c:	6f 37       	cpi	r22, 0x7F	; 127
 40e:	29 f4       	brne	.+10     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 410:	28 e0       	ldi	r18, 0x08	; 8
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	3a 83       	std	Y+2, r19	; 0x02
 416:	29 83       	std	Y+1, r18	; 0x01
 418:	04 c0       	rjmp	.+8      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 41a:	27 e0       	ldi	r18, 0x07	; 7
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	3a 83       	std	Y+2, r19	; 0x02
 420:	29 83       	std	Y+1, r18	; 0x01
 422:	fc 01       	movw	r30, r24
 424:	ee 5a       	subi	r30, 0xAE	; 174
 426:	fe 4f       	sbci	r31, 0xFE	; 254
 428:	10 82       	st	Z, r1
 42a:	fc 01       	movw	r30, r24
 42c:	ec 59       	subi	r30, 0x9C	; 156
 42e:	fe 4f       	sbci	r31, 0xFE	; 254
 430:	10 82       	st	Z, r1
 432:	d9 c0       	rjmp	.+434    	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
 434:	01 96       	adiw	r24, 0x01	; 1
 436:	82 31       	cpi	r24, 0x12	; 18
 438:	91 05       	cpc	r25, r1
 43a:	c9 f6       	brne	.-78     	; 0x3ee <Ball_Tick+0x104>
 43c:	70 e0       	ldi	r23, 0x00	; 0
 43e:	60 95       	com	r22
 440:	70 95       	com	r23
 442:	66 0f       	add	r22, r22
 444:	77 1f       	adc	r23, r23
 446:	82 e0       	ldi	r24, 0x02	; 2
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	fc 01       	movw	r30, r24
 44c:	ee 5a       	subi	r30, 0xAE	; 174
 44e:	fe 4f       	sbci	r31, 0xFE	; 254
 450:	20 81       	ld	r18, Z
 452:	24 23       	and	r18, r20
 454:	91 f0       	breq	.+36     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 456:	fc 01       	movw	r30, r24
 458:	ec 59       	subi	r30, 0x9C	; 156
 45a:	fe 4f       	sbci	r31, 0xFE	; 254
 45c:	20 81       	ld	r18, Z
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	26 23       	and	r18, r22
 462:	37 23       	and	r19, r23
 464:	23 2b       	or	r18, r19
 466:	49 f4       	brne	.+18     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 468:	fc 01       	movw	r30, r24
 46a:	ee 5a       	subi	r30, 0xAE	; 174
 46c:	fe 4f       	sbci	r31, 0xFE	; 254
 46e:	10 82       	st	Z, r1
 470:	fc 01       	movw	r30, r24
 472:	ec 59       	subi	r30, 0x9C	; 156
 474:	fe 4f       	sbci	r31, 0xFE	; 254
 476:	10 82       	st	Z, r1
 478:	fe c0       	rjmp	.+508    	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
 47a:	01 96       	adiw	r24, 0x01	; 1
 47c:	82 31       	cpi	r24, 0x12	; 18
 47e:	91 05       	cpc	r25, r1
 480:	21 f7       	brne	.-56     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 482:	b1 c0       	rjmp	.+354    	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
 484:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <ball_row.1947>
 488:	41 30       	cpi	r20, 0x01	; 1
 48a:	71 f4       	brne	.+28     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 48c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 490:	8e 3f       	cpi	r24, 0xFE	; 254
 492:	29 f4       	brne	.+10     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 494:	87 e0       	ldi	r24, 0x07	; 7
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	9a 83       	std	Y+2, r25	; 0x02
 49a:	89 83       	std	Y+1, r24	; 0x01
 49c:	0d c0       	rjmp	.+26     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 49e:	88 e0       	ldi	r24, 0x08	; 8
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	9a 83       	std	Y+2, r25	; 0x02
 4a4:	89 83       	std	Y+1, r24	; 0x01
 4a6:	08 c0       	rjmp	.+16     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 4ac:	8e 3f       	cpi	r24, 0xFE	; 254
 4ae:	21 f4       	brne	.+8      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4b0:	85 e0       	ldi	r24, 0x05	; 5
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	9a 83       	std	Y+2, r25	; 0x02
 4b6:	89 83       	std	Y+1, r24	; 0x01
 4b8:	46 95       	lsr	r20
 4ba:	50 91 00 01 	lds	r21, 0x0100	; 0x800100 <__data_start>
 4be:	65 2f       	mov	r22, r21
 4c0:	70 e0       	ldi	r23, 0x00	; 0
 4c2:	60 95       	com	r22
 4c4:	70 95       	com	r23
 4c6:	82 e0       	ldi	r24, 0x02	; 2
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	fc 01       	movw	r30, r24
 4cc:	ee 5a       	subi	r30, 0xAE	; 174
 4ce:	fe 4f       	sbci	r31, 0xFE	; 254
 4d0:	20 81       	ld	r18, Z
 4d2:	24 23       	and	r18, r20
 4d4:	e9 f0       	breq	.+58     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
 4d6:	fc 01       	movw	r30, r24
 4d8:	ec 59       	subi	r30, 0x9C	; 156
 4da:	fe 4f       	sbci	r31, 0xFE	; 254
 4dc:	20 81       	ld	r18, Z
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	26 23       	and	r18, r22
 4e2:	37 23       	and	r19, r23
 4e4:	23 2b       	or	r18, r19
 4e6:	a1 f4       	brne	.+40     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
 4e8:	5e 3f       	cpi	r21, 0xFE	; 254
 4ea:	29 f4       	brne	.+10     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 4ec:	27 e0       	ldi	r18, 0x07	; 7
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	3a 83       	std	Y+2, r19	; 0x02
 4f2:	29 83       	std	Y+1, r18	; 0x01
 4f4:	04 c0       	rjmp	.+8      	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 4f6:	28 e0       	ldi	r18, 0x08	; 8
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	3a 83       	std	Y+2, r19	; 0x02
 4fc:	29 83       	std	Y+1, r18	; 0x01
 4fe:	fc 01       	movw	r30, r24
 500:	ee 5a       	subi	r30, 0xAE	; 174
 502:	fe 4f       	sbci	r31, 0xFE	; 254
 504:	10 82       	st	Z, r1
 506:	fc 01       	movw	r30, r24
 508:	ec 59       	subi	r30, 0x9C	; 156
 50a:	fe 4f       	sbci	r31, 0xFE	; 254
 50c:	10 82       	st	Z, r1
 50e:	6b c0       	rjmp	.+214    	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
 510:	01 96       	adiw	r24, 0x01	; 1
 512:	82 31       	cpi	r24, 0x12	; 18
 514:	91 05       	cpc	r25, r1
 516:	c9 f6       	brne	.-78     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 518:	35 2f       	mov	r19, r21
 51a:	36 95       	lsr	r19
 51c:	30 68       	ori	r19, 0x80	; 128
 51e:	82 e0       	ldi	r24, 0x02	; 2
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	fc 01       	movw	r30, r24
 524:	ee 5a       	subi	r30, 0xAE	; 174
 526:	fe 4f       	sbci	r31, 0xFE	; 254
 528:	20 81       	ld	r18, Z
 52a:	24 23       	and	r18, r20
 52c:	89 f0       	breq	.+34     	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
 52e:	fc 01       	movw	r30, r24
 530:	ec 59       	subi	r30, 0x9C	; 156
 532:	fe 4f       	sbci	r31, 0xFE	; 254
 534:	20 81       	ld	r18, Z
 536:	50 81       	ld	r21, Z
 538:	23 23       	and	r18, r19
 53a:	25 13       	cpse	r18, r21
 53c:	09 c0       	rjmp	.+18     	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
 53e:	fc 01       	movw	r30, r24
 540:	ee 5a       	subi	r30, 0xAE	; 174
 542:	fe 4f       	sbci	r31, 0xFE	; 254
 544:	10 82       	st	Z, r1
 546:	fc 01       	movw	r30, r24
 548:	ec 59       	subi	r30, 0x9C	; 156
 54a:	fe 4f       	sbci	r31, 0xFE	; 254
 54c:	10 82       	st	Z, r1
 54e:	79 c0       	rjmp	.+242    	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
 550:	01 96       	adiw	r24, 0x01	; 1
 552:	82 31       	cpi	r24, 0x12	; 18
 554:	91 05       	cpc	r25, r1
 556:	29 f7       	brne	.-54     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
 558:	46 c0       	rjmp	.+140    	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
 55a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <ball_row.1947>
 55e:	8b 81       	ldd	r24, Y+3	; 0x03
 560:	98 17       	cp	r25, r24
 562:	49 f0       	breq	.+18     	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 564:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 568:	8f 37       	cpi	r24, 0x7F	; 127
 56a:	91 f4       	brne	.+36     	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
 56c:	88 e0       	ldi	r24, 0x08	; 8
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	9a 83       	std	Y+2, r25	; 0x02
 572:	89 83       	std	Y+1, r24	; 0x01
 574:	0d c0       	rjmp	.+26     	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
 576:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 57a:	8f 37       	cpi	r24, 0x7F	; 127
 57c:	29 f4       	brne	.+10     	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
 57e:	86 e0       	ldi	r24, 0x06	; 6
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	9a 83       	std	Y+2, r25	; 0x02
 584:	89 83       	std	Y+1, r24	; 0x01
 586:	04 c0       	rjmp	.+8      	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
 588:	85 e0       	ldi	r24, 0x05	; 5
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	9a 83       	std	Y+2, r25	; 0x02
 58e:	89 83       	std	Y+1, r24	; 0x01
 590:	ce 01       	movw	r24, r28
 592:	01 96       	adiw	r24, 0x01	; 1
 594:	1c 01       	movw	r2, r24
 596:	a9 dd       	rcall	.-1198   	; 0xea <paddle_collision_detection.1955>
 598:	26 c0       	rjmp	.+76     	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
 59a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 59e:	8e 3f       	cpi	r24, 0xFE	; 254
 5a0:	79 f4       	brne	.+30     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
 5a2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <ball_row.1947>
 5a6:	8b 81       	ldd	r24, Y+3	; 0x03
 5a8:	98 17       	cp	r25, r24
 5aa:	29 f0       	breq	.+10     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
 5ac:	87 e0       	ldi	r24, 0x07	; 7
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	9a 83       	std	Y+2, r25	; 0x02
 5b2:	89 83       	std	Y+1, r24	; 0x01
 5b4:	0e c0       	rjmp	.+28     	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 5b6:	85 e0       	ldi	r24, 0x05	; 5
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	9a 83       	std	Y+2, r25	; 0x02
 5bc:	89 83       	std	Y+1, r24	; 0x01
 5be:	09 c0       	rjmp	.+18     	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 5c0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <ball_row.1947>
 5c4:	8b 81       	ldd	r24, Y+3	; 0x03
 5c6:	98 13       	cpse	r25, r24
 5c8:	04 c0       	rjmp	.+8      	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 5ca:	86 e0       	ldi	r24, 0x06	; 6
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	9a 83       	std	Y+2, r25	; 0x02
 5d0:	89 83       	std	Y+1, r24	; 0x01
 5d2:	ce 01       	movw	r24, r28
 5d4:	01 96       	adiw	r24, 0x01	; 1
 5d6:	1c 01       	movw	r2, r24
 5d8:	88 dd       	rcall	.-1264   	; 0xea <paddle_collision_detection.1955>
 5da:	05 c0       	rjmp	.+10     	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	9a 83       	std	Y+2, r25	; 0x02
 5e2:	89 83       	std	Y+1, r24	; 0x01
 5e4:	61 c0       	rjmp	.+194    	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
 5e6:	89 81       	ldd	r24, Y+1	; 0x01
 5e8:	9a 81       	ldd	r25, Y+2	; 0x02
 5ea:	fc 01       	movw	r30, r24
 5ec:	31 97       	sbiw	r30, 0x01	; 1
 5ee:	e8 30       	cpi	r30, 0x08	; 8
 5f0:	f1 05       	cpc	r31, r1
 5f2:	08 f0       	brcs	.+2      	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
 5f4:	4d c0       	rjmp	.+154    	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
 5f6:	e1 5b       	subi	r30, 0xB1	; 177
 5f8:	ff 4f       	sbci	r31, 0xFF	; 255
 5fa:	5b c2       	rjmp	.+1206   	; 0xab2 <__tablejump2__>
 5fc:	20 e4       	ldi	r18, 0x40	; 64
 5fe:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <ball_row.1947>
 602:	2b ef       	ldi	r18, 0xFB	; 251
 604:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
 608:	43 c0       	rjmp	.+134    	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
 60a:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <ball_row.1947>
 60e:	26 95       	lsr	r18
 610:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <ball_row.1947>
 614:	3d c0       	rjmp	.+122    	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
 616:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_row.1947>
 61a:	88 0f       	add	r24, r24
 61c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ball_row.1947>
 620:	84 e0       	ldi	r24, 0x04	; 4
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	35 c0       	rjmp	.+106    	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
 626:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_row.1947>
 62a:	86 95       	lsr	r24
 62c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ball_row.1947>
 630:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 634:	88 0f       	add	r24, r24
 636:	81 60       	ori	r24, 0x01	; 1
 638:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 63c:	85 e0       	ldi	r24, 0x05	; 5
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	27 c0       	rjmp	.+78     	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
 642:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_row.1947>
 646:	88 0f       	add	r24, r24
 648:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ball_row.1947>
 64c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 650:	88 0f       	add	r24, r24
 652:	81 60       	ori	r24, 0x01	; 1
 654:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 658:	87 e0       	ldi	r24, 0x07	; 7
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	19 c0       	rjmp	.+50     	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
 65e:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <ball_row.1947>
 662:	26 95       	lsr	r18
 664:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <ball_row.1947>
 668:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 66c:	26 95       	lsr	r18
 66e:	20 68       	ori	r18, 0x80	; 128
 670:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
 674:	0d c0       	rjmp	.+26     	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
 676:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_row.1947>
 67a:	88 0f       	add	r24, r24
 67c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ball_row.1947>
 680:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 684:	86 95       	lsr	r24
 686:	80 68       	ori	r24, 0x80	; 128
 688:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 68c:	88 e0       	ldi	r24, 0x08	; 8
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <ball_row.1947>
 694:	20 93 53 01 	sts	0x0153, r18	; 0x800153 <DISPLAY_PORTA+0x1>
 698:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 69c:	20 93 65 01 	sts	0x0165, r18	; 0x800165 <DISPLAY_PORTB+0x1>
 6a0:	06 c0       	rjmp	.+12     	; 0x6ae <__LOCK_REGION_LENGTH__+0x2ae>
 6a2:	89 81       	ldd	r24, Y+1	; 0x01
 6a4:	9a 81       	ldd	r25, Y+2	; 0x02
 6a6:	f4 cf       	rjmp	.-24     	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
 6a8:	89 81       	ldd	r24, Y+1	; 0x01
 6aa:	9a 81       	ldd	r25, Y+2	; 0x02
 6ac:	a7 cf       	rjmp	.-178    	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
 6ae:	0f 90       	pop	r0
 6b0:	0f 90       	pop	r0
 6b2:	0f 90       	pop	r0
 6b4:	df 91       	pop	r29
 6b6:	cf 91       	pop	r28
 6b8:	3f 90       	pop	r3
 6ba:	2f 90       	pop	r2
 6bc:	08 95       	ret

000006be <Brick_Tick>:
 6be:	ef 92       	push	r14
 6c0:	ff 92       	push	r15
 6c2:	0f 93       	push	r16
 6c4:	1f 93       	push	r17
 6c6:	cf 93       	push	r28
 6c8:	df 93       	push	r29
 6ca:	ec 01       	movw	r28, r24
 6cc:	8a dd       	rcall	.-1260   	; 0x1e2 <GetNESControllerButton>
 6ce:	c2 30       	cpi	r28, 0x02	; 2
 6d0:	d1 05       	cpc	r29, r1
 6d2:	39 f0       	breq	.+14     	; 0x6e2 <Brick_Tick+0x24>
 6d4:	c3 30       	cpi	r28, 0x03	; 3
 6d6:	d1 05       	cpc	r29, r1
 6d8:	09 f4       	brne	.+2      	; 0x6dc <Brick_Tick+0x1e>
 6da:	62 c0       	rjmp	.+196    	; 0x7a0 <Brick_Tick+0xe2>
 6dc:	21 97       	sbiw	r28, 0x01	; 1
 6de:	29 f4       	brne	.+10     	; 0x6ea <Brick_Tick+0x2c>
 6e0:	5a c0       	rjmp	.+180    	; 0x796 <Brick_Tick+0xd8>
 6e2:	88 30       	cpi	r24, 0x08	; 8
 6e4:	09 f0       	breq	.+2      	; 0x6e8 <Brick_Tick+0x2a>
 6e6:	5c c0       	rjmp	.+184    	; 0x7a0 <Brick_Tick+0xe2>
 6e8:	59 c0       	rjmp	.+178    	; 0x79c <Brick_Tick+0xde>
 6ea:	28 ef       	ldi	r18, 0xF8	; 248
 6ec:	3f ef       	ldi	r19, 0xFF	; 255
 6ee:	82 e0       	ldi	r24, 0x02	; 2
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	68 94       	set
 6f4:	ee 24       	eor	r14, r14
 6f6:	e1 f8       	bld	r14, 1
 6f8:	02 e1       	ldi	r16, 0x12	; 18
 6fa:	10 e0       	ldi	r17, 0x00	; 0
 6fc:	cf ef       	ldi	r28, 0xFF	; 255
 6fe:	d0 e0       	ldi	r29, 0x00	; 0
 700:	af e7       	ldi	r26, 0x7F	; 127
 702:	b0 e0       	ldi	r27, 0x00	; 0
 704:	ff 24       	eor	r15, r15
 706:	f3 94       	inc	r15
 708:	8a 30       	cpi	r24, 0x0A	; 10
 70a:	91 05       	cpc	r25, r1
 70c:	f4 f4       	brge	.+60     	; 0x74a <Brick_Tick+0x8c>
 70e:	fc 01       	movw	r30, r24
 710:	ee 5a       	subi	r30, 0xAE	; 174
 712:	fe 4f       	sbci	r31, 0xFE	; 254
 714:	f0 82       	st	Z, r15
 716:	ac 01       	movw	r20, r24
 718:	42 50       	subi	r20, 0x02	; 2
 71a:	51 09       	sbc	r21, r1
 71c:	bd 01       	movw	r22, r26
 71e:	02 c0       	rjmp	.+4      	; 0x724 <Brick_Tick+0x66>
 720:	75 95       	asr	r23
 722:	67 95       	ror	r22
 724:	4a 95       	dec	r20
 726:	e2 f7       	brpl	.-8      	; 0x720 <Brick_Tick+0x62>
 728:	44 27       	eor	r20, r20
 72a:	55 27       	eor	r21, r21
 72c:	42 1b       	sub	r20, r18
 72e:	53 0b       	sbc	r21, r19
 730:	fe 01       	movw	r30, r28
 732:	02 c0       	rjmp	.+4      	; 0x738 <Brick_Tick+0x7a>
 734:	ee 0f       	add	r30, r30
 736:	ff 1f       	adc	r31, r31
 738:	4a 95       	dec	r20
 73a:	e2 f7       	brpl	.-8      	; 0x734 <Brick_Tick+0x76>
 73c:	af 01       	movw	r20, r30
 73e:	46 2b       	or	r20, r22
 740:	fc 01       	movw	r30, r24
 742:	ec 59       	subi	r30, 0x9C	; 156
 744:	fe 4f       	sbci	r31, 0xFE	; 254
 746:	40 83       	st	Z, r20
 748:	1c c0       	rjmp	.+56     	; 0x782 <Brick_Tick+0xc4>
 74a:	28 30       	cpi	r18, 0x08	; 8
 74c:	31 05       	cpc	r19, r1
 74e:	c8 f4       	brcc	.+50     	; 0x782 <Brick_Tick+0xc4>
 750:	fc 01       	movw	r30, r24
 752:	ee 5a       	subi	r30, 0xAE	; 174
 754:	fe 4f       	sbci	r31, 0xFE	; 254
 756:	e0 82       	st	Z, r14
 758:	a8 01       	movw	r20, r16
 75a:	48 1b       	sub	r20, r24
 75c:	59 0b       	sbc	r21, r25
 75e:	be 01       	movw	r22, r28
 760:	02 c0       	rjmp	.+4      	; 0x766 <Brick_Tick+0xa8>
 762:	66 0f       	add	r22, r22
 764:	77 1f       	adc	r23, r23
 766:	4a 95       	dec	r20
 768:	e2 f7       	brpl	.-8      	; 0x762 <Brick_Tick+0xa4>
 76a:	ad 01       	movw	r20, r26
 76c:	02 2e       	mov	r0, r18
 76e:	02 c0       	rjmp	.+4      	; 0x774 <Brick_Tick+0xb6>
 770:	55 95       	asr	r21
 772:	47 95       	ror	r20
 774:	0a 94       	dec	r0
 776:	e2 f7       	brpl	.-8      	; 0x770 <Brick_Tick+0xb2>
 778:	46 2b       	or	r20, r22
 77a:	fc 01       	movw	r30, r24
 77c:	ec 59       	subi	r30, 0x9C	; 156
 77e:	fe 4f       	sbci	r31, 0xFE	; 254
 780:	40 83       	st	Z, r20
 782:	01 96       	adiw	r24, 0x01	; 1
 784:	2f 5f       	subi	r18, 0xFF	; 255
 786:	3f 4f       	sbci	r19, 0xFF	; 255
 788:	82 31       	cpi	r24, 0x12	; 18
 78a:	91 05       	cpc	r25, r1
 78c:	09 f0       	breq	.+2      	; 0x790 <Brick_Tick+0xd2>
 78e:	bc cf       	rjmp	.-136    	; 0x708 <Brick_Tick+0x4a>
 790:	c1 e0       	ldi	r28, 0x01	; 1
 792:	d0 e0       	ldi	r29, 0x00	; 0
 794:	05 c0       	rjmp	.+10     	; 0x7a0 <Brick_Tick+0xe2>
 796:	c2 e0       	ldi	r28, 0x02	; 2
 798:	d0 e0       	ldi	r29, 0x00	; 0
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <Brick_Tick+0xe2>
 79c:	c3 e0       	ldi	r28, 0x03	; 3
 79e:	d0 e0       	ldi	r29, 0x00	; 0
 7a0:	ce 01       	movw	r24, r28
 7a2:	df 91       	pop	r29
 7a4:	cf 91       	pop	r28
 7a6:	1f 91       	pop	r17
 7a8:	0f 91       	pop	r16
 7aa:	ff 90       	pop	r15
 7ac:	ef 90       	pop	r14
 7ae:	08 95       	ret

000007b0 <TimerSet>:
 7b0:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <_avr_timer_M>
 7b4:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <_avr_timer_M+0x1>
 7b8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_M+0x2>
 7bc:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_M+0x3>
 7c0:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <_avr_timer_cntcurr>
 7c4:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <_avr_timer_cntcurr+0x1>
 7c8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <_avr_timer_cntcurr+0x2>
 7cc:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <_avr_timer_cntcurr+0x3>
 7d0:	08 95       	ret

000007d2 <TimerOn>:
 7d2:	8b e0       	ldi	r24, 0x0B	; 11
 7d4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 7d8:	8d e7       	ldi	r24, 0x7D	; 125
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 7e0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 7e4:	82 e0       	ldi	r24, 0x02	; 2
 7e6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 7ea:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 7ee:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 7f2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_M>
 7f6:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_M+0x1>
 7fa:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_M+0x2>
 7fe:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_M+0x3>
 802:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <_avr_timer_cntcurr>
 806:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <_avr_timer_cntcurr+0x1>
 80a:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <_avr_timer_cntcurr+0x2>
 80e:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <_avr_timer_cntcurr+0x3>
 812:	8f b7       	in	r24, 0x3f	; 63
 814:	80 68       	ori	r24, 0x80	; 128
 816:	8f bf       	out	0x3f, r24	; 63
 818:	08 95       	ret

0000081a <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 81a:	18 16       	cp	r1, r24
 81c:	19 06       	cpc	r1, r25
 81e:	5c f0       	brlt	.+22     	; 0x836 <delay_ms+0x1c>
 820:	08 95       	ret
    for(j=0;j<775;j++)
  {
   asm("nop");
 822:	00 00       	nop
 824:	21 50       	subi	r18, 0x01	; 1
 826:	31 09       	sbc	r19, r1
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
 828:	e1 f7       	brne	.-8      	; 0x822 <delay_ms+0x8>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 82a:	4f 5f       	subi	r20, 0xFF	; 255
 82c:	5f 4f       	sbci	r21, 0xFF	; 255
 82e:	84 17       	cp	r24, r20
 830:	95 07       	cpc	r25, r21
 832:	19 f4       	brne	.+6      	; 0x83a <delay_ms+0x20>
 834:	08 95       	ret
 836:	40 e0       	ldi	r20, 0x00	; 0
 838:	50 e0       	ldi	r21, 0x00	; 0
   }
}

void delay_ms(int miliSec) //for 8 Mhz crystal

{
 83a:	27 e0       	ldi	r18, 0x07	; 7
 83c:	33 e0       	ldi	r19, 0x03	; 3
 83e:	f1 cf       	rjmp	.-30     	; 0x822 <delay_ms+0x8>

00000840 <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);						 
}

void LCD_WriteCommand (unsigned char Command) {
   CLR_BIT(CONTROL_BUS,RS);
 840:	46 98       	cbi	0x08, 6	; 8
   DATA_BUS = Command;
 842:	8b b9       	out	0x0b, r24	; 11
   SET_BIT(CONTROL_BUS,E);
 844:	47 9a       	sbi	0x08, 7	; 8
   asm("nop");
 846:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 848:	47 98       	cbi	0x08, 7	; 8
   delay_ms(2); // ClearScreen requires 1.52ms to execute
 84a:	82 e0       	ldi	r24, 0x02	; 2
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	e5 cf       	rjmp	.-54     	; 0x81a <delay_ms>
 850:	08 95       	ret

00000852 <LCD_ClearScreen>:
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
 852:	81 e0       	ldi	r24, 0x01	; 1
 854:	f5 cf       	rjmp	.-22     	; 0x840 <LCD_WriteCommand>
 856:	08 95       	ret

00000858 <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
 858:	81 31       	cpi	r24, 0x11	; 17
 85a:	18 f4       	brcc	.+6      	; 0x862 <LCD_Cursor+0xa>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 85c:	81 58       	subi	r24, 0x81	; 129
 85e:	f0 cf       	rjmp	.-32     	; 0x840 <LCD_WriteCommand>
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 860:	08 95       	ret
 862:	81 55       	subi	r24, 0x51	; 81
 864:	ed cf       	rjmp	.-38     	; 0x840 <LCD_WriteCommand>
 866:	08 95       	ret

00000868 <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 868:	84 e6       	ldi	r24, 0x64	; 100
 86a:	90 e0       	ldi	r25, 0x00	; 0
	LCD_WriteCommand(0x38);
 86c:	d6 df       	rcall	.-84     	; 0x81a <delay_ms>
	LCD_WriteCommand(0x06);
 86e:	88 e3       	ldi	r24, 0x38	; 56
	LCD_WriteCommand(0x0f);
 870:	e7 df       	rcall	.-50     	; 0x840 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 872:	86 e0       	ldi	r24, 0x06	; 6
 874:	e5 df       	rcall	.-54     	; 0x840 <LCD_WriteCommand>
	delay_ms(10);						 
 876:	8f e0       	ldi	r24, 0x0F	; 15
 878:	e3 df       	rcall	.-58     	; 0x840 <LCD_WriteCommand>
 87a:	81 e0       	ldi	r24, 0x01	; 1
 87c:	e1 df       	rcall	.-62     	; 0x840 <LCD_WriteCommand>
 87e:	8a e0       	ldi	r24, 0x0A	; 10
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	cb cf       	rjmp	.-106    	; 0x81a <delay_ms>
 884:	08 95       	ret

00000886 <LCD_WriteData>:
   CLR_BIT(CONTROL_BUS,E);
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
 886:	46 9a       	sbi	0x08, 6	; 8
   DATA_BUS = Data;
 888:	8b b9       	out	0x0b, r24	; 11
   SET_BIT(CONTROL_BUS,E);
 88a:	47 9a       	sbi	0x08, 7	; 8
   asm("nop");
 88c:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 88e:	47 98       	cbi	0x08, 7	; 8
   delay_ms(1);
 890:	81 e0       	ldi	r24, 0x01	; 1
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	c2 cf       	rjmp	.-124    	; 0x81a <delay_ms>
 896:	08 95       	ret

00000898 <LCD_DisplayString>:
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 898:	0f 93       	push	r16
 89a:	1f 93       	push	r17
 89c:	cf 93       	push	r28
 89e:	df 93       	push	r29
 8a0:	18 2f       	mov	r17, r24
   LCD_ClearScreen();
 8a2:	eb 01       	movw	r28, r22
   unsigned char c = column;
   while(*string) {
 8a4:	d6 df       	rcall	.-84     	; 0x852 <LCD_ClearScreen>
 8a6:	88 81       	ld	r24, Y
 8a8:	88 23       	and	r24, r24
      LCD_Cursor(c++);
 8aa:	51 f0       	breq	.+20     	; 0x8c0 <LCD_DisplayString+0x28>
 8ac:	01 e0       	ldi	r16, 0x01	; 1
 8ae:	01 0f       	add	r16, r17
      LCD_WriteData(*string++);
 8b0:	81 2f       	mov	r24, r17
 8b2:	d2 df       	rcall	.-92     	; 0x858 <LCD_Cursor>
 8b4:	89 91       	ld	r24, Y+

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
 8b6:	e7 df       	rcall	.-50     	; 0x886 <LCD_WriteData>
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 8b8:	10 2f       	mov	r17, r16
 8ba:	88 81       	ld	r24, Y
 8bc:	81 11       	cpse	r24, r1
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 8be:	f6 cf       	rjmp	.-20     	; 0x8ac <LCD_DisplayString+0x14>
 8c0:	df 91       	pop	r29
 8c2:	cf 91       	pop	r28
 8c4:	1f 91       	pop	r17
 8c6:	0f 91       	pop	r16
 8c8:	08 95       	ret

000008ca <TimerISR>:
	}
	return state;
};


void TimerISR() {
 8ca:	ef 92       	push	r14
 8cc:	ff 92       	push	r15
 8ce:	0f 93       	push	r16
 8d0:	1f 93       	push	r17
 8d2:	cf 93       	push	r28
 8d4:	df 93       	push	r29
 8d6:	c1 e2       	ldi	r28, 0x21	; 33
 8d8:	d1 e0       	ldi	r29, 0x01	; 1
 8da:	0f 2e       	mov	r0, r31
 8dc:	f1 e5       	ldi	r31, 0x51	; 81
 8de:	ef 2e       	mov	r14, r31
 8e0:	f1 e0       	ldi	r31, 0x01	; 1
 8e2:	ff 2e       	mov	r15, r31
 8e4:	f0 2d       	mov	r31, r0
 8e6:	8e 01       	movw	r16, r28
	unsigned char i;
	for(i = 0; i < tasksNum; ++i) { // Heart of the scheduler code
		if (tasks[i].elapsedTime >= tasks[i].period)
 8e8:	4e 81       	ldd	r20, Y+6	; 0x06
 8ea:	5f 81       	ldd	r21, Y+7	; 0x07
 8ec:	68 85       	ldd	r22, Y+8	; 0x08
 8ee:	79 85       	ldd	r23, Y+9	; 0x09
 8f0:	8a 81       	ldd	r24, Y+2	; 0x02
 8f2:	9b 81       	ldd	r25, Y+3	; 0x03
 8f4:	ac 81       	ldd	r26, Y+4	; 0x04
 8f6:	bd 81       	ldd	r27, Y+5	; 0x05
 8f8:	48 17       	cp	r20, r24
 8fa:	59 07       	cpc	r21, r25
 8fc:	6a 07       	cpc	r22, r26
 8fe:	7b 07       	cpc	r23, r27
 900:	58 f0       	brcs	.+22     	; 0x918 <TimerISR+0x4e>
		{ // Ready
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
 902:	ea 85       	ldd	r30, Y+10	; 0x0a
 904:	fb 85       	ldd	r31, Y+11	; 0x0b
 906:	88 81       	ld	r24, Y
 908:	99 81       	ldd	r25, Y+1	; 0x01
 90a:	09 95       	icall
 90c:	99 83       	std	Y+1, r25	; 0x01
 90e:	88 83       	st	Y, r24
			tasks[i].elapsedTime = 0;
 910:	1e 82       	std	Y+6, r1	; 0x06
 912:	1f 82       	std	Y+7, r1	; 0x07
 914:	18 86       	std	Y+8, r1	; 0x08
 916:	19 86       	std	Y+9, r1	; 0x09
		}
		tasks[i].elapsedTime += tasksPeriodGCD;
 918:	f8 01       	movw	r30, r16
 91a:	86 81       	ldd	r24, Z+6	; 0x06
 91c:	97 81       	ldd	r25, Z+7	; 0x07
 91e:	a0 85       	ldd	r26, Z+8	; 0x08
 920:	b1 85       	ldd	r27, Z+9	; 0x09
 922:	01 96       	adiw	r24, 0x01	; 1
 924:	a1 1d       	adc	r26, r1
 926:	b1 1d       	adc	r27, r1
 928:	86 83       	std	Z+6, r24	; 0x06
 92a:	97 83       	std	Z+7, r25	; 0x07
 92c:	a0 87       	std	Z+8, r26	; 0x08
 92e:	b1 87       	std	Z+9, r27	; 0x09
 930:	2c 96       	adiw	r28, 0x0c	; 12
};


void TimerISR() {
	unsigned char i;
	for(i = 0; i < tasksNum; ++i) { // Heart of the scheduler code
 932:	ce 15       	cp	r28, r14
 934:	df 05       	cpc	r29, r15
 936:	b9 f6       	brne	.-82     	; 0x8e6 <TimerISR+0x1c>
			tasks[i].elapsedTime = 0;
		}
		tasks[i].elapsedTime += tasksPeriodGCD;

	}
	TimerFlag = 1;
 938:	81 e0       	ldi	r24, 0x01	; 1
 93a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <TimerFlag>
}
 93e:	df 91       	pop	r29
 940:	cf 91       	pop	r28
 942:	1f 91       	pop	r17
 944:	0f 91       	pop	r16
 946:	ff 90       	pop	r15
 948:	ef 90       	pop	r14
 94a:	08 95       	ret

0000094c <__vector_13>:
//	TimerFlag = 1;
//}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 94c:	1f 92       	push	r1
 94e:	0f 92       	push	r0
 950:	0f b6       	in	r0, 0x3f	; 63
 952:	0f 92       	push	r0
 954:	11 24       	eor	r1, r1
 956:	0b b6       	in	r0, 0x3b	; 59
 958:	0f 92       	push	r0
 95a:	2f 93       	push	r18
 95c:	3f 93       	push	r19
 95e:	4f 93       	push	r20
 960:	5f 93       	push	r21
 962:	6f 93       	push	r22
 964:	7f 93       	push	r23
 966:	8f 93       	push	r24
 968:	9f 93       	push	r25
 96a:	af 93       	push	r26
 96c:	bf 93       	push	r27
 96e:	ef 93       	push	r30
 970:	ff 93       	push	r31
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 972:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <_avr_timer_cntcurr>
 976:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <_avr_timer_cntcurr+0x1>
 97a:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <_avr_timer_cntcurr+0x2>
 97e:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <_avr_timer_cntcurr+0x3>
 982:	01 97       	sbiw	r24, 0x01	; 1
 984:	a1 09       	sbc	r26, r1
 986:	b1 09       	sbc	r27, r1
 988:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <_avr_timer_cntcurr>
 98c:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <_avr_timer_cntcurr+0x1>
 990:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <_avr_timer_cntcurr+0x2>
 994:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 998:	89 2b       	or	r24, r25
 99a:	8a 2b       	or	r24, r26
 99c:	8b 2b       	or	r24, r27
		TimerISR(); 				// Call the ISR that the user uses
 99e:	89 f4       	brne	.+34     	; 0x9c2 <__vector_13+0x76>
		_avr_timer_cntcurr = _avr_timer_M;
 9a0:	94 df       	rcall	.-216    	; 0x8ca <TimerISR>
 9a2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_M>
 9a6:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_M+0x1>
 9aa:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_M+0x2>
 9ae:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_M+0x3>
 9b2:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <_avr_timer_cntcurr>
 9b6:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <_avr_timer_cntcurr+0x1>
 9ba:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <_avr_timer_cntcurr+0x2>
 9be:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <_avr_timer_cntcurr+0x3>
	}
}
 9c2:	ff 91       	pop	r31
 9c4:	ef 91       	pop	r30
 9c6:	bf 91       	pop	r27
 9c8:	af 91       	pop	r26
 9ca:	9f 91       	pop	r25
 9cc:	8f 91       	pop	r24
 9ce:	7f 91       	pop	r23
 9d0:	6f 91       	pop	r22
 9d2:	5f 91       	pop	r21
 9d4:	4f 91       	pop	r20
 9d6:	3f 91       	pop	r19
 9d8:	2f 91       	pop	r18
 9da:	0f 90       	pop	r0
 9dc:	0b be       	out	0x3b, r0	; 59
 9de:	0f 90       	pop	r0
 9e0:	0f be       	out	0x3f, r0	; 63
 9e2:	0f 90       	pop	r0
 9e4:	1f 90       	pop	r1
 9e6:	18 95       	reti

000009e8 <main>:


int main() {

	DDRA = 0xFF; PORTA = 0x00; // Initialize to output to PORT A
 9e8:	8f ef       	ldi	r24, 0xFF	; 255
 9ea:	81 b9       	out	0x01, r24	; 1
 9ec:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xFF; PORTB = 0x00;
 9ee:	84 b9       	out	0x04, r24	; 4
 9f0:	15 b8       	out	0x05, r1	; 5
	//DDRC = 0x03; PORTC = 0x04; // Before LCD implementation
	DDRC = 0xFB; PORTC = 0x04; // LCD control lines on Pin 4 and Pin 5. NES Outputs on Pin 1 and Pin 2. NES Read on Pin 3
 9f2:	9b ef       	ldi	r25, 0xFB	; 251
 9f4:	97 b9       	out	0x07, r25	; 7
 9f6:	94 e0       	ldi	r25, 0x04	; 4
 9f8:	98 b9       	out	0x08, r25	; 8
	DDRD = 0xFF; PORTD = 0x00; // LCD data lines
 9fa:	8a b9       	out	0x0a, r24	; 10
 9fc:	1b b8       	out	0x0b, r1	; 11

	unsigned char i = 0;
	tasks[i].state = P_START;
 9fe:	e1 e2       	ldi	r30, 0x21	; 33
 a00:	f1 e0       	ldi	r31, 0x01	; 1
 a02:	11 82       	std	Z+1, r1	; 0x01
 a04:	10 82       	st	Z, r1
	tasks[i].period = periodPaddle;
 a06:	82 e3       	ldi	r24, 0x32	; 50
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	a0 e0       	ldi	r26, 0x00	; 0
 a0c:	b0 e0       	ldi	r27, 0x00	; 0
 a0e:	82 83       	std	Z+2, r24	; 0x02
 a10:	93 83       	std	Z+3, r25	; 0x03
 a12:	a4 83       	std	Z+4, r26	; 0x04
 a14:	b5 83       	std	Z+5, r27	; 0x05
	tasks[i].elapsedTime = tasks[i].period;
 a16:	86 83       	std	Z+6, r24	; 0x06
 a18:	97 83       	std	Z+7, r25	; 0x07
 a1a:	a0 87       	std	Z+8, r26	; 0x08
 a1c:	b1 87       	std	Z+9, r27	; 0x09
	tasks[i].TickFct= &Paddle_Tick;
 a1e:	2e e0       	ldi	r18, 0x0E	; 14
 a20:	31 e0       	ldi	r19, 0x01	; 1
 a22:	33 87       	std	Z+11, r19	; 0x0b
 a24:	22 87       	std	Z+10, r18	; 0x0a
	++i;
	tasks[i].state = B_START;
 a26:	15 86       	std	Z+13, r1	; 0x0d
 a28:	14 86       	std	Z+12, r1	; 0x0c
	tasks[i].period = periodBall;
 a2a:	48 ec       	ldi	r20, 0xC8	; 200
 a2c:	50 e0       	ldi	r21, 0x00	; 0
 a2e:	60 e0       	ldi	r22, 0x00	; 0
 a30:	70 e0       	ldi	r23, 0x00	; 0
 a32:	46 87       	std	Z+14, r20	; 0x0e
 a34:	57 87       	std	Z+15, r21	; 0x0f
 a36:	60 8b       	std	Z+16, r22	; 0x10
 a38:	71 8b       	std	Z+17, r23	; 0x11
	tasks[i].elapsedTime = tasks[i].period;
 a3a:	42 8b       	std	Z+18, r20	; 0x12
 a3c:	53 8b       	std	Z+19, r21	; 0x13
 a3e:	64 8b       	std	Z+20, r22	; 0x14
 a40:	75 8b       	std	Z+21, r23	; 0x15
	tasks[i].TickFct= &Ball_Tick;
 a42:	25 e7       	ldi	r18, 0x75	; 117
 a44:	31 e0       	ldi	r19, 0x01	; 1
 a46:	37 8b       	std	Z+23, r19	; 0x17
 a48:	26 8b       	std	Z+22, r18	; 0x16
	++i;
	tasks[i].state = BRICK_START;
 a4a:	11 8e       	std	Z+25, r1	; 0x19
 a4c:	10 8e       	std	Z+24, r1	; 0x18
	tasks[i].period = periodBrick;
 a4e:	82 8f       	std	Z+26, r24	; 0x1a
 a50:	93 8f       	std	Z+27, r25	; 0x1b
 a52:	a4 8f       	std	Z+28, r26	; 0x1c
 a54:	b5 8f       	std	Z+29, r27	; 0x1d
	tasks[i].elapsedTime = tasks[i].period;
 a56:	86 8f       	std	Z+30, r24	; 0x1e
 a58:	97 8f       	std	Z+31, r25	; 0x1f
 a5a:	a0 a3       	std	Z+32, r26	; 0x20
 a5c:	b1 a3       	std	Z+33, r27	; 0x21
	tasks[i].TickFct= &Brick_Tick;
 a5e:	8f e5       	ldi	r24, 0x5F	; 95
 a60:	93 e0       	ldi	r25, 0x03	; 3
 a62:	93 a3       	std	Z+35, r25	; 0x23
 a64:	82 a3       	std	Z+34, r24	; 0x22
	++i;
	tasks[i].state = O_START;
 a66:	15 a2       	std	Z+37, r1	; 0x25
 a68:	14 a2       	std	Z+36, r1	; 0x24
	tasks[i].period = periodOutput;
 a6a:	81 e0       	ldi	r24, 0x01	; 1
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	a0 e0       	ldi	r26, 0x00	; 0
 a70:	b0 e0       	ldi	r27, 0x00	; 0
 a72:	86 a3       	std	Z+38, r24	; 0x26
 a74:	97 a3       	std	Z+39, r25	; 0x27
 a76:	a0 a7       	std	Z+40, r26	; 0x28
 a78:	b1 a7       	std	Z+41, r27	; 0x29
	tasks[i].elapsedTime = tasks[i].period;
 a7a:	82 a7       	std	Z+42, r24	; 0x2a
 a7c:	93 a7       	std	Z+43, r25	; 0x2b
 a7e:	a4 a7       	std	Z+44, r26	; 0x2c
 a80:	b5 a7       	std	Z+45, r27	; 0x2d
	tasks[i].TickFct= &Output_Tick;
 a82:	85 ec       	ldi	r24, 0xC5	; 197
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	97 a7       	std	Z+47, r25	; 0x2f
 a88:	86 a7       	std	Z+46, r24	; 0x2e

	

 	TimerSet(tasksPeriodGCD);
 a8a:	61 e0       	ldi	r22, 0x01	; 1
 a8c:	70 e0       	ldi	r23, 0x00	; 0
 a8e:	80 e0       	ldi	r24, 0x00	; 0
 	TimerOn();
	
	   // Initializes the LCD display
	   	LCD_init();
 a90:	90 e0       	ldi	r25, 0x00	; 0
	   	LCD_Cursor(0x01);
 a92:	8e de       	rcall	.-740    	; 0x7b0 <TimerSet>
 a94:	9e de       	rcall	.-708    	; 0x7d2 <TimerOn>
		//LCD_DisplayString(1, "Systems Online.");
		LCD_DisplayString(1, "Go to sleep now.");
 a96:	e8 de       	rcall	.-560    	; 0x868 <LCD_init>
 a98:	81 e0       	ldi	r24, 0x01	; 1
 a9a:	de de       	rcall	.-580    	; 0x858 <LCD_Cursor>
 a9c:	69 e0       	ldi	r22, 0x09	; 9
 a9e:	71 e0       	ldi	r23, 0x01	; 1

	while(1)
	{
		
		while (!TimerFlag);
 aa0:	81 e0       	ldi	r24, 0x01	; 1
 aa2:	fa de       	rcall	.-524    	; 0x898 <LCD_DisplayString>
 aa4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <TimerFlag>
		TimerFlag = 0;			
 aa8:	88 23       	and	r24, r24
 aaa:	e1 f3       	breq	.-8      	; 0xaa4 <main+0xbc>
	}
 aac:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <TimerFlag>
 ab0:	f9 cf       	rjmp	.-14     	; 0xaa4 <main+0xbc>

00000ab2 <__tablejump2__>:
 ab2:	ee 0f       	add	r30, r30
 ab4:	ff 1f       	adc	r31, r31
 ab6:	00 24       	eor	r0, r0
 ab8:	00 1c       	adc	r0, r0
 aba:	0b be       	out	0x3b, r0	; 59
 abc:	07 90       	elpm	r0, Z+
 abe:	f6 91       	elpm	r31, Z
 ac0:	e0 2d       	mov	r30, r0
 ac2:	09 94       	ijmp

00000ac4 <_exit>:
 ac4:	f8 94       	cli

00000ac6 <__stop_program>:
 ac6:	ff cf       	rjmp	.-2      	; 0xac6 <__stop_program>
