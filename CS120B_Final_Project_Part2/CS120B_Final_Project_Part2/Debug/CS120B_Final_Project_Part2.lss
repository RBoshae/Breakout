
CS120B_Final_Project_Part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000b86  00000c1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005c  0080011a  0080011a  00000c34  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c34  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001243  00000000  00000000  00000d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a30  00000000  00000000  00001fa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b4e  00000000  00000000  000029d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000244  00000000  00000000  00003528  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e6  00000000  00000000  0000376c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009e4  00000000  00000000  00003f52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004936  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	56 c0       	rjmp	.+172    	; 0xae <__ctors_end>
   2:	00 00       	nop
   4:	71 c0       	rjmp	.+226    	; 0xe8 <__bad_interrupt>
   6:	00 00       	nop
   8:	6f c0       	rjmp	.+222    	; 0xe8 <__bad_interrupt>
   a:	00 00       	nop
   c:	6d c0       	rjmp	.+218    	; 0xe8 <__bad_interrupt>
   e:	00 00       	nop
  10:	6b c0       	rjmp	.+214    	; 0xe8 <__bad_interrupt>
  12:	00 00       	nop
  14:	69 c0       	rjmp	.+210    	; 0xe8 <__bad_interrupt>
  16:	00 00       	nop
  18:	67 c0       	rjmp	.+206    	; 0xe8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	65 c0       	rjmp	.+202    	; 0xe8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	63 c0       	rjmp	.+198    	; 0xe8 <__bad_interrupt>
  22:	00 00       	nop
  24:	61 c0       	rjmp	.+194    	; 0xe8 <__bad_interrupt>
  26:	00 00       	nop
  28:	5f c0       	rjmp	.+190    	; 0xe8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5d c0       	rjmp	.+186    	; 0xe8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	5b c0       	rjmp	.+182    	; 0xe8 <__bad_interrupt>
  32:	00 00       	nop
  34:	ea c4       	rjmp	.+2516   	; 0xa0a <__vector_13>
  36:	00 00       	nop
  38:	57 c0       	rjmp	.+174    	; 0xe8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	55 c0       	rjmp	.+170    	; 0xe8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	53 c0       	rjmp	.+166    	; 0xe8 <__bad_interrupt>
  42:	00 00       	nop
  44:	51 c0       	rjmp	.+162    	; 0xe8 <__bad_interrupt>
  46:	00 00       	nop
  48:	4f c0       	rjmp	.+158    	; 0xe8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4d c0       	rjmp	.+154    	; 0xe8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	4b c0       	rjmp	.+150    	; 0xe8 <__bad_interrupt>
  52:	00 00       	nop
  54:	49 c0       	rjmp	.+146    	; 0xe8 <__bad_interrupt>
  56:	00 00       	nop
  58:	47 c0       	rjmp	.+142    	; 0xe8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	45 c0       	rjmp	.+138    	; 0xe8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	43 c0       	rjmp	.+134    	; 0xe8 <__bad_interrupt>
  62:	00 00       	nop
  64:	41 c0       	rjmp	.+130    	; 0xe8 <__bad_interrupt>
  66:	00 00       	nop
  68:	3f c0       	rjmp	.+126    	; 0xe8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3d c0       	rjmp	.+122    	; 0xe8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	3b c0       	rjmp	.+118    	; 0xe8 <__bad_interrupt>
  72:	00 00       	nop
  74:	39 c0       	rjmp	.+114    	; 0xe8 <__bad_interrupt>
  76:	00 00       	nop
  78:	37 c0       	rjmp	.+110    	; 0xe8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	35 c0       	rjmp	.+106    	; 0xe8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	33 c0       	rjmp	.+102    	; 0xe8 <__bad_interrupt>
  82:	00 00       	nop
  84:	31 c0       	rjmp	.+98     	; 0xe8 <__bad_interrupt>
  86:	00 00       	nop
  88:	2f c0       	rjmp	.+94     	; 0xe8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	ee 02       	muls	r30, r30
  8e:	f3 02       	muls	r31, r19
  90:	f8 02       	muls	r31, r24
  92:	fc 02       	muls	r31, r28
  94:	29 03       	fmul	r18, r17
  96:	37 03       	mulsu	r19, r23
  98:	a5 03       	fmuls	r18, r21
  9a:	10 04       	cpc	r1, r0
  9c:	30 04       	cpc	r3, r0
  9e:	62 04       	cpc	r6, r2
  a0:	ac 04       	cpc	r10, r12
  a2:	69 04       	cpc	r6, r9
  a4:	6f 04       	cpc	r6, r15
  a6:	77 04       	cpc	r7, r7
  a8:	93 04       	cpc	r9, r3
  aa:	85 04       	cpc	r8, r5
  ac:	9f 04       	cpc	r9, r15

000000ae <__ctors_end>:
  ae:	11 24       	eor	r1, r1
  b0:	1f be       	out	0x3f, r1	; 63
  b2:	cf ef       	ldi	r28, 0xFF	; 255
  b4:	d0 e4       	ldi	r29, 0x40	; 64
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	cd bf       	out	0x3d, r28	; 61

000000ba <__do_copy_data>:
  ba:	11 e0       	ldi	r17, 0x01	; 1
  bc:	a0 e0       	ldi	r26, 0x00	; 0
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	e6 e8       	ldi	r30, 0x86	; 134
  c2:	fb e0       	ldi	r31, 0x0B	; 11
  c4:	00 e0       	ldi	r16, 0x00	; 0
  c6:	0b bf       	out	0x3b, r16	; 59
  c8:	02 c0       	rjmp	.+4      	; 0xce <__do_copy_data+0x14>
  ca:	07 90       	elpm	r0, Z+
  cc:	0d 92       	st	X+, r0
  ce:	aa 31       	cpi	r26, 0x1A	; 26
  d0:	b1 07       	cpc	r27, r17
  d2:	d9 f7       	brne	.-10     	; 0xca <__do_copy_data+0x10>

000000d4 <__do_clear_bss>:
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	aa e1       	ldi	r26, 0x1A	; 26
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	01 c0       	rjmp	.+2      	; 0xde <.do_clear_bss_start>

000000dc <.do_clear_bss_loop>:
  dc:	1d 92       	st	X+, r1

000000de <.do_clear_bss_start>:
  de:	a6 37       	cpi	r26, 0x76	; 118
  e0:	b2 07       	cpc	r27, r18
  e2:	e1 f7       	brne	.-8      	; 0xdc <.do_clear_bss_loop>
  e4:	e0 d4       	rcall	.+2496   	; 0xaa6 <main>
  e6:	4d c5       	rjmp	.+2714   	; 0xb82 <_exit>

000000e8 <__bad_interrupt>:
  e8:	8b cf       	rjmp	.-234    	; 0x0 <__vectors>

000000ea <Output_Tick>:
	//Enable global interrupts
	SREG |= 0x80;	// 0x80: 1000000
}

void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	02 97       	sbiw	r24, 0x02	; 2
  ee:	30 f5       	brcc	.+76     	; 0x13c <Output_Tick+0x52>
  f0:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <__data_end>
  f4:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <__data_end+0x1>
  f8:	ee 5a       	subi	r30, 0xAE	; 174
  fa:	fe 4f       	sbci	r31, 0xFE	; 254
  fc:	80 81       	ld	r24, Z
  fe:	82 b9       	out	0x02, r24	; 2
 100:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <__data_end>
 104:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <__data_end+0x1>
 108:	ec 59       	subi	r30, 0x9C	; 156
 10a:	fe 4f       	sbci	r31, 0xFE	; 254
 10c:	80 81       	ld	r24, Z
 10e:	85 b9       	out	0x05, r24	; 5
 110:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 114:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
 118:	81 31       	cpi	r24, 0x11	; 17
 11a:	91 05       	cpc	r25, r1
 11c:	39 f4       	brne	.+14     	; 0x12c <Output_Tick+0x42>
 11e:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <__data_end+0x1>
 122:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	08 95       	ret
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x1>
 132:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	08 95       	ret
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	08 95       	ret

00000142 <GetNESControllerButton>:
 142:	41 9a       	sbi	0x08, 1	; 8
 144:	41 98       	cbi	0x08, 1	; 8
 146:	40 e0       	ldi	r20, 0x00	; 0
 148:	50 e0       	ldi	r21, 0x00	; 0
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	26 b1       	in	r18, 0x06	; 6
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	20 95       	com	r18
 152:	30 95       	com	r19
 154:	22 fb       	bst	r18, 2
 156:	66 27       	eor	r22, r22
 158:	60 f9       	bld	r22, 0
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	9b 01       	movw	r18, r22
 15e:	04 2e       	mov	r0, r20
 160:	02 c0       	rjmp	.+4      	; 0x166 <GetNESControllerButton+0x24>
 162:	22 0f       	add	r18, r18
 164:	33 1f       	adc	r19, r19
 166:	0a 94       	dec	r0
 168:	e2 f7       	brpl	.-8      	; 0x162 <GetNESControllerButton+0x20>
 16a:	82 2b       	or	r24, r18
 16c:	40 9a       	sbi	0x08, 0	; 8
 16e:	40 98       	cbi	0x08, 0	; 8
 170:	4f 5f       	subi	r20, 0xFF	; 255
 172:	5f 4f       	sbci	r21, 0xFF	; 255
 174:	48 30       	cpi	r20, 0x08	; 8
 176:	51 05       	cpc	r21, r1
 178:	49 f7       	brne	.-46     	; 0x14c <GetNESControllerButton+0xa>
 17a:	08 95       	ret

0000017c <Paddle_Tick>:
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	ec 01       	movw	r28, r24
 182:	df df       	rcall	.-66     	; 0x142 <GetNESControllerButton>
 184:	c3 30       	cpi	r28, 0x03	; 3
 186:	d1 05       	cpc	r29, r1
 188:	a1 f0       	breq	.+40     	; 0x1b2 <Paddle_Tick+0x36>
 18a:	3c f4       	brge	.+14     	; 0x19a <Paddle_Tick+0x1e>
 18c:	c1 30       	cpi	r28, 0x01	; 1
 18e:	d1 05       	cpc	r29, r1
 190:	69 f1       	breq	.+90     	; 0x1ec <Paddle_Tick+0x70>
 192:	c2 30       	cpi	r28, 0x02	; 2
 194:	d1 05       	cpc	r29, r1
 196:	49 f0       	breq	.+18     	; 0x1aa <Paddle_Tick+0x2e>
 198:	20 c0       	rjmp	.+64     	; 0x1da <Paddle_Tick+0x5e>
 19a:	c6 30       	cpi	r28, 0x06	; 6
 19c:	d1 05       	cpc	r29, r1
 19e:	0c f4       	brge	.+2      	; 0x1a2 <Paddle_Tick+0x26>
 1a0:	46 c0       	rjmp	.+140    	; 0x22e <Paddle_Tick+0xb2>
 1a2:	c6 30       	cpi	r28, 0x06	; 6
 1a4:	d1 05       	cpc	r29, r1
 1a6:	51 f0       	breq	.+20     	; 0x1bc <Paddle_Tick+0x40>
 1a8:	18 c0       	rjmp	.+48     	; 0x1da <Paddle_Tick+0x5e>
 1aa:	88 30       	cpi	r24, 0x08	; 8
 1ac:	09 f0       	breq	.+2      	; 0x1b0 <Paddle_Tick+0x34>
 1ae:	41 c0       	rjmp	.+130    	; 0x232 <Paddle_Tick+0xb6>
 1b0:	1d c0       	rjmp	.+58     	; 0x1ec <Paddle_Tick+0x70>
 1b2:	80 34       	cpi	r24, 0x40	; 64
 1b4:	01 f1       	breq	.+64     	; 0x1f6 <Paddle_Tick+0x7a>
 1b6:	80 38       	cpi	r24, 0x80	; 128
 1b8:	c9 f4       	brne	.+50     	; 0x1ec <Paddle_Tick+0x70>
 1ba:	28 c0       	rjmp	.+80     	; 0x20c <Paddle_Tick+0x90>
 1bc:	88 23       	and	r24, r24
 1be:	b1 f0       	breq	.+44     	; 0x1ec <Paddle_Tick+0x70>
 1c0:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <button_hold_count.1913>
 1c4:	92 30       	cpi	r25, 0x02	; 2
 1c6:	20 f4       	brcc	.+8      	; 0x1d0 <Paddle_Tick+0x54>
 1c8:	9f 5f       	subi	r25, 0xFF	; 255
 1ca:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <button_hold_count.1913>
 1ce:	31 c0       	rjmp	.+98     	; 0x232 <Paddle_Tick+0xb6>
 1d0:	80 34       	cpi	r24, 0x40	; 64
 1d2:	89 f0       	breq	.+34     	; 0x1f6 <Paddle_Tick+0x7a>
 1d4:	80 38       	cpi	r24, 0x80	; 128
 1d6:	69 f5       	brne	.+90     	; 0x232 <Paddle_Tick+0xb6>
 1d8:	19 c0       	rjmp	.+50     	; 0x20c <Paddle_Tick+0x90>
 1da:	80 e8       	ldi	r24, 0x80	; 128
 1dc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <bottom_row.1911>
 1e0:	88 ef       	ldi	r24, 0xF8	; 248
 1e2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <paddle_pos.1912>
 1e6:	c1 e0       	ldi	r28, 0x01	; 1
 1e8:	d0 e0       	ldi	r29, 0x00	; 0
 1ea:	23 c0       	rjmp	.+70     	; 0x232 <Paddle_Tick+0xb6>
 1ec:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <button_hold_count.1913>
 1f0:	c3 e0       	ldi	r28, 0x03	; 3
 1f2:	d0 e0       	ldi	r29, 0x00	; 0
 1f4:	1e c0       	rjmp	.+60     	; 0x232 <Paddle_Tick+0xb6>
 1f6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <paddle_pos.1912>
 1fa:	8f 31       	cpi	r24, 0x1F	; 31
 1fc:	91 f0       	breq	.+36     	; 0x222 <Paddle_Tick+0xa6>
 1fe:	88 0f       	add	r24, r24
 200:	81 60       	ori	r24, 0x01	; 1
 202:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <paddle_pos.1912>
 206:	c4 e0       	ldi	r28, 0x04	; 4
 208:	d0 e0       	ldi	r29, 0x00	; 0
 20a:	13 c0       	rjmp	.+38     	; 0x232 <Paddle_Tick+0xb6>
 20c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <paddle_pos.1912>
 210:	88 3f       	cpi	r24, 0xF8	; 248
 212:	51 f0       	breq	.+20     	; 0x228 <Paddle_Tick+0xac>
 214:	86 95       	lsr	r24
 216:	80 68       	ori	r24, 0x80	; 128
 218:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <paddle_pos.1912>
 21c:	c5 e0       	ldi	r28, 0x05	; 5
 21e:	d0 e0       	ldi	r29, 0x00	; 0
 220:	08 c0       	rjmp	.+16     	; 0x232 <Paddle_Tick+0xb6>
 222:	c4 e0       	ldi	r28, 0x04	; 4
 224:	d0 e0       	ldi	r29, 0x00	; 0
 226:	05 c0       	rjmp	.+10     	; 0x232 <Paddle_Tick+0xb6>
 228:	c5 e0       	ldi	r28, 0x05	; 5
 22a:	d0 e0       	ldi	r29, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <Paddle_Tick+0xb6>
 22e:	c6 e0       	ldi	r28, 0x06	; 6
 230:	d0 e0       	ldi	r29, 0x00	; 0
 232:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <bottom_row.1911>
 236:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <DISPLAY_PORTA>
 23a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <paddle_pos.1912>
 23e:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <DISPLAY_PORTB>
 242:	ce 01       	movw	r24, r28
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	08 95       	ret

0000024a <Brick_Tick>:
 24a:	ef 92       	push	r14
 24c:	ff 92       	push	r15
 24e:	0f 93       	push	r16
 250:	1f 93       	push	r17
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	ec 01       	movw	r28, r24
 258:	74 df       	rcall	.-280    	; 0x142 <GetNESControllerButton>
 25a:	c2 30       	cpi	r28, 0x02	; 2
 25c:	d1 05       	cpc	r29, r1
 25e:	39 f0       	breq	.+14     	; 0x26e <Brick_Tick+0x24>
 260:	c3 30       	cpi	r28, 0x03	; 3
 262:	d1 05       	cpc	r29, r1
 264:	09 f4       	brne	.+2      	; 0x268 <Brick_Tick+0x1e>
 266:	62 c0       	rjmp	.+196    	; 0x32c <Brick_Tick+0xe2>
 268:	21 97       	sbiw	r28, 0x01	; 1
 26a:	29 f4       	brne	.+10     	; 0x276 <Brick_Tick+0x2c>
 26c:	5a c0       	rjmp	.+180    	; 0x322 <Brick_Tick+0xd8>
 26e:	88 30       	cpi	r24, 0x08	; 8
 270:	09 f0       	breq	.+2      	; 0x274 <Brick_Tick+0x2a>
 272:	5c c0       	rjmp	.+184    	; 0x32c <Brick_Tick+0xe2>
 274:	59 c0       	rjmp	.+178    	; 0x328 <Brick_Tick+0xde>
 276:	28 ef       	ldi	r18, 0xF8	; 248
 278:	3f ef       	ldi	r19, 0xFF	; 255
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	68 94       	set
 280:	ee 24       	eor	r14, r14
 282:	e1 f8       	bld	r14, 1
 284:	02 e1       	ldi	r16, 0x12	; 18
 286:	10 e0       	ldi	r17, 0x00	; 0
 288:	cf ef       	ldi	r28, 0xFF	; 255
 28a:	d0 e0       	ldi	r29, 0x00	; 0
 28c:	af e7       	ldi	r26, 0x7F	; 127
 28e:	b0 e0       	ldi	r27, 0x00	; 0
 290:	ff 24       	eor	r15, r15
 292:	f3 94       	inc	r15
 294:	8a 30       	cpi	r24, 0x0A	; 10
 296:	91 05       	cpc	r25, r1
 298:	f4 f4       	brge	.+60     	; 0x2d6 <Brick_Tick+0x8c>
 29a:	fc 01       	movw	r30, r24
 29c:	ee 5a       	subi	r30, 0xAE	; 174
 29e:	fe 4f       	sbci	r31, 0xFE	; 254
 2a0:	f0 82       	st	Z, r15
 2a2:	ac 01       	movw	r20, r24
 2a4:	42 50       	subi	r20, 0x02	; 2
 2a6:	51 09       	sbc	r21, r1
 2a8:	bd 01       	movw	r22, r26
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <Brick_Tick+0x66>
 2ac:	75 95       	asr	r23
 2ae:	67 95       	ror	r22
 2b0:	4a 95       	dec	r20
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <Brick_Tick+0x62>
 2b4:	44 27       	eor	r20, r20
 2b6:	55 27       	eor	r21, r21
 2b8:	42 1b       	sub	r20, r18
 2ba:	53 0b       	sbc	r21, r19
 2bc:	fe 01       	movw	r30, r28
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <Brick_Tick+0x7a>
 2c0:	ee 0f       	add	r30, r30
 2c2:	ff 1f       	adc	r31, r31
 2c4:	4a 95       	dec	r20
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <Brick_Tick+0x76>
 2c8:	af 01       	movw	r20, r30
 2ca:	46 2b       	or	r20, r22
 2cc:	fc 01       	movw	r30, r24
 2ce:	ec 59       	subi	r30, 0x9C	; 156
 2d0:	fe 4f       	sbci	r31, 0xFE	; 254
 2d2:	40 83       	st	Z, r20
 2d4:	1c c0       	rjmp	.+56     	; 0x30e <Brick_Tick+0xc4>
 2d6:	28 30       	cpi	r18, 0x08	; 8
 2d8:	31 05       	cpc	r19, r1
 2da:	c8 f4       	brcc	.+50     	; 0x30e <Brick_Tick+0xc4>
 2dc:	fc 01       	movw	r30, r24
 2de:	ee 5a       	subi	r30, 0xAE	; 174
 2e0:	fe 4f       	sbci	r31, 0xFE	; 254
 2e2:	e0 82       	st	Z, r14
 2e4:	a8 01       	movw	r20, r16
 2e6:	48 1b       	sub	r20, r24
 2e8:	59 0b       	sbc	r21, r25
 2ea:	be 01       	movw	r22, r28
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <Brick_Tick+0xa8>
 2ee:	66 0f       	add	r22, r22
 2f0:	77 1f       	adc	r23, r23
 2f2:	4a 95       	dec	r20
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <Brick_Tick+0xa4>
 2f6:	ad 01       	movw	r20, r26
 2f8:	02 2e       	mov	r0, r18
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <Brick_Tick+0xb6>
 2fc:	55 95       	asr	r21
 2fe:	47 95       	ror	r20
 300:	0a 94       	dec	r0
 302:	e2 f7       	brpl	.-8      	; 0x2fc <Brick_Tick+0xb2>
 304:	46 2b       	or	r20, r22
 306:	fc 01       	movw	r30, r24
 308:	ec 59       	subi	r30, 0x9C	; 156
 30a:	fe 4f       	sbci	r31, 0xFE	; 254
 30c:	40 83       	st	Z, r20
 30e:	01 96       	adiw	r24, 0x01	; 1
 310:	2f 5f       	subi	r18, 0xFF	; 255
 312:	3f 4f       	sbci	r19, 0xFF	; 255
 314:	82 31       	cpi	r24, 0x12	; 18
 316:	91 05       	cpc	r25, r1
 318:	09 f0       	breq	.+2      	; 0x31c <Brick_Tick+0xd2>
 31a:	bc cf       	rjmp	.-136    	; 0x294 <Brick_Tick+0x4a>
 31c:	c1 e0       	ldi	r28, 0x01	; 1
 31e:	d0 e0       	ldi	r29, 0x00	; 0
 320:	05 c0       	rjmp	.+10     	; 0x32c <Brick_Tick+0xe2>
 322:	c2 e0       	ldi	r28, 0x02	; 2
 324:	d0 e0       	ldi	r29, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <Brick_Tick+0xe2>
 328:	c3 e0       	ldi	r28, 0x03	; 3
 32a:	d0 e0       	ldi	r29, 0x00	; 0
 32c:	ce 01       	movw	r24, r28
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	1f 91       	pop	r17
 334:	0f 91       	pop	r16
 336:	ff 90       	pop	r15
 338:	ef 90       	pop	r14
 33a:	08 95       	ret

0000033c <TimerSet>:
 33c:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <_avr_timer_M>
 340:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <_avr_timer_M+0x1>
 344:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_M+0x2>
 348:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_M+0x3>
 34c:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <_avr_timer_cntcurr>
 350:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <_avr_timer_cntcurr+0x1>
 354:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <_avr_timer_cntcurr+0x2>
 358:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <_avr_timer_cntcurr+0x3>
 35c:	08 95       	ret

0000035e <TimerOn>:
 35e:	8b e0       	ldi	r24, 0x0B	; 11
 360:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 364:	8d e7       	ldi	r24, 0x7D	; 125
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 36c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 370:	82 e0       	ldi	r24, 0x02	; 2
 372:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 376:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 37a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 37e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_M>
 382:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_M+0x1>
 386:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_M+0x2>
 38a:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_M+0x3>
 38e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <_avr_timer_cntcurr>
 392:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <_avr_timer_cntcurr+0x1>
 396:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <_avr_timer_cntcurr+0x2>
 39a:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <_avr_timer_cntcurr+0x3>
 39e:	8f b7       	in	r24, 0x3f	; 63
 3a0:	80 68       	ori	r24, 0x80	; 128
 3a2:	8f bf       	out	0x3f, r24	; 63
 3a4:	08 95       	ret

000003a6 <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 3a6:	18 16       	cp	r1, r24
 3a8:	19 06       	cpc	r1, r25
 3aa:	5c f0       	brlt	.+22     	; 0x3c2 <delay_ms+0x1c>
 3ac:	08 95       	ret
    for(j=0;j<775;j++)
  {
   asm("nop");
 3ae:	00 00       	nop
 3b0:	21 50       	subi	r18, 0x01	; 1
 3b2:	31 09       	sbc	r19, r1
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
 3b4:	e1 f7       	brne	.-8      	; 0x3ae <delay_ms+0x8>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 3b6:	4f 5f       	subi	r20, 0xFF	; 255
 3b8:	5f 4f       	sbci	r21, 0xFF	; 255
 3ba:	84 17       	cp	r24, r20
 3bc:	95 07       	cpc	r25, r21
 3be:	19 f4       	brne	.+6      	; 0x3c6 <delay_ms+0x20>
 3c0:	08 95       	ret
 3c2:	40 e0       	ldi	r20, 0x00	; 0
 3c4:	50 e0       	ldi	r21, 0x00	; 0
   }
}

void delay_ms(int miliSec) //for 8 Mhz crystal

{
 3c6:	27 e0       	ldi	r18, 0x07	; 7
 3c8:	33 e0       	ldi	r19, 0x03	; 3
 3ca:	f1 cf       	rjmp	.-30     	; 0x3ae <delay_ms+0x8>

000003cc <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);						 
}

void LCD_WriteCommand (unsigned char Command) {
   CLR_BIT(CONTROL_BUS,RS);
 3cc:	46 98       	cbi	0x08, 6	; 8
   DATA_BUS = Command;
 3ce:	8b b9       	out	0x0b, r24	; 11
   SET_BIT(CONTROL_BUS,E);
 3d0:	47 9a       	sbi	0x08, 7	; 8
   asm("nop");
 3d2:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 3d4:	47 98       	cbi	0x08, 7	; 8
   delay_ms(2); // ClearScreen requires 1.52ms to execute
 3d6:	82 e0       	ldi	r24, 0x02	; 2
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	e5 cf       	rjmp	.-54     	; 0x3a6 <delay_ms>
 3dc:	08 95       	ret

000003de <LCD_ClearScreen>:
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	f5 cf       	rjmp	.-22     	; 0x3cc <LCD_WriteCommand>
 3e2:	08 95       	ret

000003e4 <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
 3e4:	81 31       	cpi	r24, 0x11	; 17
 3e6:	18 f4       	brcc	.+6      	; 0x3ee <LCD_Cursor+0xa>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 3e8:	81 58       	subi	r24, 0x81	; 129
 3ea:	f0 cf       	rjmp	.-32     	; 0x3cc <LCD_WriteCommand>
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 3ec:	08 95       	ret
 3ee:	81 55       	subi	r24, 0x51	; 81
 3f0:	ed cf       	rjmp	.-38     	; 0x3cc <LCD_WriteCommand>
 3f2:	08 95       	ret

000003f4 <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 3f4:	84 e6       	ldi	r24, 0x64	; 100
 3f6:	90 e0       	ldi	r25, 0x00	; 0
	LCD_WriteCommand(0x38);
 3f8:	d6 df       	rcall	.-84     	; 0x3a6 <delay_ms>
	LCD_WriteCommand(0x06);
 3fa:	88 e3       	ldi	r24, 0x38	; 56
	LCD_WriteCommand(0x0f);
 3fc:	e7 df       	rcall	.-50     	; 0x3cc <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 3fe:	86 e0       	ldi	r24, 0x06	; 6
 400:	e5 df       	rcall	.-54     	; 0x3cc <LCD_WriteCommand>
	delay_ms(10);						 
 402:	8f e0       	ldi	r24, 0x0F	; 15
 404:	e3 df       	rcall	.-58     	; 0x3cc <LCD_WriteCommand>
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	e1 df       	rcall	.-62     	; 0x3cc <LCD_WriteCommand>
 40a:	8a e0       	ldi	r24, 0x0A	; 10
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	cb cf       	rjmp	.-106    	; 0x3a6 <delay_ms>
 410:	08 95       	ret

00000412 <LCD_WriteData>:
   CLR_BIT(CONTROL_BUS,E);
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
 412:	46 9a       	sbi	0x08, 6	; 8
   DATA_BUS = Data;
 414:	8b b9       	out	0x0b, r24	; 11
   SET_BIT(CONTROL_BUS,E);
 416:	47 9a       	sbi	0x08, 7	; 8
   asm("nop");
 418:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 41a:	47 98       	cbi	0x08, 7	; 8
   delay_ms(1);
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	c2 cf       	rjmp	.-124    	; 0x3a6 <delay_ms>
 422:	08 95       	ret

00000424 <LCD_DisplayString>:
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 424:	0f 93       	push	r16
 426:	1f 93       	push	r17
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
 42c:	18 2f       	mov	r17, r24
   LCD_ClearScreen();
 42e:	eb 01       	movw	r28, r22
   unsigned char c = column;
   while(*string) {
 430:	d6 df       	rcall	.-84     	; 0x3de <LCD_ClearScreen>
 432:	88 81       	ld	r24, Y
 434:	88 23       	and	r24, r24
      LCD_Cursor(c++);
 436:	51 f0       	breq	.+20     	; 0x44c <LCD_DisplayString+0x28>
 438:	01 e0       	ldi	r16, 0x01	; 1
 43a:	01 0f       	add	r16, r17
      LCD_WriteData(*string++);
 43c:	81 2f       	mov	r24, r17
 43e:	d2 df       	rcall	.-92     	; 0x3e4 <LCD_Cursor>
 440:	89 91       	ld	r24, Y+

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
 442:	e7 df       	rcall	.-50     	; 0x412 <LCD_WriteData>
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 444:	10 2f       	mov	r17, r16
 446:	88 81       	ld	r24, Y
 448:	81 11       	cpse	r24, r1
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 44a:	f6 cf       	rjmp	.-20     	; 0x438 <LCD_DisplayString+0x14>
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	1f 91       	pop	r17
 452:	0f 91       	pop	r16
 454:	08 95       	ret

00000456 <paddle_collision_detection.1955>:
	unsigned char RIGHT_WALL = 0xFE;
	
	unsigned char NES_button = GetNESControllerButton();
	
	// === Local Functions ===
	void paddle_collision_detection(){
 456:	2f 92       	push	r2
 458:	3f 92       	push	r3
 45a:	1f 93       	push	r17
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
		
		// ball is in the second row
		if (ball_row == (FLOOR>>1))
 460:	f1 01       	movw	r30, r2
 462:	83 81       	ldd	r24, Z+3	; 0x03
 464:	86 95       	lsr	r24
 466:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <ball_row.1947>
 46a:	89 13       	cpse	r24, r25
 46c:	99 c0       	rjmp	.+306    	; 0x5a0 <paddle_collision_detection.1955+0x14a>
 46e:	e1 01       	movw	r28, r2
			unsigned char collision_point = 0x00;


			for (int i = 0; i < 8; i++)
			{
				ballBit = (ball_column >> i) & 0x01;
 470:	30 90 00 01 	lds	r3, 0x0100	; 0x800100 <__data_start>
 474:	a3 2d       	mov	r26, r3
 476:	b0 e0       	ldi	r27, 0x00	; 0
 478:	20 e0       	ldi	r18, 0x00	; 0
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	10 e0       	ldi	r17, 0x00	; 0
				DISPLAY_PORTB_BIT = (DISPLAY_PORTB[0] >> i) & 0x01;
 47e:	e4 e6       	ldi	r30, 0x64	; 100
 480:	f1 e0       	ldi	r31, 0x01	; 1
			unsigned char collision_point = 0x00;


			for (int i = 0; i < 8; i++)
			{
				ballBit = (ball_column >> i) & 0x01;
 482:	ad 01       	movw	r20, r26
 484:	02 2e       	mov	r0, r18
 486:	02 c0       	rjmp	.+4      	; 0x48c <paddle_collision_detection.1955+0x36>
 488:	55 95       	asr	r21
 48a:	47 95       	ror	r20
 48c:	0a 94       	dec	r0
 48e:	e2 f7       	brpl	.-8      	; 0x488 <paddle_collision_detection.1955+0x32>
				DISPLAY_PORTB_BIT = (DISPLAY_PORTB[0] >> i) & 0x01;
 490:	80 81       	ld	r24, Z
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	02 2e       	mov	r0, r18
 496:	02 c0       	rjmp	.+4      	; 0x49c <paddle_collision_detection.1955+0x46>
 498:	95 95       	asr	r25
 49a:	87 95       	ror	r24
 49c:	0a 94       	dec	r0
 49e:	e2 f7       	brpl	.-8      	; 0x498 <paddle_collision_detection.1955+0x42>
 4a0:	78 2f       	mov	r23, r24
 4a2:	71 70       	andi	r23, 0x01	; 1

				if ((ballBit == 0x01) && (DISPLAY_PORTB_BIT == 0x00))
 4a4:	64 2f       	mov	r22, r20
 4a6:	61 70       	andi	r22, 0x01	; 1
 4a8:	40 ff       	sbrs	r20, 0
 4aa:	04 c0       	rjmp	.+8      	; 0x4b4 <paddle_collision_detection.1955+0x5e>
 4ac:	71 11       	cpse	r23, r1
 4ae:	32 c0       	rjmp	.+100    	; 0x514 <paddle_collision_detection.1955+0xbe>
				{
					collision_point++; 	
 4b0:	1f 5f       	subi	r17, 0xFF	; 255
 4b2:	34 c0       	rjmp	.+104    	; 0x51c <paddle_collision_detection.1955+0xc6>
					
				}
				// Ball is either above left or above right from the paddle. 
				else if ((ballBit == 0x00) && (DISPLAY_PORTB_BIT == 0x01))
 4b4:	61 11       	cpse	r22, r1
 4b6:	2e c0       	rjmp	.+92     	; 0x514 <paddle_collision_detection.1955+0xbe>
 4b8:	71 30       	cpi	r23, 0x01	; 1
 4ba:	61 f5       	brne	.+88     	; 0x514 <paddle_collision_detection.1955+0xbe>
				{
					// Ball is above right of paddle
					if (( /*((ball_column>>(i+1)) == 0x01 ) &&*/((DISPLAY_PORTB[0]>>(i+1))& 0x01)) == 0x00 )
 4bc:	80 81       	ld	r24, Z
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	a9 01       	movw	r20, r18
 4c2:	4f 5f       	subi	r20, 0xFF	; 255
 4c4:	5f 4f       	sbci	r21, 0xFF	; 255
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <paddle_collision_detection.1955+0x76>
 4c8:	95 95       	asr	r25
 4ca:	87 95       	ror	r24
 4cc:	4a 95       	dec	r20
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <paddle_collision_detection.1955+0x72>
 4d0:	80 fd       	sbrc	r24, 0
 4d2:	0a c0       	rjmp	.+20     	; 0x4e8 <paddle_collision_detection.1955+0x92>
					{
						if (state == B_DOWN_LEFT)
 4d4:	89 81       	ldd	r24, Y+1	; 0x01
 4d6:	9a 81       	ldd	r25, Y+2	; 0x02
 4d8:	07 97       	sbiw	r24, 0x07	; 7
 4da:	09 f0       	breq	.+2      	; 0x4de <paddle_collision_detection.1955+0x88>
 4dc:	55 c0       	rjmp	.+170    	; 0x588 <paddle_collision_detection.1955+0x132>
						{
							state = B_UP_RIGHT;
 4de:	86 e0       	ldi	r24, 0x06	; 6
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	9a 83       	std	Y+2, r25	; 0x02
 4e4:	89 83       	std	Y+1, r24	; 0x01
							collision_point = 0x08;
							break;
 4e6:	4b c0       	rjmp	.+150    	; 0x57e <paddle_collision_detection.1955+0x128>
							collision_point = 0x09;
							break;
						}
					}
					// Ball is above left of paddle
					if (( /*((ball_column>>(i+1)) == 0x01 ) &&*/((DISPLAY_PORTB[0]>>(i-1)) & 0x01)) == 0x00 )
 4e8:	80 81       	ld	r24, Z
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	a9 01       	movw	r20, r18
 4ee:	41 50       	subi	r20, 0x01	; 1
 4f0:	51 09       	sbc	r21, r1
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <paddle_collision_detection.1955+0xa2>
 4f4:	95 95       	asr	r25
 4f6:	87 95       	ror	r24
 4f8:	4a 95       	dec	r20
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <paddle_collision_detection.1955+0x9e>
 4fc:	80 fd       	sbrc	r24, 0
 4fe:	0e c0       	rjmp	.+28     	; 0x51c <paddle_collision_detection.1955+0xc6>
					{
						if (state == B_DOWN_RIGHT)
 500:	89 81       	ldd	r24, Y+1	; 0x01
 502:	9a 81       	ldd	r25, Y+2	; 0x02
 504:	08 97       	sbiw	r24, 0x08	; 8
 506:	09 f0       	breq	.+2      	; 0x50a <paddle_collision_detection.1955+0xb4>
 508:	41 c0       	rjmp	.+130    	; 0x58c <paddle_collision_detection.1955+0x136>
						{
							state = B_UP_LEFT;
 50a:	85 e0       	ldi	r24, 0x05	; 5
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	9a 83       	std	Y+2, r25	; 0x02
 510:	89 83       	std	Y+1, r24	; 0x01
							collision_point = 0x08;
							break;
 512:	35 c0       	rjmp	.+106    	; 0x57e <paddle_collision_detection.1955+0x128>
							break;
						}
					}

				}
				else if ((ballBit == 0x00) && (DISPLAY_PORTB_BIT == 0x00))
 514:	84 2b       	or	r24, r20
 516:	95 2b       	or	r25, r21
 518:	80 ff       	sbrs	r24, 0
 51a:	06 c0       	rjmp	.+12     	; 0x528 <paddle_collision_detection.1955+0xd2>
			unsigned char ballBit;
			unsigned char DISPLAY_PORTB_BIT;
			unsigned char collision_point = 0x00;


			for (int i = 0; i < 8; i++)
 51c:	2f 5f       	subi	r18, 0xFF	; 255
 51e:	3f 4f       	sbci	r19, 0xFF	; 255
 520:	28 30       	cpi	r18, 0x08	; 8
 522:	31 05       	cpc	r19, r1
 524:	09 f0       	breq	.+2      	; 0x528 <paddle_collision_detection.1955+0xd2>
 526:	ad cf       	rjmp	.-166    	; 0x482 <paddle_collision_detection.1955+0x2c>
				}
			}

			// ===  Paddle Collision Conditions  ===
			// Ball hits right side of the paddle
			if (collision_point == 0x00)
 528:	11 11       	cpse	r17, r1
 52a:	0d c0       	rjmp	.+26     	; 0x546 <paddle_collision_detection.1955+0xf0>
			{	
				if (ball_column == RIGHT_WALL)
 52c:	88 81       	ld	r24, Y
 52e:	38 12       	cpse	r3, r24
 530:	05 c0       	rjmp	.+10     	; 0x53c <paddle_collision_detection.1955+0xe6>
				{
					state = B_UP_LEFT;
 532:	85 e0       	ldi	r24, 0x05	; 5
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	9a 83       	std	Y+2, r25	; 0x02
 538:	89 83       	std	Y+1, r24	; 0x01
 53a:	32 c0       	rjmp	.+100    	; 0x5a0 <paddle_collision_detection.1955+0x14a>
				}
				else 
				{
					state = B_UP_RIGHT;
 53c:	86 e0       	ldi	r24, 0x06	; 6
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	9a 83       	std	Y+2, r25	; 0x02
 542:	89 83       	std	Y+1, r24	; 0x01
 544:	2d c0       	rjmp	.+90     	; 0x5a0 <paddle_collision_detection.1955+0x14a>
				}
			}
			else if (collision_point == 0x01)
 546:	11 30       	cpi	r17, 0x01	; 1
 548:	89 f4       	brne	.+34     	; 0x56c <paddle_collision_detection.1955+0x116>
			{
				if (state == B_DOWN_RIGHT)
 54a:	89 81       	ldd	r24, Y+1	; 0x01
 54c:	9a 81       	ldd	r25, Y+2	; 0x02
 54e:	88 30       	cpi	r24, 0x08	; 8
 550:	91 05       	cpc	r25, r1
 552:	29 f4       	brne	.+10     	; 0x55e <paddle_collision_detection.1955+0x108>
				{
					state = B_UP_RIGHT;
 554:	86 e0       	ldi	r24, 0x06	; 6
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	9a 83       	std	Y+2, r25	; 0x02
 55a:	89 83       	std	Y+1, r24	; 0x01
 55c:	21 c0       	rjmp	.+66     	; 0x5a0 <paddle_collision_detection.1955+0x14a>
				}
				if (state == B_DOWN_LEFT)
 55e:	07 97       	sbiw	r24, 0x07	; 7
 560:	f9 f4       	brne	.+62     	; 0x5a0 <paddle_collision_detection.1955+0x14a>
				{
					state = B_UP_LEFT;
 562:	85 e0       	ldi	r24, 0x05	; 5
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	9a 83       	std	Y+2, r25	; 0x02
 568:	89 83       	std	Y+1, r24	; 0x01
 56a:	1a c0       	rjmp	.+52     	; 0x5a0 <paddle_collision_detection.1955+0x14a>
				}
			}
			else if (collision_point == 0x02) 
 56c:	12 30       	cpi	r17, 0x02	; 2
 56e:	29 f4       	brne	.+10     	; 0x57a <paddle_collision_detection.1955+0x124>
			{
				state = B_UP_LEFT;
 570:	85 e0       	ldi	r24, 0x05	; 5
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	9a 83       	std	Y+2, r25	; 0x02
 576:	89 83       	std	Y+1, r24	; 0x01
 578:	13 c0       	rjmp	.+38     	; 0x5a0 <paddle_collision_detection.1955+0x14a>
			}
			else if (collision_point == 0x08)
 57a:	18 30       	cpi	r17, 0x08	; 8
 57c:	41 f4       	brne	.+16     	; 0x58e <paddle_collision_detection.1955+0x138>
			{
				//do nothing
				LCD_Cursor(0x01);
 57e:	81 e0       	ldi	r24, 0x01	; 1
				LCD_WriteData('0'+ collision_point);
 580:	31 df       	rcall	.-414    	; 0x3e4 <LCD_Cursor>
 582:	88 e3       	ldi	r24, 0x38	; 56
 584:	46 df       	rcall	.-372    	; 0x412 <LCD_WriteData>
 586:	0c c0       	rjmp	.+24     	; 0x5a0 <paddle_collision_detection.1955+0x14a>
 588:	19 e0       	ldi	r17, 0x09	; 9
			}
			else
			{
				LCD_Cursor(0x01);
 58a:	01 c0       	rjmp	.+2      	; 0x58e <paddle_collision_detection.1955+0x138>
 58c:	19 e0       	ldi	r17, 0x09	; 9
				LCD_WriteData('0'+ collision_point);
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	29 df       	rcall	.-430    	; 0x3e4 <LCD_Cursor>
 592:	80 e3       	ldi	r24, 0x30	; 48
 594:	81 0f       	add	r24, r17
				state = B_PAUSE;
 596:	3d df       	rcall	.-390    	; 0x412 <LCD_WriteData>
 598:	82 e0       	ldi	r24, 0x02	; 2
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	9a 83       	std	Y+2, r25	; 0x02
			}
		}
	}
 59e:	89 83       	std	Y+1, r24	; 0x01
 5a0:	df 91       	pop	r29
 5a2:	cf 91       	pop	r28
 5a4:	1f 91       	pop	r17
 5a6:	3f 90       	pop	r3
 5a8:	2f 90       	pop	r2
 5aa:	08 95       	ret

000005ac <Ball_Tick>:
// ====================
enum B_States {B_START, B_INIT,B_PAUSE, B_UP, B_DOWN, B_UP_LEFT, B_UP_RIGHT, B_DOWN_LEFT, B_DOWN_RIGHT} state;



int Ball_Tick(int state) {
 5ac:	2f 92       	push	r2
 5ae:	3f 92       	push	r3
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
 5b4:	00 d0       	rcall	.+0      	; 0x5b6 <Ball_Tick+0xa>
 5b6:	00 d0       	rcall	.+0      	; 0x5b8 <Ball_Tick+0xc>
 5b8:	cd b7       	in	r28, 0x3d	; 61
 5ba:	de b7       	in	r29, 0x3e	; 62
 5bc:	9b 83       	std	Y+3, r25	; 0x03
 5be:	8a 83       	std	Y+2, r24	; 0x02
	static unsigned char ball_row = 0x40;    // ball row
	static unsigned char ball_column = 0xFB; // controls ball movement

	unsigned char ball_collision = 0x00;

	unsigned char FLOOR = 0x80;
 5c0:	80 e8       	ldi	r24, 0x80	; 128
 5c2:	8c 83       	std	Y+4, r24	; 0x04
	unsigned char CEILING = 0x01;
	unsigned char LEFT_WALL = 0x7F;
	unsigned char RIGHT_WALL = 0xFE;
 5c4:	8e ef       	ldi	r24, 0xFE	; 254
	
	unsigned char NES_button = GetNESControllerButton();
 5c6:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	}

	// === Transitions ===
	switch (state) {
 5c8:	bc dd       	rcall	.-1160   	; 0x142 <GetNESControllerButton>
 5ca:	ea 81       	ldd	r30, Y+2	; 0x02
 5cc:	fb 81       	ldd	r31, Y+3	; 0x03
 5ce:	e9 30       	cpi	r30, 0x09	; 9
 5d0:	f1 05       	cpc	r31, r1
 5d2:	08 f0       	brcs	.+2      	; 0x5d6 <Ball_Tick+0x2a>
 5d4:	67 c1       	rjmp	.+718    	; 0x8a4 <Ball_Tick+0x2f8>
 5d6:	ea 5b       	subi	r30, 0xBA	; 186
 5d8:	ff 4f       	sbci	r31, 0xFF	; 255
		case B_START:
			state = B_INIT;
 5da:	ca c2       	rjmp	.+1428   	; 0xb70 <__tablejump2__>
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	9b 83       	std	Y+3, r25	; 0x03
		break;
 5e2:	8a 83       	std	Y+2, r24	; 0x02

		case B_INIT:
			state = B_PAUSE;
 5e4:	c5 c1       	rjmp	.+906    	; 0x970 <Ball_Tick+0x3c4>
 5e6:	82 e0       	ldi	r24, 0x02	; 2
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	9b 83       	std	Y+3, r25	; 0x03
		break;
 5ec:	8a 83       	std	Y+2, r24	; 0x02

		case B_PAUSE:
			if (NES_button == (0x01 << 3))
 5ee:	bd c1       	rjmp	.+890    	; 0x96a <Ball_Tick+0x3be>
 5f0:	88 30       	cpi	r24, 0x08	; 8
 5f2:	09 f0       	breq	.+2      	; 0x5f6 <Ball_Tick+0x4a>
 5f4:	ba c1       	rjmp	.+884    	; 0x96a <Ball_Tick+0x3be>
				state = B_PAUSE;
			}
		break;

		case B_UP:
			if (ball_row == CEILING)
 5f6:	7b c1       	rjmp	.+758    	; 0x8ee <Ball_Tick+0x342>
 5f8:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <ball_row.1947>
 5fc:	41 30       	cpi	r20, 0x01	; 1
			{
				state = B_DOWN;
 5fe:	21 f4       	brne	.+8      	; 0x608 <Ball_Tick+0x5c>
 600:	84 e0       	ldi	r24, 0x04	; 4
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	9b 83       	std	Y+3, r25	; 0x03
			}
			// === UP Collision Detection ===
			for (int i = 2; i < ARRAY_SIZE; i++)
			{
				//Brick Directly Above -- works
				if ((DISPLAY_PORTA[i] & (ball_row >> 1)) && ((DISPLAY_PORTB[i] & ~ball_column) == 0))
 606:	8a 83       	std	Y+2, r24	; 0x02
 608:	46 95       	lsr	r20
 60a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 60e:	70 e0       	ldi	r23, 0x00	; 0
 610:	60 95       	com	r22
			if (ball_row == CEILING)
			{
				state = B_DOWN;
			}
			// === UP Collision Detection ===
			for (int i = 2; i < ARRAY_SIZE; i++)
 612:	70 95       	com	r23
 614:	82 e0       	ldi	r24, 0x02	; 2
			{
				//Brick Directly Above -- works
				if ((DISPLAY_PORTA[i] & (ball_row >> 1)) && ((DISPLAY_PORTB[i] & ~ball_column) == 0))
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	fc 01       	movw	r30, r24
 61a:	ee 5a       	subi	r30, 0xAE	; 174
 61c:	fe 4f       	sbci	r31, 0xFE	; 254
 61e:	20 81       	ld	r18, Z
 620:	24 23       	and	r18, r20
 622:	91 f0       	breq	.+36     	; 0x648 <Ball_Tick+0x9c>
 624:	fc 01       	movw	r30, r24
 626:	ec 59       	subi	r30, 0x9C	; 156
 628:	fe 4f       	sbci	r31, 0xFE	; 254
 62a:	20 81       	ld	r18, Z
 62c:	30 e0       	ldi	r19, 0x00	; 0
 62e:	26 23       	and	r18, r22
 630:	37 23       	and	r19, r23
 632:	23 2b       	or	r18, r19
				{
					state = B_DOWN;
					DISPLAY_PORTA[i] = 0x00;
 634:	49 f4       	brne	.+18     	; 0x648 <Ball_Tick+0x9c>
 636:	fc 01       	movw	r30, r24
 638:	ee 5a       	subi	r30, 0xAE	; 174
 63a:	fe 4f       	sbci	r31, 0xFE	; 254
					DISPLAY_PORTB[i] = 0x00;
 63c:	10 82       	st	Z, r1
 63e:	fc 01       	movw	r30, r24
 640:	ec 59       	subi	r30, 0x9C	; 156
 642:	fe 4f       	sbci	r31, 0xFE	; 254
 644:	10 82       	st	Z, r1
			if (ball_row == CEILING)
			{
				state = B_DOWN;
			}
			// === UP Collision Detection ===
			for (int i = 2; i < ARRAY_SIZE; i++)
 646:	4b c1       	rjmp	.+662    	; 0x8de <Ball_Tick+0x332>
 648:	01 96       	adiw	r24, 0x01	; 1
 64a:	82 31       	cpi	r24, 0x12	; 18
 64c:	91 05       	cpc	r25, r1
 64e:	21 f7       	brne	.-56     	; 0x618 <Ball_Tick+0x6c>
				}
			}
		break;

		case B_DOWN:
			if (ball_row == FLOOR)
 650:	2e c1       	rjmp	.+604    	; 0x8ae <Ball_Tick+0x302>
 652:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <ball_row.1947>
 656:	8c 81       	ldd	r24, Y+4	; 0x04
 658:	98 13       	cpse	r25, r24
			{
				state = B_UP;
 65a:	04 c0       	rjmp	.+8      	; 0x664 <Ball_Tick+0xb8>
 65c:	83 e0       	ldi	r24, 0x03	; 3
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	9b 83       	std	Y+3, r25	; 0x03
			}
 			// === DOWN PADDLE Collision Detection ===
			paddle_collision_detection(); 
 662:	8a 83       	std	Y+2, r24	; 0x02
 664:	ce 01       	movw	r24, r28
 666:	01 96       	adiw	r24, 0x01	; 1
 668:	1c 01       	movw	r2, r24
		break;
 66a:	f5 de       	rcall	.-534    	; 0x456 <paddle_collision_detection.1955>

		case B_UP_LEFT:
			if ((ball_column == LEFT_WALL) && (ball_row == CEILING))
 66c:	20 c1       	rjmp	.+576    	; 0x8ae <Ball_Tick+0x302>
 66e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 672:	6f 37       	cpi	r22, 0x7F	; 127
 674:	71 f4       	brne	.+28     	; 0x692 <Ball_Tick+0xe6>
 676:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_row.1947>
 67a:	81 30       	cpi	r24, 0x01	; 1
			{
				state = B_DOWN_LEFT;
 67c:	29 f4       	brne	.+10     	; 0x688 <Ball_Tick+0xdc>
 67e:	87 e0       	ldi	r24, 0x07	; 7
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	9b 83       	std	Y+3, r25	; 0x03
 684:	8a 83       	std	Y+2, r24	; 0x02
			}
			else if ((ball_column == LEFT_WALL) && (ball_row != CEILING))
			{
				state = B_UP_RIGHT;
 686:	0d c0       	rjmp	.+26     	; 0x6a2 <Ball_Tick+0xf6>
 688:	86 e0       	ldi	r24, 0x06	; 6
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	9b 83       	std	Y+3, r25	; 0x03
 68e:	8a 83       	std	Y+2, r24	; 0x02
			}
			else if ((ball_column != LEFT_WALL) && (ball_row == CEILING))
 690:	08 c0       	rjmp	.+16     	; 0x6a2 <Ball_Tick+0xf6>
 692:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_row.1947>
 696:	81 30       	cpi	r24, 0x01	; 1
			{
				state = B_DOWN_LEFT;
 698:	21 f4       	brne	.+8      	; 0x6a2 <Ball_Tick+0xf6>
 69a:	87 e0       	ldi	r24, 0x07	; 7
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	9b 83       	std	Y+3, r25	; 0x03

			// === UP LEFT Brick Collision Detection ===
			for (int i = 2; i < ARRAY_SIZE; i++)
			{
				//Brick Directly Above
				if ((DISPLAY_PORTA[i] & (ball_row >> 1)) && ((DISPLAY_PORTB[i] & ~ball_column) == 0))
 6a0:	8a 83       	std	Y+2, r24	; 0x02
 6a2:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <ball_row.1947>
			{
				state = B_DOWN;  // Debugging
			}

			// === UP LEFT Brick Collision Detection ===
			for (int i = 2; i < ARRAY_SIZE; i++)
 6a6:	46 95       	lsr	r20
 6a8:	82 e0       	ldi	r24, 0x02	; 2
			{
				//Brick Directly Above
				if ((DISPLAY_PORTA[i] & (ball_row >> 1)) && ((DISPLAY_PORTB[i] & ~ball_column) == 0))
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	a6 2f       	mov	r26, r22
 6ae:	b0 e0       	ldi	r27, 0x00	; 0
 6b0:	a0 95       	com	r26
 6b2:	b0 95       	com	r27
 6b4:	fc 01       	movw	r30, r24
 6b6:	ee 5a       	subi	r30, 0xAE	; 174
 6b8:	fe 4f       	sbci	r31, 0xFE	; 254
 6ba:	20 81       	ld	r18, Z
 6bc:	24 23       	and	r18, r20
 6be:	e9 f0       	breq	.+58     	; 0x6fa <Ball_Tick+0x14e>
 6c0:	fc 01       	movw	r30, r24
 6c2:	ec 59       	subi	r30, 0x9C	; 156
 6c4:	fe 4f       	sbci	r31, 0xFE	; 254
 6c6:	20 81       	ld	r18, Z
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	2a 23       	and	r18, r26
 6cc:	3b 23       	and	r19, r27
 6ce:	23 2b       	or	r18, r19
				{
					if (ball_column == 0x7F)
 6d0:	a1 f4       	brne	.+40     	; 0x6fa <Ball_Tick+0x14e>
 6d2:	6f 37       	cpi	r22, 0x7F	; 127
					{
						state = B_DOWN_RIGHT;	
 6d4:	29 f4       	brne	.+10     	; 0x6e0 <Ball_Tick+0x134>
 6d6:	28 e0       	ldi	r18, 0x08	; 8
 6d8:	30 e0       	ldi	r19, 0x00	; 0
 6da:	3b 83       	std	Y+3, r19	; 0x03
 6dc:	2a 83       	std	Y+2, r18	; 0x02
					}
					else
					{
						state = B_DOWN_LEFT;
 6de:	04 c0       	rjmp	.+8      	; 0x6e8 <Ball_Tick+0x13c>
 6e0:	27 e0       	ldi	r18, 0x07	; 7
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	3b 83       	std	Y+3, r19	; 0x03
					}
					DISPLAY_PORTA[i] = 0x00;
 6e6:	2a 83       	std	Y+2, r18	; 0x02
 6e8:	fc 01       	movw	r30, r24
 6ea:	ee 5a       	subi	r30, 0xAE	; 174
 6ec:	fe 4f       	sbci	r31, 0xFE	; 254
					DISPLAY_PORTB[i] = 0x00;
 6ee:	10 82       	st	Z, r1
 6f0:	fc 01       	movw	r30, r24
 6f2:	ec 59       	subi	r30, 0x9C	; 156
 6f4:	fe 4f       	sbci	r31, 0xFE	; 254
 6f6:	10 82       	st	Z, r1
			{
				state = B_DOWN;  // Debugging
			}

			// === UP LEFT Brick Collision Detection ===
			for (int i = 2; i < ARRAY_SIZE; i++)
 6f8:	da c0       	rjmp	.+436    	; 0x8ae <Ball_Tick+0x302>
 6fa:	01 96       	adiw	r24, 0x01	; 1
 6fc:	82 31       	cpi	r24, 0x12	; 18
 6fe:	91 05       	cpc	r25, r1
			// Brick Above Left, Not Directly Above
			if(ball_collision == 0x00){
				for (int h = 2; h < ARRAY_SIZE; h++)
				{
				
					if ((DISPLAY_PORTA[h] & (ball_row >> 1)) && ((DISPLAY_PORTB[h] & ((~ball_column)<<1)) == 0))
 700:	c9 f6       	brne	.-78     	; 0x6b4 <Ball_Tick+0x108>
 702:	70 e0       	ldi	r23, 0x00	; 0
 704:	60 95       	com	r22
 706:	70 95       	com	r23
 708:	66 0f       	add	r22, r22
 70a:	77 1f       	adc	r23, r23
 70c:	82 e0       	ldi	r24, 0x02	; 2
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	fc 01       	movw	r30, r24
 712:	ee 5a       	subi	r30, 0xAE	; 174
 714:	fe 4f       	sbci	r31, 0xFE	; 254
 716:	20 81       	ld	r18, Z
 718:	24 23       	and	r18, r20
 71a:	91 f0       	breq	.+36     	; 0x740 <Ball_Tick+0x194>
 71c:	fc 01       	movw	r30, r24
 71e:	ec 59       	subi	r30, 0x9C	; 156
 720:	fe 4f       	sbci	r31, 0xFE	; 254
 722:	20 81       	ld	r18, Z
 724:	30 e0       	ldi	r19, 0x00	; 0
 726:	26 23       	and	r18, r22
 728:	37 23       	and	r19, r23
 72a:	23 2b       	or	r18, r19
					{
						state = B_DOWN_RIGHT;
						DISPLAY_PORTA[h] = 0x00;
 72c:	49 f4       	brne	.+18     	; 0x740 <Ball_Tick+0x194>
 72e:	fc 01       	movw	r30, r24
 730:	ee 5a       	subi	r30, 0xAE	; 174
 732:	fe 4f       	sbci	r31, 0xFE	; 254
						DISPLAY_PORTB[h] = 0x00;
 734:	10 82       	st	Z, r1
 736:	fc 01       	movw	r30, r24
 738:	ec 59       	subi	r30, 0x9C	; 156
 73a:	fe 4f       	sbci	r31, 0xFE	; 254
 73c:	10 82       	st	Z, r1
				}
			}
			
			// Brick Above Left, Not Directly Above
			if(ball_collision == 0x00){
				for (int h = 2; h < ARRAY_SIZE; h++)
 73e:	ff c0       	rjmp	.+510    	; 0x93e <Ball_Tick+0x392>
 740:	01 96       	adiw	r24, 0x01	; 1
 742:	82 31       	cpi	r24, 0x12	; 18
 744:	91 05       	cpc	r25, r1
 746:	21 f7       	brne	.-56     	; 0x710 <Ball_Tick+0x164>
			}

		break;	

		case B_UP_RIGHT:
			if ((ball_column == RIGHT_WALL) && (ball_row == CEILING))
 748:	b2 c0       	rjmp	.+356    	; 0x8ae <Ball_Tick+0x302>
 74a:	50 91 00 01 	lds	r21, 0x0100	; 0x800100 <__data_start>
 74e:	89 81       	ldd	r24, Y+1	; 0x01
 750:	58 13       	cpse	r21, r24
 752:	0e c0       	rjmp	.+28     	; 0x770 <Ball_Tick+0x1c4>
 754:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_row.1947>
 758:	81 30       	cpi	r24, 0x01	; 1
			{
				state = B_DOWN_LEFT;
 75a:	29 f4       	brne	.+10     	; 0x766 <Ball_Tick+0x1ba>
 75c:	87 e0       	ldi	r24, 0x07	; 7
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	9b 83       	std	Y+3, r25	; 0x03
 762:	8a 83       	std	Y+2, r24	; 0x02
			}
			else if ((ball_column == RIGHT_WALL) && (ball_row != CEILING))
			{
				state = B_UP_LEFT;
 764:	0d c0       	rjmp	.+26     	; 0x780 <Ball_Tick+0x1d4>
 766:	85 e0       	ldi	r24, 0x05	; 5
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	9b 83       	std	Y+3, r25	; 0x03
 76c:	8a 83       	std	Y+2, r24	; 0x02
			}
			else if ((ball_column != RIGHT_WALL) && (ball_row == CEILING))
 76e:	08 c0       	rjmp	.+16     	; 0x780 <Ball_Tick+0x1d4>
 770:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_row.1947>
 774:	81 30       	cpi	r24, 0x01	; 1
			{
				state = B_DOWN_RIGHT;
 776:	21 f4       	brne	.+8      	; 0x780 <Ball_Tick+0x1d4>
 778:	88 e0       	ldi	r24, 0x08	; 8
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	9b 83       	std	Y+3, r25	; 0x03
			
			// === UP RIGHT BRICK Collision Detection ===
			for (int i = 2; i < ARRAY_SIZE; i++)
			{
				// Brick Directly Above
				if ((DISPLAY_PORTA[i] & (ball_row >> 1)) && ((DISPLAY_PORTB[i] & ~ball_column) == 0))
 77e:	8a 83       	std	Y+2, r24	; 0x02
 780:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <ball_row.1947>
			{
				state = B_DOWN_RIGHT;
			}
			
			// === UP RIGHT BRICK Collision Detection ===
			for (int i = 2; i < ARRAY_SIZE; i++)
 784:	46 95       	lsr	r20
 786:	82 e0       	ldi	r24, 0x02	; 2
			{
				// Brick Directly Above
				if ((DISPLAY_PORTA[i] & (ball_row >> 1)) && ((DISPLAY_PORTB[i] & ~ball_column) == 0))
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	65 2f       	mov	r22, r21
 78c:	70 e0       	ldi	r23, 0x00	; 0
 78e:	60 95       	com	r22
 790:	70 95       	com	r23
 792:	fc 01       	movw	r30, r24
 794:	ee 5a       	subi	r30, 0xAE	; 174
 796:	fe 4f       	sbci	r31, 0xFE	; 254
 798:	20 81       	ld	r18, Z
 79a:	24 23       	and	r18, r20
 79c:	e9 f0       	breq	.+58     	; 0x7d8 <Ball_Tick+0x22c>
 79e:	fc 01       	movw	r30, r24
 7a0:	ec 59       	subi	r30, 0x9C	; 156
 7a2:	fe 4f       	sbci	r31, 0xFE	; 254
 7a4:	20 81       	ld	r18, Z
 7a6:	30 e0       	ldi	r19, 0x00	; 0
 7a8:	26 23       	and	r18, r22
 7aa:	37 23       	and	r19, r23
 7ac:	23 2b       	or	r18, r19
				{
					if (ball_column == 0xFE)
 7ae:	a1 f4       	brne	.+40     	; 0x7d8 <Ball_Tick+0x22c>
 7b0:	5e 3f       	cpi	r21, 0xFE	; 254
					{
						state = B_DOWN_LEFT;
 7b2:	29 f4       	brne	.+10     	; 0x7be <Ball_Tick+0x212>
 7b4:	27 e0       	ldi	r18, 0x07	; 7
 7b6:	30 e0       	ldi	r19, 0x00	; 0
 7b8:	3b 83       	std	Y+3, r19	; 0x03
 7ba:	2a 83       	std	Y+2, r18	; 0x02
					}
					else
					{
						state = B_DOWN_RIGHT;
 7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <Ball_Tick+0x21a>
 7be:	28 e0       	ldi	r18, 0x08	; 8
 7c0:	30 e0       	ldi	r19, 0x00	; 0
 7c2:	3b 83       	std	Y+3, r19	; 0x03
					}
					DISPLAY_PORTA[i] = 0x00;
 7c4:	2a 83       	std	Y+2, r18	; 0x02
 7c6:	fc 01       	movw	r30, r24
 7c8:	ee 5a       	subi	r30, 0xAE	; 174
 7ca:	fe 4f       	sbci	r31, 0xFE	; 254
					DISPLAY_PORTB[i] = 0x00;
 7cc:	10 82       	st	Z, r1
 7ce:	fc 01       	movw	r30, r24
 7d0:	ec 59       	subi	r30, 0x9C	; 156
 7d2:	fe 4f       	sbci	r31, 0xFE	; 254
 7d4:	10 82       	st	Z, r1
			{
				state = B_DOWN_RIGHT;
			}
			
			// === UP RIGHT BRICK Collision Detection ===
			for (int i = 2; i < ARRAY_SIZE; i++)
 7d6:	6b c0       	rjmp	.+214    	; 0x8ae <Ball_Tick+0x302>
 7d8:	01 96       	adiw	r24, 0x01	; 1
 7da:	82 31       	cpi	r24, 0x12	; 18
 7dc:	91 05       	cpc	r25, r1
			// Brick Above to the Right, not directly above
			if (ball_collision == 0x00)
			{
				for (int k = 2; k < ARRAY_SIZE; k++)
				{
					if (  (DISPLAY_PORTA[k] & (ball_row >> 1)) && ((((ball_column>>1) | 0x80) & DISPLAY_PORTB[k]) == DISPLAY_PORTB[k] ))
 7de:	c9 f6       	brne	.-78     	; 0x792 <Ball_Tick+0x1e6>
 7e0:	56 95       	lsr	r21
 7e2:	50 68       	ori	r21, 0x80	; 128
 7e4:	82 e0       	ldi	r24, 0x02	; 2
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	fc 01       	movw	r30, r24
 7ea:	ee 5a       	subi	r30, 0xAE	; 174
 7ec:	fe 4f       	sbci	r31, 0xFE	; 254
 7ee:	20 81       	ld	r18, Z
 7f0:	24 23       	and	r18, r20
 7f2:	89 f0       	breq	.+34     	; 0x816 <Ball_Tick+0x26a>
 7f4:	fc 01       	movw	r30, r24
 7f6:	ec 59       	subi	r30, 0x9C	; 156
 7f8:	fe 4f       	sbci	r31, 0xFE	; 254
 7fa:	20 81       	ld	r18, Z
 7fc:	30 81       	ld	r19, Z
 7fe:	25 23       	and	r18, r21
 800:	23 13       	cpse	r18, r19
					{
						state = B_DOWN_LEFT;
						DISPLAY_PORTA[k] = 0x00;
 802:	09 c0       	rjmp	.+18     	; 0x816 <Ball_Tick+0x26a>
 804:	fc 01       	movw	r30, r24
 806:	ee 5a       	subi	r30, 0xAE	; 174
 808:	fe 4f       	sbci	r31, 0xFE	; 254
						DISPLAY_PORTB[k] = 0x00;
 80a:	10 82       	st	Z, r1
 80c:	fc 01       	movw	r30, r24
 80e:	ec 59       	subi	r30, 0x9C	; 156
 810:	fe 4f       	sbci	r31, 0xFE	; 254
 812:	10 82       	st	Z, r1
			}
			
			// Brick Above to the Right, not directly above
			if (ball_collision == 0x00)
			{
				for (int k = 2; k < ARRAY_SIZE; k++)
 814:	7a c0       	rjmp	.+244    	; 0x90a <Ball_Tick+0x35e>
 816:	01 96       	adiw	r24, 0x01	; 1
 818:	82 31       	cpi	r24, 0x12	; 18
 81a:	91 05       	cpc	r25, r1
 81c:	29 f7       	brne	.-54     	; 0x7e8 <Ball_Tick+0x23c>
				}
			}
		break;

		case  B_DOWN_LEFT:
			if ((ball_row != FLOOR) && (ball_column == LEFT_WALL))
 81e:	47 c0       	rjmp	.+142    	; 0x8ae <Ball_Tick+0x302>
 820:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <ball_row.1947>
 824:	8c 81       	ldd	r24, Y+4	; 0x04
 826:	98 17       	cp	r25, r24
 828:	49 f0       	breq	.+18     	; 0x83c <Ball_Tick+0x290>
 82a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 82e:	8f 37       	cpi	r24, 0x7F	; 127
			{
				state = B_DOWN_RIGHT;
 830:	91 f4       	brne	.+36     	; 0x856 <Ball_Tick+0x2aa>
 832:	88 e0       	ldi	r24, 0x08	; 8
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	9b 83       	std	Y+3, r25	; 0x03
 838:	8a 83       	std	Y+2, r24	; 0x02
			}
			else if ((ball_row == FLOOR) && (ball_column == LEFT_WALL))
 83a:	0d c0       	rjmp	.+26     	; 0x856 <Ball_Tick+0x2aa>
 83c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 840:	8f 37       	cpi	r24, 0x7F	; 127
			{
				state = B_UP_RIGHT;
 842:	29 f4       	brne	.+10     	; 0x84e <Ball_Tick+0x2a2>
 844:	86 e0       	ldi	r24, 0x06	; 6
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	9b 83       	std	Y+3, r25	; 0x03
 84a:	8a 83       	std	Y+2, r24	; 0x02
			}
			else if (ball_row == FLOOR)
			{
				state = B_UP_LEFT;
 84c:	04 c0       	rjmp	.+8      	; 0x856 <Ball_Tick+0x2aa>
 84e:	85 e0       	ldi	r24, 0x05	; 5
 850:	90 e0       	ldi	r25, 0x00	; 0
			}


 			// === DOWN LEFT PADDLE Collision Detection ===
			paddle_collision_detection();
 852:	9b 83       	std	Y+3, r25	; 0x03
 854:	8a 83       	std	Y+2, r24	; 0x02
 856:	ce 01       	movw	r24, r28
 858:	01 96       	adiw	r24, 0x01	; 1

		break;
 85a:	1c 01       	movw	r2, r24

		case  B_DOWN_RIGHT:
			if ((ball_column == RIGHT_WALL) && !(ball_row == FLOOR))
 85c:	fc dd       	rcall	.-1032   	; 0x456 <paddle_collision_detection.1955>
 85e:	27 c0       	rjmp	.+78     	; 0x8ae <Ball_Tick+0x302>
 860:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 864:	89 81       	ldd	r24, Y+1	; 0x01
 866:	98 13       	cpse	r25, r24
 868:	0f c0       	rjmp	.+30     	; 0x888 <Ball_Tick+0x2dc>
 86a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <ball_row.1947>
 86e:	8c 81       	ldd	r24, Y+4	; 0x04
			{
				state = B_DOWN_LEFT;
 870:	98 17       	cp	r25, r24
 872:	29 f0       	breq	.+10     	; 0x87e <Ball_Tick+0x2d2>
 874:	87 e0       	ldi	r24, 0x07	; 7
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	9b 83       	std	Y+3, r25	; 0x03
			}
			else if ((ball_column == RIGHT_WALL) && (ball_row == FLOOR))
			{
				state = B_UP_LEFT;
 87a:	8a 83       	std	Y+2, r24	; 0x02
 87c:	0e c0       	rjmp	.+28     	; 0x89a <Ball_Tick+0x2ee>
 87e:	85 e0       	ldi	r24, 0x05	; 5
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	9b 83       	std	Y+3, r25	; 0x03
			}
			else if (!(ball_column == RIGHT_WALL) && (ball_row == FLOOR))
 884:	8a 83       	std	Y+2, r24	; 0x02
 886:	09 c0       	rjmp	.+18     	; 0x89a <Ball_Tick+0x2ee>
 888:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <ball_row.1947>
 88c:	8c 81       	ldd	r24, Y+4	; 0x04
			{
				state = B_UP_RIGHT;
 88e:	98 13       	cpse	r25, r24
 890:	04 c0       	rjmp	.+8      	; 0x89a <Ball_Tick+0x2ee>
 892:	86 e0       	ldi	r24, 0x06	; 6
			}
		
 			// === DOWN RIGHT PADDLE Collision Detection ===
			paddle_collision_detection();
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	9b 83       	std	Y+3, r25	; 0x03
 898:	8a 83       	std	Y+2, r24	; 0x02
 89a:	ce 01       	movw	r24, r28
 89c:	01 96       	adiw	r24, 0x01	; 1
		break;
 89e:	1c 01       	movw	r2, r24
		
		default:
		state = B_INIT;
 8a0:	da dd       	rcall	.-1100   	; 0x456 <paddle_collision_detection.1955>
 8a2:	05 c0       	rjmp	.+10     	; 0x8ae <Ball_Tick+0x302>
 8a4:	81 e0       	ldi	r24, 0x01	; 1
 8a6:	90 e0       	ldi	r25, 0x00	; 0
		break;
 8a8:	9b 83       	std	Y+3, r25	; 0x03
	}
	
	// === Actions ===
	switch (state) {
 8aa:	8a 83       	std	Y+2, r24	; 0x02
 8ac:	61 c0       	rjmp	.+194    	; 0x970 <Ball_Tick+0x3c4>
 8ae:	8a 81       	ldd	r24, Y+2	; 0x02
 8b0:	9b 81       	ldd	r25, Y+3	; 0x03
 8b2:	fc 01       	movw	r30, r24
 8b4:	31 97       	sbiw	r30, 0x01	; 1
 8b6:	e8 30       	cpi	r30, 0x08	; 8
 8b8:	f1 05       	cpc	r31, r1
 8ba:	08 f0       	brcs	.+2      	; 0x8be <Ball_Tick+0x312>
 8bc:	4d c0       	rjmp	.+154    	; 0x958 <Ball_Tick+0x3ac>
 8be:	e1 5b       	subi	r30, 0xB1	; 177
		case B_START:
		break;

		case B_INIT:
			ball_row = 0x40; // bottom row
 8c0:	ff 4f       	sbci	r31, 0xFF	; 255
 8c2:	56 c1       	rjmp	.+684    	; 0xb70 <__tablejump2__>
 8c4:	20 e4       	ldi	r18, 0x40	; 64
			ball_column = 0xFB; // controls left right movement
 8c6:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <ball_row.1947>
 8ca:	2b ef       	ldi	r18, 0xFB	; 251
		break;
 8cc:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>

		case B_PAUSE:
		break;

		case B_UP:
			ball_row = ball_row >> 1; // bottom row
 8d0:	43 c0       	rjmp	.+134    	; 0x958 <Ball_Tick+0x3ac>
 8d2:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <ball_row.1947>
 8d6:	26 95       	lsr	r18
		break;
 8d8:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <ball_row.1947>

		case B_DOWN:
			ball_row = ball_row<<1; // bottom row
 8dc:	3d c0       	rjmp	.+122    	; 0x958 <Ball_Tick+0x3ac>
 8de:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_row.1947>
 8e2:	88 0f       	add	r24, r24
		break;
 8e4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ball_row.1947>
 8e8:	84 e0       	ldi	r24, 0x04	; 4
		
		case B_UP_LEFT:
			ball_row = ball_row >> 1;                 // Ex. 0100 0000 -> 0010 0000
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	35 c0       	rjmp	.+106    	; 0x958 <Ball_Tick+0x3ac>
 8ee:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_row.1947>
 8f2:	86 95       	lsr	r24
			ball_column = (ball_column << 1) | 0x01;  // Ex. 1111 1011 -> 1111 0111
 8f4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ball_row.1947>
 8f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 8fc:	88 0f       	add	r24, r24
 8fe:	81 60       	ori	r24, 0x01	; 1
		break;
 900:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 904:	85 e0       	ldi	r24, 0x05	; 5

		case B_DOWN_LEFT:
			ball_row = ball_row << 1;
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	27 c0       	rjmp	.+78     	; 0x958 <Ball_Tick+0x3ac>
 90a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_row.1947>
 90e:	88 0f       	add	r24, r24
			ball_column = (ball_column << 1) | 0x01;
 910:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ball_row.1947>
 914:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 918:	88 0f       	add	r24, r24
 91a:	81 60       	ori	r24, 0x01	; 1
		break;
 91c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 920:	87 e0       	ldi	r24, 0x07	; 7

		case  B_UP_RIGHT:
			ball_row = ball_row >> 1;                // Ex. 0100 0000 -> 0010 0000
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	19 c0       	rjmp	.+50     	; 0x958 <Ball_Tick+0x3ac>
 926:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <ball_row.1947>
 92a:	26 95       	lsr	r18
			ball_column = (ball_column >> 1) | 0x80; // Ex. 1111 1011 -> 1111 1101
 92c:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <ball_row.1947>
 930:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 934:	26 95       	lsr	r18
 936:	20 68       	ori	r18, 0x80	; 128
		break;
 938:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>

		case B_DOWN_RIGHT:
			ball_row = ball_row << 1;
 93c:	0d c0       	rjmp	.+26     	; 0x958 <Ball_Tick+0x3ac>
 93e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_row.1947>
 942:	88 0f       	add	r24, r24
			ball_column = (ball_column >> 1) | 0x80;
 944:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ball_row.1947>
 948:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 94c:	86 95       	lsr	r24
 94e:	80 68       	ori	r24, 0x80	; 128
		break;
 950:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		
		default:
		break;
	}

	DISPLAY_PORTA[1] =  ball_row;    // PORTA displays column pattern
 954:	88 e0       	ldi	r24, 0x08	; 8
 956:	90 e0       	ldi	r25, 0x00	; 0
 958:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <ball_row.1947>
	DISPLAY_PORTB[1] =  ball_column; // PORTB selects column to display pattern
 95c:	20 93 53 01 	sts	0x0153, r18	; 0x800153 <DISPLAY_PORTA+0x1>
 960:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
	
	return state;
 964:	20 93 65 01 	sts	0x0165, r18	; 0x800165 <DISPLAY_PORTB+0x1>
		state = B_INIT;
		break;
	}
	
	// === Actions ===
	switch (state) {
 968:	06 c0       	rjmp	.+12     	; 0x976 <Ball_Tick+0x3ca>
 96a:	8a 81       	ldd	r24, Y+2	; 0x02
 96c:	9b 81       	ldd	r25, Y+3	; 0x03
 96e:	f4 cf       	rjmp	.-24     	; 0x958 <Ball_Tick+0x3ac>
 970:	8a 81       	ldd	r24, Y+2	; 0x02
	DISPLAY_PORTA[1] =  ball_row;    // PORTA displays column pattern
	DISPLAY_PORTB[1] =  ball_column; // PORTB selects column to display pattern
	
	return state;
	
};
 972:	9b 81       	ldd	r25, Y+3	; 0x03
 974:	a7 cf       	rjmp	.-178    	; 0x8c4 <Ball_Tick+0x318>
 976:	0f 90       	pop	r0
 978:	0f 90       	pop	r0
 97a:	0f 90       	pop	r0
 97c:	0f 90       	pop	r0
 97e:	df 91       	pop	r29
 980:	cf 91       	pop	r28
 982:	3f 90       	pop	r3
 984:	2f 90       	pop	r2
 986:	08 95       	ret

00000988 <TimerISR>:
	}
	return state;
};


void TimerISR() {
 988:	ef 92       	push	r14
 98a:	ff 92       	push	r15
 98c:	0f 93       	push	r16
 98e:	1f 93       	push	r17
 990:	cf 93       	push	r28
 992:	df 93       	push	r29
 994:	c1 e2       	ldi	r28, 0x21	; 33
 996:	d1 e0       	ldi	r29, 0x01	; 1
 998:	0f 2e       	mov	r0, r31
 99a:	f1 e5       	ldi	r31, 0x51	; 81
 99c:	ef 2e       	mov	r14, r31
 99e:	f1 e0       	ldi	r31, 0x01	; 1
 9a0:	ff 2e       	mov	r15, r31
 9a2:	f0 2d       	mov	r31, r0
 9a4:	8e 01       	movw	r16, r28
	unsigned char i;
	for(i = 0; i < tasksNum; ++i) { // Heart of the scheduler code
		if (tasks[i].elapsedTime >= tasks[i].period)
 9a6:	4e 81       	ldd	r20, Y+6	; 0x06
 9a8:	5f 81       	ldd	r21, Y+7	; 0x07
 9aa:	68 85       	ldd	r22, Y+8	; 0x08
 9ac:	79 85       	ldd	r23, Y+9	; 0x09
 9ae:	8a 81       	ldd	r24, Y+2	; 0x02
 9b0:	9b 81       	ldd	r25, Y+3	; 0x03
 9b2:	ac 81       	ldd	r26, Y+4	; 0x04
 9b4:	bd 81       	ldd	r27, Y+5	; 0x05
 9b6:	48 17       	cp	r20, r24
 9b8:	59 07       	cpc	r21, r25
 9ba:	6a 07       	cpc	r22, r26
 9bc:	7b 07       	cpc	r23, r27
 9be:	58 f0       	brcs	.+22     	; 0x9d6 <TimerISR+0x4e>
		{ // Ready
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
 9c0:	ea 85       	ldd	r30, Y+10	; 0x0a
 9c2:	fb 85       	ldd	r31, Y+11	; 0x0b
 9c4:	88 81       	ld	r24, Y
 9c6:	99 81       	ldd	r25, Y+1	; 0x01
 9c8:	09 95       	icall
 9ca:	99 83       	std	Y+1, r25	; 0x01
 9cc:	88 83       	st	Y, r24
			tasks[i].elapsedTime = 0;
 9ce:	1e 82       	std	Y+6, r1	; 0x06
 9d0:	1f 82       	std	Y+7, r1	; 0x07
 9d2:	18 86       	std	Y+8, r1	; 0x08
 9d4:	19 86       	std	Y+9, r1	; 0x09
		}
		tasks[i].elapsedTime += tasksPeriodGCD;
 9d6:	f8 01       	movw	r30, r16
 9d8:	86 81       	ldd	r24, Z+6	; 0x06
 9da:	97 81       	ldd	r25, Z+7	; 0x07
 9dc:	a0 85       	ldd	r26, Z+8	; 0x08
 9de:	b1 85       	ldd	r27, Z+9	; 0x09
 9e0:	01 96       	adiw	r24, 0x01	; 1
 9e2:	a1 1d       	adc	r26, r1
 9e4:	b1 1d       	adc	r27, r1
 9e6:	86 83       	std	Z+6, r24	; 0x06
 9e8:	97 83       	std	Z+7, r25	; 0x07
 9ea:	a0 87       	std	Z+8, r26	; 0x08
 9ec:	b1 87       	std	Z+9, r27	; 0x09
 9ee:	2c 96       	adiw	r28, 0x0c	; 12
};


void TimerISR() {
	unsigned char i;
	for(i = 0; i < tasksNum; ++i) { // Heart of the scheduler code
 9f0:	ce 15       	cp	r28, r14
 9f2:	df 05       	cpc	r29, r15
 9f4:	b9 f6       	brne	.-82     	; 0x9a4 <TimerISR+0x1c>
			tasks[i].elapsedTime = 0;
		}
		tasks[i].elapsedTime += tasksPeriodGCD;

	}
	TimerFlag = 1;
 9f6:	81 e0       	ldi	r24, 0x01	; 1
 9f8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <TimerFlag>
}
 9fc:	df 91       	pop	r29
 9fe:	cf 91       	pop	r28
 a00:	1f 91       	pop	r17
 a02:	0f 91       	pop	r16
 a04:	ff 90       	pop	r15
 a06:	ef 90       	pop	r14
 a08:	08 95       	ret

00000a0a <__vector_13>:
//	TimerFlag = 1;
//}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 a0a:	1f 92       	push	r1
 a0c:	0f 92       	push	r0
 a0e:	0f b6       	in	r0, 0x3f	; 63
 a10:	0f 92       	push	r0
 a12:	11 24       	eor	r1, r1
 a14:	0b b6       	in	r0, 0x3b	; 59
 a16:	0f 92       	push	r0
 a18:	2f 93       	push	r18
 a1a:	3f 93       	push	r19
 a1c:	4f 93       	push	r20
 a1e:	5f 93       	push	r21
 a20:	6f 93       	push	r22
 a22:	7f 93       	push	r23
 a24:	8f 93       	push	r24
 a26:	9f 93       	push	r25
 a28:	af 93       	push	r26
 a2a:	bf 93       	push	r27
 a2c:	ef 93       	push	r30
 a2e:	ff 93       	push	r31
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 a30:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <_avr_timer_cntcurr>
 a34:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <_avr_timer_cntcurr+0x1>
 a38:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <_avr_timer_cntcurr+0x2>
 a3c:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <_avr_timer_cntcurr+0x3>
 a40:	01 97       	sbiw	r24, 0x01	; 1
 a42:	a1 09       	sbc	r26, r1
 a44:	b1 09       	sbc	r27, r1
 a46:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <_avr_timer_cntcurr>
 a4a:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <_avr_timer_cntcurr+0x1>
 a4e:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <_avr_timer_cntcurr+0x2>
 a52:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 a56:	89 2b       	or	r24, r25
 a58:	8a 2b       	or	r24, r26
 a5a:	8b 2b       	or	r24, r27
		TimerISR(); 				// Call the ISR that the user uses
 a5c:	89 f4       	brne	.+34     	; 0xa80 <__vector_13+0x76>
		_avr_timer_cntcurr = _avr_timer_M;
 a5e:	94 df       	rcall	.-216    	; 0x988 <TimerISR>
 a60:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_M>
 a64:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_M+0x1>
 a68:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_M+0x2>
 a6c:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_M+0x3>
 a70:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <_avr_timer_cntcurr>
 a74:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <_avr_timer_cntcurr+0x1>
 a78:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <_avr_timer_cntcurr+0x2>
 a7c:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <_avr_timer_cntcurr+0x3>
	}
}
 a80:	ff 91       	pop	r31
 a82:	ef 91       	pop	r30
 a84:	bf 91       	pop	r27
 a86:	af 91       	pop	r26
 a88:	9f 91       	pop	r25
 a8a:	8f 91       	pop	r24
 a8c:	7f 91       	pop	r23
 a8e:	6f 91       	pop	r22
 a90:	5f 91       	pop	r21
 a92:	4f 91       	pop	r20
 a94:	3f 91       	pop	r19
 a96:	2f 91       	pop	r18
 a98:	0f 90       	pop	r0
 a9a:	0b be       	out	0x3b, r0	; 59
 a9c:	0f 90       	pop	r0
 a9e:	0f be       	out	0x3f, r0	; 63
 aa0:	0f 90       	pop	r0
 aa2:	1f 90       	pop	r1
 aa4:	18 95       	reti

00000aa6 <main>:


int main() {

	DDRA = 0xFF; PORTA = 0x00; // Initialize to output to PORT A
 aa6:	8f ef       	ldi	r24, 0xFF	; 255
 aa8:	81 b9       	out	0x01, r24	; 1
 aaa:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xFF; PORTB = 0x00;
 aac:	84 b9       	out	0x04, r24	; 4
 aae:	15 b8       	out	0x05, r1	; 5
	//DDRC = 0x03; PORTC = 0x04; // Before LCD implementation
	DDRC = 0xFB; PORTC = 0x04; // LCD control lines on Pin 4 and Pin 5. NES Outputs on Pin 1 and Pin 2. NES Read on Pin 3
 ab0:	9b ef       	ldi	r25, 0xFB	; 251
 ab2:	97 b9       	out	0x07, r25	; 7
 ab4:	94 e0       	ldi	r25, 0x04	; 4
 ab6:	98 b9       	out	0x08, r25	; 8
	DDRD = 0xFF; PORTD = 0x00; // LCD data lines
 ab8:	8a b9       	out	0x0a, r24	; 10
 aba:	1b b8       	out	0x0b, r1	; 11

	unsigned char i = 0;
	tasks[i].state = P_START;
 abc:	e1 e2       	ldi	r30, 0x21	; 33
 abe:	f1 e0       	ldi	r31, 0x01	; 1
 ac0:	11 82       	std	Z+1, r1	; 0x01
 ac2:	10 82       	st	Z, r1
	tasks[i].period = periodPaddle;
 ac4:	82 e3       	ldi	r24, 0x32	; 50
 ac6:	90 e0       	ldi	r25, 0x00	; 0
 ac8:	a0 e0       	ldi	r26, 0x00	; 0
 aca:	b0 e0       	ldi	r27, 0x00	; 0
 acc:	82 83       	std	Z+2, r24	; 0x02
 ace:	93 83       	std	Z+3, r25	; 0x03
 ad0:	a4 83       	std	Z+4, r26	; 0x04
 ad2:	b5 83       	std	Z+5, r27	; 0x05
	tasks[i].elapsedTime = tasks[i].period;
 ad4:	86 83       	std	Z+6, r24	; 0x06
 ad6:	97 83       	std	Z+7, r25	; 0x07
 ad8:	a0 87       	std	Z+8, r26	; 0x08
 ada:	b1 87       	std	Z+9, r27	; 0x09
	tasks[i].TickFct= &Paddle_Tick;
 adc:	2e eb       	ldi	r18, 0xBE	; 190
 ade:	30 e0       	ldi	r19, 0x00	; 0
 ae0:	33 87       	std	Z+11, r19	; 0x0b
 ae2:	22 87       	std	Z+10, r18	; 0x0a
	++i;
	tasks[i].state = B_START;
 ae4:	15 86       	std	Z+13, r1	; 0x0d
 ae6:	14 86       	std	Z+12, r1	; 0x0c
	tasks[i].period = periodBall;
 ae8:	48 ec       	ldi	r20, 0xC8	; 200
 aea:	50 e0       	ldi	r21, 0x00	; 0
 aec:	60 e0       	ldi	r22, 0x00	; 0
 aee:	70 e0       	ldi	r23, 0x00	; 0
 af0:	46 87       	std	Z+14, r20	; 0x0e
 af2:	57 87       	std	Z+15, r21	; 0x0f
 af4:	60 8b       	std	Z+16, r22	; 0x10
 af6:	71 8b       	std	Z+17, r23	; 0x11
	tasks[i].elapsedTime = tasks[i].period;
 af8:	42 8b       	std	Z+18, r20	; 0x12
 afa:	53 8b       	std	Z+19, r21	; 0x13
 afc:	64 8b       	std	Z+20, r22	; 0x14
 afe:	75 8b       	std	Z+21, r23	; 0x15
	tasks[i].TickFct= &Ball_Tick;
 b00:	26 ed       	ldi	r18, 0xD6	; 214
 b02:	32 e0       	ldi	r19, 0x02	; 2
 b04:	37 8b       	std	Z+23, r19	; 0x17
 b06:	26 8b       	std	Z+22, r18	; 0x16
	++i;
	tasks[i].state = BRICK_START;
 b08:	11 8e       	std	Z+25, r1	; 0x19
 b0a:	10 8e       	std	Z+24, r1	; 0x18
	tasks[i].period = periodBrick;
 b0c:	82 8f       	std	Z+26, r24	; 0x1a
 b0e:	93 8f       	std	Z+27, r25	; 0x1b
 b10:	a4 8f       	std	Z+28, r26	; 0x1c
 b12:	b5 8f       	std	Z+29, r27	; 0x1d
	tasks[i].elapsedTime = tasks[i].period;
 b14:	86 8f       	std	Z+30, r24	; 0x1e
 b16:	97 8f       	std	Z+31, r25	; 0x1f
 b18:	a0 a3       	std	Z+32, r26	; 0x20
 b1a:	b1 a3       	std	Z+33, r27	; 0x21
	tasks[i].TickFct= &Brick_Tick;
 b1c:	85 e2       	ldi	r24, 0x25	; 37
 b1e:	91 e0       	ldi	r25, 0x01	; 1
 b20:	93 a3       	std	Z+35, r25	; 0x23
 b22:	82 a3       	std	Z+34, r24	; 0x22
	++i;
	tasks[i].state = O_START;
 b24:	15 a2       	std	Z+37, r1	; 0x25
 b26:	14 a2       	std	Z+36, r1	; 0x24
	tasks[i].period = periodOutput;
 b28:	81 e0       	ldi	r24, 0x01	; 1
 b2a:	90 e0       	ldi	r25, 0x00	; 0
 b2c:	a0 e0       	ldi	r26, 0x00	; 0
 b2e:	b0 e0       	ldi	r27, 0x00	; 0
 b30:	86 a3       	std	Z+38, r24	; 0x26
 b32:	97 a3       	std	Z+39, r25	; 0x27
 b34:	a0 a7       	std	Z+40, r26	; 0x28
 b36:	b1 a7       	std	Z+41, r27	; 0x29
	tasks[i].elapsedTime = tasks[i].period;
 b38:	82 a7       	std	Z+42, r24	; 0x2a
 b3a:	93 a7       	std	Z+43, r25	; 0x2b
 b3c:	a4 a7       	std	Z+44, r26	; 0x2c
 b3e:	b5 a7       	std	Z+45, r27	; 0x2d
	tasks[i].TickFct= &Output_Tick;
 b40:	85 e7       	ldi	r24, 0x75	; 117
 b42:	90 e0       	ldi	r25, 0x00	; 0
 b44:	97 a7       	std	Z+47, r25	; 0x2f
 b46:	86 a7       	std	Z+46, r24	; 0x2e

	

 	TimerSet(tasksPeriodGCD);
 b48:	61 e0       	ldi	r22, 0x01	; 1
 b4a:	70 e0       	ldi	r23, 0x00	; 0
 b4c:	80 e0       	ldi	r24, 0x00	; 0
 	TimerOn();
	
	   // Initializes the LCD display
	   	LCD_init();
 b4e:	90 e0       	ldi	r25, 0x00	; 0
	   	LCD_Cursor(0x01);
 b50:	f5 db       	rcall	.-2070   	; 0x33c <TimerSet>
 b52:	05 dc       	rcall	.-2038   	; 0x35e <TimerOn>
		//LCD_DisplayString(1, "Systems Online.");
		LCD_DisplayString(1, "Go to sleep now.");
 b54:	4f dc       	rcall	.-1890   	; 0x3f4 <LCD_init>
 b56:	81 e0       	ldi	r24, 0x01	; 1
 b58:	45 dc       	rcall	.-1910   	; 0x3e4 <LCD_Cursor>
 b5a:	69 e0       	ldi	r22, 0x09	; 9
 b5c:	71 e0       	ldi	r23, 0x01	; 1

	while(1)
	{
		
		while (!TimerFlag);
 b5e:	81 e0       	ldi	r24, 0x01	; 1
 b60:	61 dc       	rcall	.-1854   	; 0x424 <LCD_DisplayString>
 b62:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <TimerFlag>
		TimerFlag = 0;			
 b66:	88 23       	and	r24, r24
 b68:	e1 f3       	breq	.-8      	; 0xb62 <main+0xbc>
	}
 b6a:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <TimerFlag>
 b6e:	f9 cf       	rjmp	.-14     	; 0xb62 <main+0xbc>

00000b70 <__tablejump2__>:
 b70:	ee 0f       	add	r30, r30
 b72:	ff 1f       	adc	r31, r31
 b74:	00 24       	eor	r0, r0
 b76:	00 1c       	adc	r0, r0
 b78:	0b be       	out	0x3b, r0	; 59
 b7a:	07 90       	elpm	r0, Z+
 b7c:	f6 91       	elpm	r31, Z
 b7e:	e0 2d       	mov	r30, r0
 b80:	09 94       	ijmp

00000b82 <_exit>:
 b82:	f8 94       	cli

00000b84 <__stop_program>:
 b84:	ff cf       	rjmp	.-2      	; 0xb84 <__stop_program>
