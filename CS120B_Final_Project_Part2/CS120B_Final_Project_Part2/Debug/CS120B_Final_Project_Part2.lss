
CS120B_Final_Project_Part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000060c  000006a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000060c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003f  0080010a  0080010a  000006aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e6b  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f9  00000000  00000000  00001607  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a7  00000000  00000000  00002000  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  000026a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000796  00000000  00000000  00002818  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000512  00000000  00000000  00002fae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000034c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	3d c2       	rjmp	.+1146   	; 0x4b0 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e0       	ldi	r30, 0x0C	; 12
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 34       	cpi	r26, 0x49	; 73
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	44 d2       	rcall	.+1160   	; 0x54c <main>
  c4:	a1 c2       	rjmp	.+1346   	; 0x608 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Output_Tick>:
	//Enable global interrupts
	SREG |= 0x80;	// 0x80: 1000000
}

void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
  c8:	82 30       	cpi	r24, 0x02	; 2
  ca:	91 05       	cpc	r25, r1
  cc:	a1 f0       	breq	.+40     	; 0xf6 <Output_Tick+0x2e>
  ce:	1c f4       	brge	.+6      	; 0xd6 <Output_Tick+0xe>
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	31 f0       	breq	.+12     	; 0xe0 <Output_Tick+0x18>
  d4:	26 c0       	rjmp	.+76     	; 0x122 <Output_Tick+0x5a>
  d6:	83 30       	cpi	r24, 0x03	; 3
  d8:	91 05       	cpc	r25, r1
  da:	c1 f0       	breq	.+48     	; 0x10c <Output_Tick+0x44>
  dc:	04 97       	sbiw	r24, 0x04	; 4
  de:	09 f5       	brne	.+66     	; 0x122 <Output_Tick+0x5a>
  e0:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <PADDLE_PORTA>
  e4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <OUTPUT_A.1759>
  e8:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <PADDLE_PORTB>
  ec:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
  f0:	22 e0       	ldi	r18, 0x02	; 2
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	18 c0       	rjmp	.+48     	; 0x126 <Output_Tick+0x5e>
  f6:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <BALL_PORTA>
  fa:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <OUTPUT_A.1759>
  fe:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <BALL_PORTB>
 102:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 106:	23 e0       	ldi	r18, 0x03	; 3
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	0d c0       	rjmp	.+26     	; 0x126 <Output_Tick+0x5e>
 10c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <BRICK_PORTA>
 110:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <OUTPUT_A.1759>
 114:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <BRICK_PORTB>
 118:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 11c:	24 e0       	ldi	r18, 0x04	; 4
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <Output_Tick+0x5e>
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <OUTPUT_A.1759>
 12a:	92 b9       	out	0x02, r25	; 2
 12c:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <__data_end>
 130:	95 b9       	out	0x05, r25	; 5
 132:	c9 01       	movw	r24, r18
 134:	08 95       	ret

00000136 <GetNESControllerButton>:
 136:	41 9a       	sbi	0x08, 1	; 8
 138:	41 98       	cbi	0x08, 1	; 8
 13a:	40 e0       	ldi	r20, 0x00	; 0
 13c:	50 e0       	ldi	r21, 0x00	; 0
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	26 b1       	in	r18, 0x06	; 6
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	20 95       	com	r18
 146:	30 95       	com	r19
 148:	22 fb       	bst	r18, 2
 14a:	66 27       	eor	r22, r22
 14c:	60 f9       	bld	r22, 0
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	9b 01       	movw	r18, r22
 152:	04 2e       	mov	r0, r20
 154:	02 c0       	rjmp	.+4      	; 0x15a <GetNESControllerButton+0x24>
 156:	22 0f       	add	r18, r18
 158:	33 1f       	adc	r19, r19
 15a:	0a 94       	dec	r0
 15c:	e2 f7       	brpl	.-8      	; 0x156 <GetNESControllerButton+0x20>
 15e:	82 2b       	or	r24, r18
 160:	40 9a       	sbi	0x08, 0	; 8
 162:	40 98       	cbi	0x08, 0	; 8
 164:	4f 5f       	subi	r20, 0xFF	; 255
 166:	5f 4f       	sbci	r21, 0xFF	; 255
 168:	48 30       	cpi	r20, 0x08	; 8
 16a:	51 05       	cpc	r21, r1
 16c:	49 f7       	brne	.-46     	; 0x140 <GetNESControllerButton+0xa>
 16e:	08 95       	ret

00000170 <Paddle_Tick>:
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	ec 01       	movw	r28, r24
 176:	df df       	rcall	.-66     	; 0x136 <GetNESControllerButton>
 178:	c3 30       	cpi	r28, 0x03	; 3
 17a:	d1 05       	cpc	r29, r1
 17c:	a1 f0       	breq	.+40     	; 0x1a6 <Paddle_Tick+0x36>
 17e:	3c f4       	brge	.+14     	; 0x18e <Paddle_Tick+0x1e>
 180:	c1 30       	cpi	r28, 0x01	; 1
 182:	d1 05       	cpc	r29, r1
 184:	69 f1       	breq	.+90     	; 0x1e0 <Paddle_Tick+0x70>
 186:	c2 30       	cpi	r28, 0x02	; 2
 188:	d1 05       	cpc	r29, r1
 18a:	49 f0       	breq	.+18     	; 0x19e <Paddle_Tick+0x2e>
 18c:	20 c0       	rjmp	.+64     	; 0x1ce <Paddle_Tick+0x5e>
 18e:	c6 30       	cpi	r28, 0x06	; 6
 190:	d1 05       	cpc	r29, r1
 192:	0c f4       	brge	.+2      	; 0x196 <Paddle_Tick+0x26>
 194:	46 c0       	rjmp	.+140    	; 0x222 <Paddle_Tick+0xb2>
 196:	c6 30       	cpi	r28, 0x06	; 6
 198:	d1 05       	cpc	r29, r1
 19a:	51 f0       	breq	.+20     	; 0x1b0 <Paddle_Tick+0x40>
 19c:	18 c0       	rjmp	.+48     	; 0x1ce <Paddle_Tick+0x5e>
 19e:	88 30       	cpi	r24, 0x08	; 8
 1a0:	09 f0       	breq	.+2      	; 0x1a4 <Paddle_Tick+0x34>
 1a2:	41 c0       	rjmp	.+130    	; 0x226 <Paddle_Tick+0xb6>
 1a4:	1d c0       	rjmp	.+58     	; 0x1e0 <Paddle_Tick+0x70>
 1a6:	80 34       	cpi	r24, 0x40	; 64
 1a8:	01 f1       	breq	.+64     	; 0x1ea <Paddle_Tick+0x7a>
 1aa:	80 38       	cpi	r24, 0x80	; 128
 1ac:	c9 f4       	brne	.+50     	; 0x1e0 <Paddle_Tick+0x70>
 1ae:	28 c0       	rjmp	.+80     	; 0x200 <Paddle_Tick+0x90>
 1b0:	88 23       	and	r24, r24
 1b2:	b1 f0       	breq	.+44     	; 0x1e0 <Paddle_Tick+0x70>
 1b4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <button_hold_count.1668>
 1b8:	92 30       	cpi	r25, 0x02	; 2
 1ba:	20 f4       	brcc	.+8      	; 0x1c4 <Paddle_Tick+0x54>
 1bc:	9f 5f       	subi	r25, 0xFF	; 255
 1be:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <button_hold_count.1668>
 1c2:	31 c0       	rjmp	.+98     	; 0x226 <Paddle_Tick+0xb6>
 1c4:	80 34       	cpi	r24, 0x40	; 64
 1c6:	89 f0       	breq	.+34     	; 0x1ea <Paddle_Tick+0x7a>
 1c8:	80 38       	cpi	r24, 0x80	; 128
 1ca:	69 f5       	brne	.+90     	; 0x226 <Paddle_Tick+0xb6>
 1cc:	19 c0       	rjmp	.+50     	; 0x200 <Paddle_Tick+0x90>
 1ce:	80 e8       	ldi	r24, 0x80	; 128
 1d0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bottom_row.1666>
 1d4:	88 ef       	ldi	r24, 0xF8	; 248
 1d6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <paddle_pos.1667>
 1da:	c1 e0       	ldi	r28, 0x01	; 1
 1dc:	d0 e0       	ldi	r29, 0x00	; 0
 1de:	23 c0       	rjmp	.+70     	; 0x226 <Paddle_Tick+0xb6>
 1e0:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <button_hold_count.1668>
 1e4:	c3 e0       	ldi	r28, 0x03	; 3
 1e6:	d0 e0       	ldi	r29, 0x00	; 0
 1e8:	1e c0       	rjmp	.+60     	; 0x226 <Paddle_Tick+0xb6>
 1ea:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <paddle_pos.1667>
 1ee:	8f 31       	cpi	r24, 0x1F	; 31
 1f0:	91 f0       	breq	.+36     	; 0x216 <Paddle_Tick+0xa6>
 1f2:	88 0f       	add	r24, r24
 1f4:	81 60       	ori	r24, 0x01	; 1
 1f6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <paddle_pos.1667>
 1fa:	c4 e0       	ldi	r28, 0x04	; 4
 1fc:	d0 e0       	ldi	r29, 0x00	; 0
 1fe:	13 c0       	rjmp	.+38     	; 0x226 <Paddle_Tick+0xb6>
 200:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <paddle_pos.1667>
 204:	88 3f       	cpi	r24, 0xF8	; 248
 206:	51 f0       	breq	.+20     	; 0x21c <Paddle_Tick+0xac>
 208:	86 95       	lsr	r24
 20a:	80 68       	ori	r24, 0x80	; 128
 20c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <paddle_pos.1667>
 210:	c5 e0       	ldi	r28, 0x05	; 5
 212:	d0 e0       	ldi	r29, 0x00	; 0
 214:	08 c0       	rjmp	.+16     	; 0x226 <Paddle_Tick+0xb6>
 216:	c4 e0       	ldi	r28, 0x04	; 4
 218:	d0 e0       	ldi	r29, 0x00	; 0
 21a:	05 c0       	rjmp	.+10     	; 0x226 <Paddle_Tick+0xb6>
 21c:	c5 e0       	ldi	r28, 0x05	; 5
 21e:	d0 e0       	ldi	r29, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <Paddle_Tick+0xb6>
 222:	c6 e0       	ldi	r28, 0x06	; 6
 224:	d0 e0       	ldi	r29, 0x00	; 0
 226:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <bottom_row.1666>
 22a:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <PADDLE_PORTA>
 22e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <paddle_pos.1667>
 232:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <PADDLE_PORTB>
 236:	ce 01       	movw	r24, r28
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <Ball_Tick>:
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	ec 01       	movw	r28, r24
 244:	78 df       	rcall	.-272    	; 0x136 <GetNESControllerButton>
 246:	c5 30       	cpi	r28, 0x05	; 5
 248:	d1 05       	cpc	r29, r1
 24a:	a1 f0       	breq	.+40     	; 0x274 <Ball_Tick+0x36>
 24c:	44 f4       	brge	.+16     	; 0x25e <Ball_Tick+0x20>
 24e:	c1 30       	cpi	r28, 0x01	; 1
 250:	d1 05       	cpc	r29, r1
 252:	09 f4       	brne	.+2      	; 0x256 <Ball_Tick+0x18>
 254:	80 c0       	rjmp	.+256    	; 0x356 <Ball_Tick+0x118>
 256:	c2 30       	cpi	r28, 0x02	; 2
 258:	d1 05       	cpc	r29, r1
 25a:	41 f0       	breq	.+16     	; 0x26c <Ball_Tick+0x2e>
 25c:	3b c0       	rjmp	.+118    	; 0x2d4 <Ball_Tick+0x96>
 25e:	c7 30       	cpi	r28, 0x07	; 7
 260:	d1 05       	cpc	r29, r1
 262:	01 f1       	breq	.+64     	; 0x2a4 <Ball_Tick+0x66>
 264:	8c f0       	brlt	.+34     	; 0x288 <Ball_Tick+0x4a>
 266:	28 97       	sbiw	r28, 0x08	; 8
 268:	39 f1       	breq	.+78     	; 0x2b8 <Ball_Tick+0x7a>
 26a:	34 c0       	rjmp	.+104    	; 0x2d4 <Ball_Tick+0x96>
 26c:	88 30       	cpi	r24, 0x08	; 8
 26e:	09 f0       	breq	.+2      	; 0x272 <Ball_Tick+0x34>
 270:	74 c0       	rjmp	.+232    	; 0x35a <Ball_Tick+0x11c>
 272:	39 c0       	rjmp	.+114    	; 0x2e6 <Ball_Tick+0xa8>
 274:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ball_column.1703>
 278:	8f 37       	cpi	r24, 0x7F	; 127
 27a:	09 f4       	brne	.+2      	; 0x27e <Ball_Tick+0x40>
 27c:	50 c0       	rjmp	.+160    	; 0x31e <Ball_Tick+0xe0>
 27e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_row.1702>
 282:	81 30       	cpi	r24, 0x01	; 1
 284:	81 f5       	brne	.+96     	; 0x2e6 <Ball_Tick+0xa8>
 286:	3d c0       	rjmp	.+122    	; 0x302 <Ball_Tick+0xc4>
 288:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ball_column.1703>
 28c:	8e 3f       	cpi	r24, 0xFE	; 254
 28e:	29 f4       	brne	.+10     	; 0x29a <Ball_Tick+0x5c>
 290:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_row.1702>
 294:	81 30       	cpi	r24, 0x01	; 1
 296:	39 f5       	brne	.+78     	; 0x2e6 <Ball_Tick+0xa8>
 298:	34 c0       	rjmp	.+104    	; 0x302 <Ball_Tick+0xc4>
 29a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_row.1702>
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	f1 f5       	brne	.+124    	; 0x31e <Ball_Tick+0xe0>
 2a2:	4b c0       	rjmp	.+150    	; 0x33a <Ball_Tick+0xfc>
 2a4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ball_column.1703>
 2a8:	8f 37       	cpi	r24, 0x7F	; 127
 2aa:	09 f4       	brne	.+2      	; 0x2ae <Ball_Tick+0x70>
 2ac:	46 c0       	rjmp	.+140    	; 0x33a <Ball_Tick+0xfc>
 2ae:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_row.1702>
 2b2:	80 34       	cpi	r24, 0x40	; 64
 2b4:	31 f5       	brne	.+76     	; 0x302 <Ball_Tick+0xc4>
 2b6:	17 c0       	rjmp	.+46     	; 0x2e6 <Ball_Tick+0xa8>
 2b8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ball_column.1703>
 2bc:	8e 3f       	cpi	r24, 0xFE	; 254
 2be:	29 f4       	brne	.+10     	; 0x2ca <Ball_Tick+0x8c>
 2c0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_row.1702>
 2c4:	80 34       	cpi	r24, 0x40	; 64
 2c6:	e9 f4       	brne	.+58     	; 0x302 <Ball_Tick+0xc4>
 2c8:	0e c0       	rjmp	.+28     	; 0x2e6 <Ball_Tick+0xa8>
 2ca:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_row.1702>
 2ce:	80 34       	cpi	r24, 0x40	; 64
 2d0:	a1 f5       	brne	.+104    	; 0x33a <Ball_Tick+0xfc>
 2d2:	25 c0       	rjmp	.+74     	; 0x31e <Ball_Tick+0xe0>
 2d4:	80 e4       	ldi	r24, 0x40	; 64
 2d6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ball_row.1702>
 2da:	8b ef       	ldi	r24, 0xFB	; 251
 2dc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ball_column.1703>
 2e0:	c1 e0       	ldi	r28, 0x01	; 1
 2e2:	d0 e0       	ldi	r29, 0x00	; 0
 2e4:	3a c0       	rjmp	.+116    	; 0x35a <Ball_Tick+0x11c>
 2e6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_row.1702>
 2ea:	86 95       	lsr	r24
 2ec:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ball_row.1702>
 2f0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ball_column.1703>
 2f4:	88 0f       	add	r24, r24
 2f6:	81 60       	ori	r24, 0x01	; 1
 2f8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ball_column.1703>
 2fc:	c5 e0       	ldi	r28, 0x05	; 5
 2fe:	d0 e0       	ldi	r29, 0x00	; 0
 300:	2c c0       	rjmp	.+88     	; 0x35a <Ball_Tick+0x11c>
 302:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_row.1702>
 306:	88 0f       	add	r24, r24
 308:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ball_row.1702>
 30c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ball_column.1703>
 310:	88 0f       	add	r24, r24
 312:	81 60       	ori	r24, 0x01	; 1
 314:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ball_column.1703>
 318:	c7 e0       	ldi	r28, 0x07	; 7
 31a:	d0 e0       	ldi	r29, 0x00	; 0
 31c:	1e c0       	rjmp	.+60     	; 0x35a <Ball_Tick+0x11c>
 31e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_row.1702>
 322:	86 95       	lsr	r24
 324:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ball_row.1702>
 328:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ball_column.1703>
 32c:	86 95       	lsr	r24
 32e:	80 68       	ori	r24, 0x80	; 128
 330:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ball_column.1703>
 334:	c6 e0       	ldi	r28, 0x06	; 6
 336:	d0 e0       	ldi	r29, 0x00	; 0
 338:	10 c0       	rjmp	.+32     	; 0x35a <Ball_Tick+0x11c>
 33a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_row.1702>
 33e:	88 0f       	add	r24, r24
 340:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ball_row.1702>
 344:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ball_column.1703>
 348:	86 95       	lsr	r24
 34a:	80 68       	ori	r24, 0x80	; 128
 34c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ball_column.1703>
 350:	c8 e0       	ldi	r28, 0x08	; 8
 352:	d0 e0       	ldi	r29, 0x00	; 0
 354:	02 c0       	rjmp	.+4      	; 0x35a <Ball_Tick+0x11c>
 356:	c2 e0       	ldi	r28, 0x02	; 2
 358:	d0 e0       	ldi	r29, 0x00	; 0
 35a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ball_row.1702>
 35e:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <BALL_PORTA>
 362:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ball_column.1703>
 366:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <BALL_PORTB>
 36a:	ce 01       	movw	r24, r28
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	08 95       	ret

00000372 <Brick_Tick>:
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	ec 01       	movw	r28, r24
 378:	de de       	rcall	.-580    	; 0x136 <GetNESControllerButton>
 37a:	c2 30       	cpi	r28, 0x02	; 2
 37c:	d1 05       	cpc	r29, r1
 37e:	31 f0       	breq	.+12     	; 0x38c <Brick_Tick+0x1a>
 380:	c3 30       	cpi	r28, 0x03	; 3
 382:	d1 05       	cpc	r29, r1
 384:	99 f0       	breq	.+38     	; 0x3ac <Brick_Tick+0x3a>
 386:	21 97       	sbiw	r28, 0x01	; 1
 388:	21 f4       	brne	.+8      	; 0x392 <Brick_Tick+0x20>
 38a:	0b c0       	rjmp	.+22     	; 0x3a2 <Brick_Tick+0x30>
 38c:	88 30       	cpi	r24, 0x08	; 8
 38e:	71 f4       	brne	.+28     	; 0x3ac <Brick_Tick+0x3a>
 390:	0b c0       	rjmp	.+22     	; 0x3a8 <Brick_Tick+0x36>
 392:	87 e0       	ldi	r24, 0x07	; 7
 394:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 398:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <brick_column.1736>
 39c:	c1 e0       	ldi	r28, 0x01	; 1
 39e:	d0 e0       	ldi	r29, 0x00	; 0
 3a0:	05 c0       	rjmp	.+10     	; 0x3ac <Brick_Tick+0x3a>
 3a2:	c2 e0       	ldi	r28, 0x02	; 2
 3a4:	d0 e0       	ldi	r29, 0x00	; 0
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <Brick_Tick+0x3a>
 3a8:	c3 e0       	ldi	r28, 0x03	; 3
 3aa:	d0 e0       	ldi	r29, 0x00	; 0
 3ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3b0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <BRICK_PORTA>
 3b4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <brick_column.1736>
 3b8:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <BRICK_PORTB>
 3bc:	ce 01       	movw	r24, r28
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	08 95       	ret

000003c4 <TimerSet>:
 3c4:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <_avr_timer_M>
 3c8:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <_avr_timer_M+0x1>
 3cc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_M+0x2>
 3d0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_M+0x3>
 3d4:	60 93 0d 01 	sts	0x010D, r22	; 0x80010d <_avr_timer_cntcurr>
 3d8:	70 93 0e 01 	sts	0x010E, r23	; 0x80010e <_avr_timer_cntcurr+0x1>
 3dc:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_avr_timer_cntcurr+0x2>
 3e0:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <_avr_timer_cntcurr+0x3>
 3e4:	08 95       	ret

000003e6 <TimerOn>:
 3e6:	8b e0       	ldi	r24, 0x0B	; 11
 3e8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3ec:	8d e7       	ldi	r24, 0x7D	; 125
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 3f4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 3f8:	82 e0       	ldi	r24, 0x02	; 2
 3fa:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 3fe:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 402:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 406:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
 40a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
 40e:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
 412:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
 416:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_avr_timer_cntcurr>
 41a:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_avr_timer_cntcurr+0x1>
 41e:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <_avr_timer_cntcurr+0x2>
 422:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <_avr_timer_cntcurr+0x3>
 426:	8f b7       	in	r24, 0x3f	; 63
 428:	80 68       	ori	r24, 0x80	; 128
 42a:	8f bf       	out	0x3f, r24	; 63
 42c:	08 95       	ret

0000042e <TimerISR>:
	PORTB = OUTPUT_B;
	return state;
};


void TimerISR() {
 42e:	ef 92       	push	r14
 430:	ff 92       	push	r15
 432:	0f 93       	push	r16
 434:	1f 93       	push	r17
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	c3 e1       	ldi	r28, 0x13	; 19
 43c:	d1 e0       	ldi	r29, 0x01	; 1
 43e:	0f 2e       	mov	r0, r31
 440:	f3 e4       	ldi	r31, 0x43	; 67
 442:	ef 2e       	mov	r14, r31
 444:	f1 e0       	ldi	r31, 0x01	; 1
 446:	ff 2e       	mov	r15, r31
 448:	f0 2d       	mov	r31, r0
 44a:	8e 01       	movw	r16, r28
	unsigned char i;
	for(i = 0; i < tasksNum; ++i) { // Heart of the scheduler code
		if (tasks[i].elapsedTime >= tasks[i].period)
 44c:	4e 81       	ldd	r20, Y+6	; 0x06
 44e:	5f 81       	ldd	r21, Y+7	; 0x07
 450:	68 85       	ldd	r22, Y+8	; 0x08
 452:	79 85       	ldd	r23, Y+9	; 0x09
 454:	8a 81       	ldd	r24, Y+2	; 0x02
 456:	9b 81       	ldd	r25, Y+3	; 0x03
 458:	ac 81       	ldd	r26, Y+4	; 0x04
 45a:	bd 81       	ldd	r27, Y+5	; 0x05
 45c:	48 17       	cp	r20, r24
 45e:	59 07       	cpc	r21, r25
 460:	6a 07       	cpc	r22, r26
 462:	7b 07       	cpc	r23, r27
 464:	58 f0       	brcs	.+22     	; 0x47c <TimerISR+0x4e>
		{ // Ready
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
 466:	ea 85       	ldd	r30, Y+10	; 0x0a
 468:	fb 85       	ldd	r31, Y+11	; 0x0b
 46a:	88 81       	ld	r24, Y
 46c:	99 81       	ldd	r25, Y+1	; 0x01
 46e:	09 95       	icall
 470:	99 83       	std	Y+1, r25	; 0x01
 472:	88 83       	st	Y, r24
			tasks[i].elapsedTime = 0;
 474:	1e 82       	std	Y+6, r1	; 0x06
 476:	1f 82       	std	Y+7, r1	; 0x07
 478:	18 86       	std	Y+8, r1	; 0x08
 47a:	19 86       	std	Y+9, r1	; 0x09
		}
		tasks[i].elapsedTime += tasksPeriodGCD;
 47c:	f8 01       	movw	r30, r16
 47e:	86 81       	ldd	r24, Z+6	; 0x06
 480:	97 81       	ldd	r25, Z+7	; 0x07
 482:	a0 85       	ldd	r26, Z+8	; 0x08
 484:	b1 85       	ldd	r27, Z+9	; 0x09
 486:	05 96       	adiw	r24, 0x05	; 5
 488:	a1 1d       	adc	r26, r1
 48a:	b1 1d       	adc	r27, r1
 48c:	86 83       	std	Z+6, r24	; 0x06
 48e:	97 83       	std	Z+7, r25	; 0x07
 490:	a0 87       	std	Z+8, r26	; 0x08
 492:	b1 87       	std	Z+9, r27	; 0x09
 494:	2c 96       	adiw	r28, 0x0c	; 12
};


void TimerISR() {
	unsigned char i;
	for(i = 0; i < tasksNum; ++i) { // Heart of the scheduler code
 496:	ce 15       	cp	r28, r14
 498:	df 05       	cpc	r29, r15
 49a:	b9 f6       	brne	.-82     	; 0x44a <TimerISR+0x1c>
			tasks[i].elapsedTime = 0;
		}
		tasks[i].elapsedTime += tasksPeriodGCD;

	}
	TimerFlag = 1;
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <TimerFlag>
}
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	1f 91       	pop	r17
 4a8:	0f 91       	pop	r16
 4aa:	ff 90       	pop	r15
 4ac:	ef 90       	pop	r14
 4ae:	08 95       	ret

000004b0 <__vector_13>:



// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 4b0:	1f 92       	push	r1
 4b2:	0f 92       	push	r0
 4b4:	0f b6       	in	r0, 0x3f	; 63
 4b6:	0f 92       	push	r0
 4b8:	11 24       	eor	r1, r1
 4ba:	0b b6       	in	r0, 0x3b	; 59
 4bc:	0f 92       	push	r0
 4be:	2f 93       	push	r18
 4c0:	3f 93       	push	r19
 4c2:	4f 93       	push	r20
 4c4:	5f 93       	push	r21
 4c6:	6f 93       	push	r22
 4c8:	7f 93       	push	r23
 4ca:	8f 93       	push	r24
 4cc:	9f 93       	push	r25
 4ce:	af 93       	push	r26
 4d0:	bf 93       	push	r27
 4d2:	ef 93       	push	r30
 4d4:	ff 93       	push	r31
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 4d6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_avr_timer_cntcurr>
 4da:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <_avr_timer_cntcurr+0x1>
 4de:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <_avr_timer_cntcurr+0x2>
 4e2:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <_avr_timer_cntcurr+0x3>
 4e6:	01 97       	sbiw	r24, 0x01	; 1
 4e8:	a1 09       	sbc	r26, r1
 4ea:	b1 09       	sbc	r27, r1
 4ec:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_avr_timer_cntcurr>
 4f0:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_avr_timer_cntcurr+0x1>
 4f4:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <_avr_timer_cntcurr+0x2>
 4f8:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 4fc:	89 2b       	or	r24, r25
 4fe:	8a 2b       	or	r24, r26
 500:	8b 2b       	or	r24, r27
		TimerISR(); 				// Call the ISR that the user uses
 502:	89 f4       	brne	.+34     	; 0x526 <__vector_13+0x76>
		_avr_timer_cntcurr = _avr_timer_M;
 504:	94 df       	rcall	.-216    	; 0x42e <TimerISR>
 506:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
 50a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
 50e:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
 512:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
 516:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_avr_timer_cntcurr>
 51a:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_avr_timer_cntcurr+0x1>
 51e:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <_avr_timer_cntcurr+0x2>
 522:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <_avr_timer_cntcurr+0x3>
	}
}
 526:	ff 91       	pop	r31
 528:	ef 91       	pop	r30
 52a:	bf 91       	pop	r27
 52c:	af 91       	pop	r26
 52e:	9f 91       	pop	r25
 530:	8f 91       	pop	r24
 532:	7f 91       	pop	r23
 534:	6f 91       	pop	r22
 536:	5f 91       	pop	r21
 538:	4f 91       	pop	r20
 53a:	3f 91       	pop	r19
 53c:	2f 91       	pop	r18
 53e:	0f 90       	pop	r0
 540:	0b be       	out	0x3b, r0	; 59
 542:	0f 90       	pop	r0
 544:	0f be       	out	0x3f, r0	; 63
 546:	0f 90       	pop	r0
 548:	1f 90       	pop	r1
 54a:	18 95       	reti

0000054c <main>:


int main() {

	DDRB = 0xFF; PORTB = 0x00;
 54c:	8f ef       	ldi	r24, 0xFF	; 255
 54e:	84 b9       	out	0x04, r24	; 4
 550:	15 b8       	out	0x05, r1	; 5
	DDRA = 0xFF; PORTA = 0x00; // Initialize to output to PORT A
 552:	81 b9       	out	0x01, r24	; 1
 554:	12 b8       	out	0x02, r1	; 2
	DDRC = 0x03; PORTC = 0x04;
 556:	83 e0       	ldi	r24, 0x03	; 3
 558:	87 b9       	out	0x07, r24	; 7
 55a:	84 e0       	ldi	r24, 0x04	; 4
 55c:	88 b9       	out	0x08, r24	; 8



	unsigned char i = 0;
	tasks[i].state = P_INIT;
 55e:	e3 e1       	ldi	r30, 0x13	; 19
 560:	f1 e0       	ldi	r31, 0x01	; 1
 562:	21 e0       	ldi	r18, 0x01	; 1
 564:	30 e0       	ldi	r19, 0x00	; 0
 566:	31 83       	std	Z+1, r19	; 0x01
 568:	20 83       	st	Z, r18
	tasks[i].period = periodPaddle;
 56a:	82 e3       	ldi	r24, 0x32	; 50
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	a0 e0       	ldi	r26, 0x00	; 0
 570:	b0 e0       	ldi	r27, 0x00	; 0
 572:	82 83       	std	Z+2, r24	; 0x02
 574:	93 83       	std	Z+3, r25	; 0x03
 576:	a4 83       	std	Z+4, r26	; 0x04
 578:	b5 83       	std	Z+5, r27	; 0x05
	tasks[i].elapsedTime = tasks[i].period;
 57a:	86 83       	std	Z+6, r24	; 0x06
 57c:	97 83       	std	Z+7, r25	; 0x07
 57e:	a0 87       	std	Z+8, r26	; 0x08
 580:	b1 87       	std	Z+9, r27	; 0x09
	tasks[i].TickFct= &Paddle_Tick;
 582:	88 eb       	ldi	r24, 0xB8	; 184
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	93 87       	std	Z+11, r25	; 0x0b
 588:	82 87       	std	Z+10, r24	; 0x0a
	++i;
	tasks[i].state = B_INIT;
 58a:	35 87       	std	Z+13, r19	; 0x0d
 58c:	24 87       	std	Z+12, r18	; 0x0c
	tasks[i].period = periodBall;
 58e:	86 e9       	ldi	r24, 0x96	; 150
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	a0 e0       	ldi	r26, 0x00	; 0
 594:	b0 e0       	ldi	r27, 0x00	; 0
 596:	86 87       	std	Z+14, r24	; 0x0e
 598:	97 87       	std	Z+15, r25	; 0x0f
 59a:	a0 8b       	std	Z+16, r26	; 0x10
 59c:	b1 8b       	std	Z+17, r27	; 0x11
	tasks[i].elapsedTime = tasks[i].period;
 59e:	82 8b       	std	Z+18, r24	; 0x12
 5a0:	93 8b       	std	Z+19, r25	; 0x13
 5a2:	a4 8b       	std	Z+20, r26	; 0x14
 5a4:	b5 8b       	std	Z+21, r27	; 0x15
	tasks[i].TickFct= &Ball_Tick;
 5a6:	8f e1       	ldi	r24, 0x1F	; 31
 5a8:	91 e0       	ldi	r25, 0x01	; 1
 5aa:	97 8b       	std	Z+23, r25	; 0x17
 5ac:	86 8b       	std	Z+22, r24	; 0x16
	++i;
	tasks[i].state = O_INIT;
 5ae:	31 8f       	std	Z+25, r19	; 0x19
 5b0:	20 8f       	std	Z+24, r18	; 0x18
	tasks[i].period = periodOutput;
 5b2:	85 e0       	ldi	r24, 0x05	; 5
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	a0 e0       	ldi	r26, 0x00	; 0
 5b8:	b0 e0       	ldi	r27, 0x00	; 0
 5ba:	82 8f       	std	Z+26, r24	; 0x1a
 5bc:	93 8f       	std	Z+27, r25	; 0x1b
 5be:	a4 8f       	std	Z+28, r26	; 0x1c
 5c0:	b5 8f       	std	Z+29, r27	; 0x1d
	tasks[i].elapsedTime = tasks[i].period;
 5c2:	86 8f       	std	Z+30, r24	; 0x1e
 5c4:	97 8f       	std	Z+31, r25	; 0x1f
 5c6:	a0 a3       	std	Z+32, r26	; 0x20
 5c8:	b1 a3       	std	Z+33, r27	; 0x21
	tasks[i].TickFct= &Output_Tick;
 5ca:	44 e6       	ldi	r20, 0x64	; 100
 5cc:	50 e0       	ldi	r21, 0x00	; 0
 5ce:	53 a3       	std	Z+35, r21	; 0x23
 5d0:	42 a3       	std	Z+34, r20	; 0x22
	++i;
	tasks[i].state = BRICK_INIT;
 5d2:	35 a3       	std	Z+37, r19	; 0x25
 5d4:	24 a3       	std	Z+36, r18	; 0x24
	tasks[i].period = periodBrick;
 5d6:	86 a3       	std	Z+38, r24	; 0x26
 5d8:	97 a3       	std	Z+39, r25	; 0x27
 5da:	a0 a7       	std	Z+40, r26	; 0x28
 5dc:	b1 a7       	std	Z+41, r27	; 0x29
	tasks[i].elapsedTime = tasks[i].period;
 5de:	82 a7       	std	Z+42, r24	; 0x2a
 5e0:	93 a7       	std	Z+43, r25	; 0x2b
 5e2:	a4 a7       	std	Z+44, r26	; 0x2c
 5e4:	b5 a7       	std	Z+45, r27	; 0x2d
	tasks[i].TickFct= &Brick_Tick;
 5e6:	89 eb       	ldi	r24, 0xB9	; 185
 5e8:	91 e0       	ldi	r25, 0x01	; 1
 5ea:	97 a7       	std	Z+47, r25	; 0x2f
 5ec:	86 a7       	std	Z+46, r24	; 0x2e
	

 	TimerSet(tasksPeriodGCD);
 5ee:	65 e0       	ldi	r22, 0x05	; 5
 5f0:	70 e0       	ldi	r23, 0x00	; 0
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 	TimerOn();
 5f6:	e6 de       	rcall	.-564    	; 0x3c4 <TimerSet>
 5f8:	f6 de       	rcall	.-532    	; 0x3e6 <TimerOn>
	
	while(1)
	{
		while (!TimerFlag);
 5fa:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <TimerFlag>
 5fe:	88 23       	and	r24, r24
 600:	e1 f3       	breq	.-8      	; 0x5fa <main+0xae>
		TimerFlag = 0;
 602:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <TimerFlag>
			
		
	}
 606:	f9 cf       	rjmp	.-14     	; 0x5fa <main+0xae>

00000608 <_exit>:
 608:	f8 94       	cli

0000060a <__stop_program>:
 60a:	ff cf       	rjmp	.-2      	; 0x60a <__stop_program>
