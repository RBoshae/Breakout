
CS120B_Final_Project_Part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800100  00001628  000016bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001628  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000093  008001a2  008001a2  0000175e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000175e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001790  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000017d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a9e  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa1  00000000  00000000  000033a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016b1  00000000  00000000  00003e47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e8  00000000  00000000  000054f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b2c  00000000  00000000  000057e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010ee  00000000  00000000  0000630c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000073fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	74 c0       	rjmp	.+232    	; 0xea <__ctors_end>
       2:	00 00       	nop
       4:	91 c0       	rjmp	.+290    	; 0x128 <__bad_interrupt>
       6:	00 00       	nop
       8:	8f c0       	rjmp	.+286    	; 0x128 <__bad_interrupt>
       a:	00 00       	nop
       c:	8d c0       	rjmp	.+282    	; 0x128 <__bad_interrupt>
       e:	00 00       	nop
      10:	8b c0       	rjmp	.+278    	; 0x128 <__bad_interrupt>
      12:	00 00       	nop
      14:	89 c0       	rjmp	.+274    	; 0x128 <__bad_interrupt>
      16:	00 00       	nop
      18:	87 c0       	rjmp	.+270    	; 0x128 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	85 c0       	rjmp	.+266    	; 0x128 <__bad_interrupt>
      1e:	00 00       	nop
      20:	83 c0       	rjmp	.+262    	; 0x128 <__bad_interrupt>
      22:	00 00       	nop
      24:	81 c0       	rjmp	.+258    	; 0x128 <__bad_interrupt>
      26:	00 00       	nop
      28:	7f c0       	rjmp	.+254    	; 0x128 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7d c0       	rjmp	.+250    	; 0x128 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7b c0       	rjmp	.+246    	; 0x128 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 ff 09 	jmp	0x13fe	; 0x13fe <__vector_13>
      38:	77 c0       	rjmp	.+238    	; 0x128 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	75 c0       	rjmp	.+234    	; 0x128 <__bad_interrupt>
      3e:	00 00       	nop
      40:	73 c0       	rjmp	.+230    	; 0x128 <__bad_interrupt>
      42:	00 00       	nop
      44:	71 c0       	rjmp	.+226    	; 0x128 <__bad_interrupt>
      46:	00 00       	nop
      48:	6f c0       	rjmp	.+222    	; 0x128 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6d c0       	rjmp	.+218    	; 0x128 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6b c0       	rjmp	.+214    	; 0x128 <__bad_interrupt>
      52:	00 00       	nop
      54:	69 c0       	rjmp	.+210    	; 0x128 <__bad_interrupt>
      56:	00 00       	nop
      58:	67 c0       	rjmp	.+206    	; 0x128 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	65 c0       	rjmp	.+202    	; 0x128 <__bad_interrupt>
      5e:	00 00       	nop
      60:	63 c0       	rjmp	.+198    	; 0x128 <__bad_interrupt>
      62:	00 00       	nop
      64:	61 c0       	rjmp	.+194    	; 0x128 <__bad_interrupt>
      66:	00 00       	nop
      68:	5f c0       	rjmp	.+190    	; 0x128 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5d c0       	rjmp	.+186    	; 0x128 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5b c0       	rjmp	.+182    	; 0x128 <__bad_interrupt>
      72:	00 00       	nop
      74:	59 c0       	rjmp	.+178    	; 0x128 <__bad_interrupt>
      76:	00 00       	nop
      78:	57 c0       	rjmp	.+174    	; 0x128 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	55 c0       	rjmp	.+170    	; 0x128 <__bad_interrupt>
      7e:	00 00       	nop
      80:	53 c0       	rjmp	.+166    	; 0x128 <__bad_interrupt>
      82:	00 00       	nop
      84:	51 c0       	rjmp	.+162    	; 0x128 <__bad_interrupt>
      86:	00 00       	nop
      88:	4f c0       	rjmp	.+158    	; 0x128 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7c 01       	movw	r14, r24
      8e:	81 01       	movw	r16, r2
      90:	86 01       	movw	r16, r12
      92:	99 01       	movw	r18, r18
      94:	b8 01       	movw	r22, r16
      96:	c9 03       	fmulsu	r20, r17
      98:	c9 03       	fmulsu	r20, r17
      9a:	d9 01       	movw	r26, r18
      9c:	89 02       	muls	r24, r25
      9e:	40 03       	mulsu	r20, r16
      a0:	80 03       	fmuls	r16, r16
      a2:	d9 03       	fmulsu	r21, r17
      a4:	e0 03       	fmuls	r22, r16
      a6:	24 04       	cpc	r2, r4
      a8:	24 04       	cpc	r2, r4
      aa:	e7 03       	fmuls	r22, r23
      ac:	ed 03       	fmulsu	r22, r21
      ae:	f3 03       	fmuls	r23, r19
      b0:	0d 04       	cpc	r0, r13
      b2:	01 04       	cpc	r0, r1
      b4:	19 04       	cpc	r1, r9
      b6:	cb 05       	cpc	r28, r11
      b8:	e9 05       	cpc	r30, r9
      ba:	43 05       	cpc	r20, r3
      bc:	56 05       	cpc	r21, r6
      be:	40 05       	cpc	r20, r0
      c0:	40 05       	cpc	r20, r0
      c2:	a3 05       	cpc	r26, r3
      c4:	9e 06       	cpc	r9, r30
      c6:	a1 06       	cpc	r10, r17
      c8:	a6 06       	cpc	r10, r22
      ca:	c8 07       	cpc	r28, r24
      cc:	ab 06       	cpc	r10, r27
      ce:	6f 07       	cpc	r22, r31
      d0:	9b 06       	cpc	r9, r27
      d2:	f6 06       	cpc	r15, r22
      d4:	1a 07       	cpc	r17, r26
      d6:	4b 07       	cpc	r20, r27
      d8:	91 09       	sbc	r25, r1
      da:	91 09       	sbc	r25, r1
      dc:	72 08       	sbc	r7, r2
      de:	78 08       	sbc	r7, r8
      e0:	91 09       	sbc	r25, r1
      e2:	7e 08       	sbc	r7, r14
      e4:	91 09       	sbc	r25, r1
      e6:	91 09       	sbc	r25, r1
      e8:	ed 07       	cpc	r30, r29

000000ea <__ctors_end>:
      ea:	11 24       	eor	r1, r1
      ec:	1f be       	out	0x3f, r1	; 63
      ee:	cf ef       	ldi	r28, 0xFF	; 255
      f0:	d0 e4       	ldi	r29, 0x40	; 64
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
      f6:	11 e0       	ldi	r17, 0x01	; 1
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b1 e0       	ldi	r27, 0x01	; 1
      fc:	e8 e2       	ldi	r30, 0x28	; 40
      fe:	f6 e1       	ldi	r31, 0x16	; 22
     100:	00 e0       	ldi	r16, 0x00	; 0
     102:	0b bf       	out	0x3b, r16	; 59
     104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x14>
     106:	07 90       	elpm	r0, Z+
     108:	0d 92       	st	X+, r0
     10a:	a2 3a       	cpi	r26, 0xA2	; 162
     10c:	b1 07       	cpc	r27, r17
     10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0x10>

00000110 <__do_clear_bss>:
     110:	22 e0       	ldi	r18, 0x02	; 2
     112:	a2 ea       	ldi	r26, 0xA2	; 162
     114:	b1 e0       	ldi	r27, 0x01	; 1
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a5 33       	cpi	r26, 0x35	; 53
     11c:	b2 07       	cpc	r27, r18
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 4d 0a 	call	0x149a	; 0x149a <main>
     124:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <_exit>

00000128 <__bad_interrupt>:
     128:	6b cf       	rjmp	.-298    	; 0x0 <__vectors>

0000012a <turn_off_LED.2024>:
	//Enable global interrupts
	SREG |= 0x80;	// 0x80: 1000000
}

void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
     12a:	8a 31       	cpi	r24, 0x1A	; 26
     12c:	91 05       	cpc	r25, r1
     12e:	68 f4       	brcc	.+26     	; 0x14a <turn_off_LED.2024+0x20>
     130:	fc 01       	movw	r30, r24
     132:	ef 5f       	subi	r30, 0xFF	; 255
     134:	fd 4f       	sbci	r31, 0xFD	; 253
     136:	10 82       	st	Z, r1
     138:	fc 01       	movw	r30, r24
     13a:	e5 5e       	subi	r30, 0xE5	; 229
     13c:	fd 4f       	sbci	r31, 0xFD	; 253
     13e:	10 82       	st	Z, r1
     140:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <SCORE>
     144:	8f 5f       	subi	r24, 0xFF	; 255
     146:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <SCORE>
     14a:	08 95       	ret

0000014c <paddle_collision_detection.2026>:
     14c:	2f 92       	push	r2
     14e:	3f 92       	push	r3
     150:	ef 92       	push	r14
     152:	ff 92       	push	r15
     154:	0f 93       	push	r16
     156:	1f 93       	push	r17
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <FLOOR>
     160:	86 95       	lsr	r24
     162:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <ball_row.2019>
     166:	89 13       	cpse	r24, r25
     168:	a2 c0       	rjmp	.+324    	; 0x2ae <paddle_collision_detection.2026+0x162>
     16a:	e0 90 03 01 	lds	r14, 0x0103	; 0x800103 <ball_column.2020>
     16e:	6e 2d       	mov	r22, r14
     170:	70 e0       	ldi	r23, 0x00	; 0
     172:	80 e0       	ldi	r24, 0x00	; 0
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	f1 2c       	mov	r15, r1
     178:	eb e1       	ldi	r30, 0x1B	; 27
     17a:	f2 e0       	ldi	r31, 0x02	; 2
     17c:	a7 e0       	ldi	r26, 0x07	; 7
     17e:	b0 e0       	ldi	r27, 0x00	; 0
     180:	ab 01       	movw	r20, r22
     182:	08 2e       	mov	r0, r24
     184:	02 c0       	rjmp	.+4      	; 0x18a <paddle_collision_detection.2026+0x3e>
     186:	55 95       	asr	r21
     188:	47 95       	ror	r20
     18a:	0a 94       	dec	r0
     18c:	e2 f7       	brpl	.-8      	; 0x186 <paddle_collision_detection.2026+0x3a>
     18e:	30 81       	ld	r19, Z
     190:	23 2f       	mov	r18, r19
     192:	30 e0       	ldi	r19, 0x00	; 0
     194:	e9 01       	movw	r28, r18
     196:	08 2e       	mov	r0, r24
     198:	02 c0       	rjmp	.+4      	; 0x19e <paddle_collision_detection.2026+0x52>
     19a:	d5 95       	asr	r29
     19c:	c7 95       	ror	r28
     19e:	0a 94       	dec	r0
     1a0:	e2 f7       	brpl	.-8      	; 0x19a <paddle_collision_detection.2026+0x4e>
     1a2:	0c 2f       	mov	r16, r28
     1a4:	01 70       	andi	r16, 0x01	; 1
     1a6:	14 2f       	mov	r17, r20
     1a8:	11 70       	andi	r17, 0x01	; 1
     1aa:	40 ff       	sbrs	r20, 0
     1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <paddle_collision_detection.2026+0x6a>
     1ae:	01 11       	cpse	r16, r1
     1b0:	39 c0       	rjmp	.+114    	; 0x224 <paddle_collision_detection.2026+0xd8>
     1b2:	f3 94       	inc	r15
     1b4:	3c c0       	rjmp	.+120    	; 0x22e <paddle_collision_detection.2026+0xe2>
     1b6:	11 11       	cpse	r17, r1
     1b8:	35 c0       	rjmp	.+106    	; 0x224 <paddle_collision_detection.2026+0xd8>
     1ba:	01 30       	cpi	r16, 0x01	; 1
     1bc:	99 f5       	brne	.+102    	; 0x224 <paddle_collision_detection.2026+0xd8>
     1be:	ac 01       	movw	r20, r24
     1c0:	ec 01       	movw	r28, r24
     1c2:	21 96       	adiw	r28, 0x01	; 1
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <paddle_collision_detection.2026+0x7e>
     1c6:	35 95       	asr	r19
     1c8:	27 95       	ror	r18
     1ca:	ca 95       	dec	r28
     1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <paddle_collision_detection.2026+0x7a>
     1ce:	20 fd       	sbrc	r18, 0
     1d0:	13 c0       	rjmp	.+38     	; 0x1f8 <paddle_collision_detection.2026+0xac>
     1d2:	e1 01       	movw	r28, r2
     1d4:	28 81       	ld	r18, Y
     1d6:	39 81       	ldd	r19, Y+1	; 0x01
     1d8:	29 30       	cpi	r18, 0x09	; 9
     1da:	31 05       	cpc	r19, r1
     1dc:	09 f0       	breq	.+2      	; 0x1e0 <paddle_collision_detection.2026+0x94>
     1de:	5f c0       	rjmp	.+190    	; 0x29e <paddle_collision_detection.2026+0x152>
     1e0:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <RIGHT_WALL>
     1e4:	e2 12       	cpse	r14, r18
     1e6:	03 c0       	rjmp	.+6      	; 0x1ee <paddle_collision_detection.2026+0xa2>
     1e8:	b9 83       	std	Y+1, r27	; 0x01
     1ea:	a8 83       	st	Y, r26
     1ec:	05 c0       	rjmp	.+10     	; 0x1f8 <paddle_collision_detection.2026+0xac>
     1ee:	88 e0       	ldi	r24, 0x08	; 8
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	99 83       	std	Y+1, r25	; 0x01
     1f4:	88 83       	st	Y, r24
     1f6:	5b c0       	rjmp	.+182    	; 0x2ae <paddle_collision_detection.2026+0x162>
     1f8:	20 81       	ld	r18, Z
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	41 50       	subi	r20, 0x01	; 1
     1fe:	51 09       	sbc	r21, r1
     200:	02 c0       	rjmp	.+4      	; 0x206 <paddle_collision_detection.2026+0xba>
     202:	35 95       	asr	r19
     204:	27 95       	ror	r18
     206:	4a 95       	dec	r20
     208:	e2 f7       	brpl	.-8      	; 0x202 <paddle_collision_detection.2026+0xb6>
     20a:	20 fd       	sbrc	r18, 0
     20c:	10 c0       	rjmp	.+32     	; 0x22e <paddle_collision_detection.2026+0xe2>
     20e:	e1 01       	movw	r28, r2
     210:	88 81       	ld	r24, Y
     212:	99 81       	ldd	r25, Y+1	; 0x01
     214:	0a 97       	sbiw	r24, 0x0a	; 10
     216:	09 f0       	breq	.+2      	; 0x21a <paddle_collision_detection.2026+0xce>
     218:	42 c0       	rjmp	.+132    	; 0x29e <paddle_collision_detection.2026+0x152>
     21a:	87 e0       	ldi	r24, 0x07	; 7
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	99 83       	std	Y+1, r25	; 0x01
     220:	88 83       	st	Y, r24
     222:	45 c0       	rjmp	.+138    	; 0x2ae <paddle_collision_detection.2026+0x162>
     224:	9e 01       	movw	r18, r28
     226:	24 2b       	or	r18, r20
     228:	35 2b       	or	r19, r21
     22a:	20 ff       	sbrs	r18, 0
     22c:	05 c0       	rjmp	.+10     	; 0x238 <paddle_collision_detection.2026+0xec>
     22e:	01 96       	adiw	r24, 0x01	; 1
     230:	88 30       	cpi	r24, 0x08	; 8
     232:	91 05       	cpc	r25, r1
     234:	09 f0       	breq	.+2      	; 0x238 <paddle_collision_detection.2026+0xec>
     236:	a4 cf       	rjmp	.-184    	; 0x180 <paddle_collision_detection.2026+0x34>
     238:	f1 10       	cpse	r15, r1
     23a:	10 c0       	rjmp	.+32     	; 0x25c <paddle_collision_detection.2026+0x110>
     23c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <RIGHT_WALL>
     240:	e8 12       	cpse	r14, r24
     242:	06 c0       	rjmp	.+12     	; 0x250 <paddle_collision_detection.2026+0x104>
     244:	87 e0       	ldi	r24, 0x07	; 7
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	f1 01       	movw	r30, r2
     24a:	91 83       	std	Z+1, r25	; 0x01
     24c:	80 83       	st	Z, r24
     24e:	2f c0       	rjmp	.+94     	; 0x2ae <paddle_collision_detection.2026+0x162>
     250:	88 e0       	ldi	r24, 0x08	; 8
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	e1 01       	movw	r28, r2
     256:	99 83       	std	Y+1, r25	; 0x01
     258:	88 83       	st	Y, r24
     25a:	29 c0       	rjmp	.+82     	; 0x2ae <paddle_collision_detection.2026+0x162>
     25c:	d1 e0       	ldi	r29, 0x01	; 1
     25e:	fd 12       	cpse	r15, r29
     260:	12 c0       	rjmp	.+36     	; 0x286 <paddle_collision_detection.2026+0x13a>
     262:	f1 01       	movw	r30, r2
     264:	80 81       	ld	r24, Z
     266:	91 81       	ldd	r25, Z+1	; 0x01
     268:	8a 30       	cpi	r24, 0x0A	; 10
     26a:	91 05       	cpc	r25, r1
     26c:	29 f4       	brne	.+10     	; 0x278 <paddle_collision_detection.2026+0x12c>
     26e:	88 e0       	ldi	r24, 0x08	; 8
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	91 83       	std	Z+1, r25	; 0x01
     274:	80 83       	st	Z, r24
     276:	1b c0       	rjmp	.+54     	; 0x2ae <paddle_collision_detection.2026+0x162>
     278:	09 97       	sbiw	r24, 0x09	; 9
     27a:	c9 f4       	brne	.+50     	; 0x2ae <paddle_collision_detection.2026+0x162>
     27c:	87 e0       	ldi	r24, 0x07	; 7
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	91 83       	std	Z+1, r25	; 0x01
     282:	80 83       	st	Z, r24
     284:	14 c0       	rjmp	.+40     	; 0x2ae <paddle_collision_detection.2026+0x162>
     286:	d2 e0       	ldi	r29, 0x02	; 2
     288:	fd 12       	cpse	r15, r29
     28a:	06 c0       	rjmp	.+12     	; 0x298 <paddle_collision_detection.2026+0x14c>
     28c:	87 e0       	ldi	r24, 0x07	; 7
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	f1 01       	movw	r30, r2
     292:	91 83       	std	Z+1, r25	; 0x01
     294:	80 83       	st	Z, r24
     296:	0b c0       	rjmp	.+22     	; 0x2ae <paddle_collision_detection.2026+0x162>
     298:	f8 e0       	ldi	r31, 0x08	; 8
     29a:	ff 16       	cp	r15, r31
     29c:	41 f0       	breq	.+16     	; 0x2ae <paddle_collision_detection.2026+0x162>
     29e:	83 e0       	ldi	r24, 0x03	; 3
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	e1 01       	movw	r28, r2
     2a4:	99 83       	std	Y+1, r25	; 0x01
     2a6:	88 83       	st	Y, r24
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <gameEndTurn>
     2ae:	df 91       	pop	r29
     2b0:	cf 91       	pop	r28
     2b2:	1f 91       	pop	r17
     2b4:	0f 91       	pop	r16
     2b6:	ff 90       	pop	r15
     2b8:	ef 90       	pop	r14
     2ba:	3f 90       	pop	r3
     2bc:	2f 90       	pop	r2
     2be:	08 95       	ret

000002c0 <Ball_Tick>:
     2c0:	2f 92       	push	r2
     2c2:	3f 92       	push	r3
     2c4:	8f 92       	push	r8
     2c6:	9f 92       	push	r9
     2c8:	af 92       	push	r10
     2ca:	bf 92       	push	r11
     2cc:	cf 92       	push	r12
     2ce:	df 92       	push	r13
     2d0:	ef 92       	push	r14
     2d2:	ff 92       	push	r15
     2d4:	0f 93       	push	r16
     2d6:	1f 93       	push	r17
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
     2dc:	00 d0       	rcall	.+0      	; 0x2de <Ball_Tick+0x1e>
     2de:	cd b7       	in	r28, 0x3d	; 61
     2e0:	de b7       	in	r29, 0x3e	; 62
     2e2:	9a 83       	std	Y+2, r25	; 0x02
     2e4:	89 83       	std	Y+1, r24	; 0x01
     2e6:	8b 30       	cpi	r24, 0x0B	; 11
     2e8:	91 05       	cpc	r25, r1
     2ea:	08 f0       	brcs	.+2      	; 0x2ee <Ball_Tick+0x2e>
     2ec:	52 c2       	rjmp	.+1188   	; 0x792 <__LOCK_REGION_LENGTH__+0x392>
     2ee:	fc 01       	movw	r30, r24
     2f0:	ea 5b       	subi	r30, 0xBA	; 186
     2f2:	ff 4f       	sbci	r31, 0xFF	; 255
     2f4:	0c 94 e1 0a 	jmp	0x15c2	; 0x15c2 <__tablejump2__>
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	9a 83       	std	Y+2, r25	; 0x02
     2fe:	89 83       	std	Y+1, r24	; 0x01
     300:	af c2       	rjmp	.+1374   	; 0x860 <__LOCK_REGION_LENGTH__+0x460>
     302:	82 e0       	ldi	r24, 0x02	; 2
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	9a 83       	std	Y+2, r25	; 0x02
     308:	89 83       	std	Y+1, r24	; 0x01
     30a:	ad c2       	rjmp	.+1370   	; 0x866 <__LOCK_REGION_LENGTH__+0x466>
     30c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <gameInPlay>
     310:	81 30       	cpi	r24, 0x01	; 1
     312:	09 f0       	breq	.+2      	; 0x316 <Ball_Tick+0x56>
     314:	a8 c2       	rjmp	.+1360   	; 0x866 <__LOCK_REGION_LENGTH__+0x466>
     316:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <gameInPause>
     31a:	81 11       	cpse	r24, r1
     31c:	a4 c2       	rjmp	.+1352   	; 0x866 <__LOCK_REGION_LENGTH__+0x466>
     31e:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <gameEndTurn>
     322:	81 11       	cpse	r24, r1
     324:	a0 c2       	rjmp	.+1344   	; 0x866 <__LOCK_REGION_LENGTH__+0x466>
     326:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <gameOver>
     32a:	88 23       	and	r24, r24
     32c:	09 f4       	brne	.+2      	; 0x330 <Ball_Tick+0x70>
     32e:	5b c2       	rjmp	.+1206   	; 0x7e6 <__LOCK_REGION_LENGTH__+0x3e6>
     330:	9a c2       	rjmp	.+1332   	; 0x866 <__LOCK_REGION_LENGTH__+0x466>
     332:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <gameInPlay>
     336:	81 11       	cpse	r24, r1
     338:	9e c2       	rjmp	.+1340   	; 0x876 <__LOCK_REGION_LENGTH__+0x476>
     33a:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <gameInPause>
     33e:	81 11       	cpse	r24, r1
     340:	8c c2       	rjmp	.+1304   	; 0x85a <__LOCK_REGION_LENGTH__+0x45a>
     342:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <gameEndTurn>
     346:	81 11       	cpse	r24, r1
     348:	91 c2       	rjmp	.+1314   	; 0x86c <__LOCK_REGION_LENGTH__+0x46c>
     34a:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <gameOver>
     34e:	81 30       	cpi	r24, 0x01	; 1
     350:	09 f0       	breq	.+2      	; 0x354 <Ball_Tick+0x94>
     352:	8c c2       	rjmp	.+1304   	; 0x86c <__LOCK_REGION_LENGTH__+0x46c>
     354:	82 e0       	ldi	r24, 0x02	; 2
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	9a 83       	std	Y+2, r25	; 0x02
     35a:	89 83       	std	Y+1, r24	; 0x01
     35c:	84 c2       	rjmp	.+1288   	; 0x866 <__LOCK_REGION_LENGTH__+0x466>
     35e:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <gameOver>
     362:	81 11       	cpse	r24, r1
     364:	7a c2       	rjmp	.+1268   	; 0x85a <__LOCK_REGION_LENGTH__+0x45a>
     366:	82 e0       	ldi	r24, 0x02	; 2
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	9a 83       	std	Y+2, r25	; 0x02
     36c:	89 83       	std	Y+1, r24	; 0x01
     36e:	7b c2       	rjmp	.+1270   	; 0x866 <__LOCK_REGION_LENGTH__+0x466>
     370:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <gameInPlay>
     374:	81 30       	cpi	r24, 0x01	; 1
     376:	99 f4       	brne	.+38     	; 0x39e <Ball_Tick+0xde>
     378:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <gameInPause>
     37c:	81 11       	cpse	r24, r1
     37e:	0f c0       	rjmp	.+30     	; 0x39e <Ball_Tick+0xde>
     380:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <gameEndTurn>
     384:	81 11       	cpse	r24, r1
     386:	0b c0       	rjmp	.+22     	; 0x39e <Ball_Tick+0xde>
     388:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <gameOver>
     38c:	81 11       	cpse	r24, r1
     38e:	07 c0       	rjmp	.+14     	; 0x39e <Ball_Tick+0xde>
     390:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <PREVIOUS_STATE.2021>
     394:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <PREVIOUS_STATE.2021+0x1>
     398:	9a 83       	std	Y+2, r25	; 0x02
     39a:	89 83       	std	Y+1, r24	; 0x01
     39c:	ff c1       	rjmp	.+1022   	; 0x79c <__LOCK_REGION_LENGTH__+0x39c>
     39e:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <gameReset>
     3a2:	81 30       	cpi	r24, 0x01	; 1
     3a4:	09 f0       	breq	.+2      	; 0x3a8 <Ball_Tick+0xe8>
     3a6:	59 c2       	rjmp	.+1202   	; 0x85a <__LOCK_REGION_LENGTH__+0x45a>
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	9a 83       	std	Y+2, r25	; 0x02
     3ae:	89 83       	std	Y+1, r24	; 0x01
     3b0:	57 c2       	rjmp	.+1198   	; 0x860 <__LOCK_REGION_LENGTH__+0x460>
     3b2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <gameInPlay>
     3b6:	81 11       	cpse	r24, r1
     3b8:	17 c0       	rjmp	.+46     	; 0x3e8 <Ball_Tick+0x128>
     3ba:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <gameInPause>
     3be:	81 30       	cpi	r24, 0x01	; 1
     3c0:	99 f4       	brne	.+38     	; 0x3e8 <Ball_Tick+0x128>
     3c2:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <gameEndTurn>
     3c6:	81 11       	cpse	r24, r1
     3c8:	0f c0       	rjmp	.+30     	; 0x3e8 <Ball_Tick+0x128>
     3ca:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <gameOver>
     3ce:	81 11       	cpse	r24, r1
     3d0:	0b c0       	rjmp	.+22     	; 0x3e8 <Ball_Tick+0x128>
     3d2:	87 e0       	ldi	r24, 0x07	; 7
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <PREVIOUS_STATE.2021+0x1>
     3da:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <PREVIOUS_STATE.2021>
     3de:	84 e0       	ldi	r24, 0x04	; 4
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	9a 83       	std	Y+2, r25	; 0x02
     3e4:	89 83       	std	Y+1, r24	; 0x01
     3e6:	39 c2       	rjmp	.+1138   	; 0x85a <__LOCK_REGION_LENGTH__+0x45a>
     3e8:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <gameReset>
     3ec:	81 30       	cpi	r24, 0x01	; 1
     3ee:	29 f4       	brne	.+10     	; 0x3fa <Ball_Tick+0x13a>
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	9a 83       	std	Y+2, r25	; 0x02
     3f6:	89 83       	std	Y+1, r24	; 0x01
     3f8:	20 c0       	rjmp	.+64     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     3fa:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ball_column.2020>
     3fe:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <LEFT_WALL>
     402:	98 13       	cpse	r25, r24
     404:	10 c0       	rjmp	.+32     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     406:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <ball_row.2019>
     40a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <CEILING>
     40e:	98 13       	cpse	r25, r24
     410:	05 c0       	rjmp	.+10     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     412:	89 e0       	ldi	r24, 0x09	; 9
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	9a 83       	std	Y+2, r25	; 0x02
     418:	89 83       	std	Y+1, r24	; 0x01
     41a:	0f c0       	rjmp	.+30     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     41c:	88 e0       	ldi	r24, 0x08	; 8
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	9a 83       	std	Y+2, r25	; 0x02
     422:	89 83       	std	Y+1, r24	; 0x01
     424:	0a c0       	rjmp	.+20     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     426:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <ball_row.2019>
     42a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <CEILING>
     42e:	98 13       	cpse	r25, r24
     430:	04 c0       	rjmp	.+8      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     432:	89 e0       	ldi	r24, 0x09	; 9
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	9a 83       	std	Y+2, r25	; 0x02
     438:	89 83       	std	Y+1, r24	; 0x01
     43a:	10 91 02 01 	lds	r17, 0x0102	; 0x800102 <ball_row.2019>
     43e:	41 2f       	mov	r20, r17
     440:	46 95       	lsr	r20
     442:	00 91 03 01 	lds	r16, 0x0103	; 0x800103 <ball_column.2020>
     446:	60 2f       	mov	r22, r16
     448:	70 e0       	ldi	r23, 0x00	; 0
     44a:	60 95       	com	r22
     44c:	70 95       	com	r23
     44e:	a3 e0       	ldi	r26, 0x03	; 3
     450:	b2 e0       	ldi	r27, 0x02	; 2
     452:	ed e1       	ldi	r30, 0x1D	; 29
     454:	f2 e0       	ldi	r31, 0x02	; 2
     456:	22 e0       	ldi	r18, 0x02	; 2
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	9d 91       	ld	r25, X+
     45c:	94 23       	and	r25, r20
     45e:	b1 f0       	breq	.+44     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     460:	80 81       	ld	r24, Z
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	86 23       	and	r24, r22
     466:	97 23       	and	r25, r23
     468:	89 2b       	or	r24, r25
     46a:	81 f4       	brne	.+32     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     46c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <LEFT_WALL>
     470:	08 13       	cpse	r16, r24
     472:	05 c0       	rjmp	.+10     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     474:	8a e0       	ldi	r24, 0x0A	; 10
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	9a 83       	std	Y+2, r25	; 0x02
     47a:	89 83       	std	Y+1, r24	; 0x01
     47c:	04 c0       	rjmp	.+8      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     47e:	89 e0       	ldi	r24, 0x09	; 9
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	9a 83       	std	Y+2, r25	; 0x02
     484:	89 83       	std	Y+1, r24	; 0x01
     486:	c9 01       	movw	r24, r18
     488:	50 de       	rcall	.-864    	; 0x12a <turn_off_LED.2024>
     48a:	88 c1       	rjmp	.+784    	; 0x79c <__LOCK_REGION_LENGTH__+0x39c>
     48c:	2f 5f       	subi	r18, 0xFF	; 255
     48e:	3f 4f       	sbci	r19, 0xFF	; 255
     490:	31 96       	adiw	r30, 0x01	; 1
     492:	2a 31       	cpi	r18, 0x1A	; 26
     494:	31 05       	cpc	r19, r1
     496:	09 f7       	brne	.-62     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     498:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <CEILING>
     49c:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <LEFT_WALL>
     4a0:	c9 80       	ldd	r12, Y+1	; 0x01
     4a2:	da 80       	ldd	r13, Y+2	; 0x02
     4a4:	66 0f       	add	r22, r22
     4a6:	77 1f       	adc	r23, r23
     4a8:	e1 e0       	ldi	r30, 0x01	; 1
     4aa:	f2 e0       	ldi	r31, 0x02	; 2
     4ac:	ab e1       	ldi	r26, 0x1B	; 27
     4ae:	b2 e0       	ldi	r27, 0x02	; 2
     4b0:	82 e0       	ldi	r24, 0x02	; 2
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	68 94       	set
     4b6:	aa 24       	eor	r10, r10
     4b8:	a3 f8       	bld	r10, 3
     4ba:	b1 2c       	mov	r11, r1
     4bc:	0f 2e       	mov	r0, r31
     4be:	fa e0       	ldi	r31, 0x0A	; 10
     4c0:	8f 2e       	mov	r8, r31
     4c2:	f0 2d       	mov	r31, r0
     4c4:	91 2c       	mov	r9, r1
     4c6:	13 13       	cpse	r17, r19
     4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4ca:	05 13       	cpse	r16, r21
     4cc:	03 c0       	rjmp	.+6      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     4ce:	13 c0       	rjmp	.+38     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
     4d0:	05 17       	cp	r16, r21
     4d2:	a1 f0       	breq	.+40     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     4d4:	22 81       	ldd	r18, Z+2	; 0x02
     4d6:	24 23       	and	r18, r20
     4d8:	99 f0       	breq	.+38     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     4da:	12 96       	adiw	r26, 0x02	; 2
     4dc:	ec 90       	ld	r14, X
     4de:	12 97       	sbiw	r26, 0x02	; 2
     4e0:	f1 2c       	mov	r15, r1
     4e2:	e6 22       	and	r14, r22
     4e4:	f7 22       	and	r15, r23
     4e6:	ef 28       	or	r14, r15
     4e8:	59 f4       	brne	.+22     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     4ea:	2a e0       	ldi	r18, 0x0A	; 10
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	3a 83       	std	Y+2, r19	; 0x02
     4f0:	29 83       	std	Y+1, r18	; 0x01
     4f2:	1b de       	rcall	.-970    	; 0x12a <turn_off_LED.2024>
     4f4:	53 c1       	rjmp	.+678    	; 0x79c <__LOCK_REGION_LENGTH__+0x39c>
     4f6:	c8 2c       	mov	r12, r8
     4f8:	d9 2c       	mov	r13, r9
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     4fc:	ca 2c       	mov	r12, r10
     4fe:	db 2c       	mov	r13, r11
     500:	01 96       	adiw	r24, 0x01	; 1
     502:	31 96       	adiw	r30, 0x01	; 1
     504:	11 96       	adiw	r26, 0x01	; 1
     506:	8a 31       	cpi	r24, 0x1A	; 26
     508:	91 05       	cpc	r25, r1
     50a:	e9 f6       	brne	.-70     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     50c:	c9 82       	std	Y+1, r12	; 0x01
     50e:	da 82       	std	Y+2, r13	; 0x02
     510:	45 c1       	rjmp	.+650    	; 0x79c <__LOCK_REGION_LENGTH__+0x39c>
     512:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <gameInPlay>
     516:	81 11       	cpse	r24, r1
     518:	17 c0       	rjmp	.+46     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
     51a:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <gameInPause>
     51e:	81 30       	cpi	r24, 0x01	; 1
     520:	99 f4       	brne	.+38     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
     522:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <gameEndTurn>
     526:	81 11       	cpse	r24, r1
     528:	0f c0       	rjmp	.+30     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
     52a:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <gameOver>
     52e:	81 11       	cpse	r24, r1
     530:	0b c0       	rjmp	.+22     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
     532:	88 e0       	ldi	r24, 0x08	; 8
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <PREVIOUS_STATE.2021+0x1>
     53a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <PREVIOUS_STATE.2021>
     53e:	84 e0       	ldi	r24, 0x04	; 4
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	9a 83       	std	Y+2, r25	; 0x02
     544:	89 83       	std	Y+1, r24	; 0x01
     546:	89 c1       	rjmp	.+786    	; 0x85a <__LOCK_REGION_LENGTH__+0x45a>
     548:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <gameReset>
     54c:	81 30       	cpi	r24, 0x01	; 1
     54e:	29 f4       	brne	.+10     	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	9a 83       	std	Y+2, r25	; 0x02
     556:	89 83       	std	Y+1, r24	; 0x01
     558:	20 c0       	rjmp	.+64     	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
     55a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ball_column.2020>
     55e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <RIGHT_WALL>
     562:	98 13       	cpse	r25, r24
     564:	10 c0       	rjmp	.+32     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     566:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <ball_row.2019>
     56a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <CEILING>
     56e:	98 13       	cpse	r25, r24
     570:	05 c0       	rjmp	.+10     	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
     572:	89 e0       	ldi	r24, 0x09	; 9
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	9a 83       	std	Y+2, r25	; 0x02
     578:	89 83       	std	Y+1, r24	; 0x01
     57a:	0f c0       	rjmp	.+30     	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
     57c:	87 e0       	ldi	r24, 0x07	; 7
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	9a 83       	std	Y+2, r25	; 0x02
     582:	89 83       	std	Y+1, r24	; 0x01
     584:	0a c0       	rjmp	.+20     	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
     586:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <ball_row.2019>
     58a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <CEILING>
     58e:	98 13       	cpse	r25, r24
     590:	04 c0       	rjmp	.+8      	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
     592:	8a e0       	ldi	r24, 0x0A	; 10
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	9a 83       	std	Y+2, r25	; 0x02
     598:	89 83       	std	Y+1, r24	; 0x01
     59a:	10 91 02 01 	lds	r17, 0x0102	; 0x800102 <ball_row.2019>
     59e:	41 2f       	mov	r20, r17
     5a0:	46 95       	lsr	r20
     5a2:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <ball_column.2020>
     5a6:	65 2f       	mov	r22, r21
     5a8:	70 e0       	ldi	r23, 0x00	; 0
     5aa:	60 95       	com	r22
     5ac:	70 95       	com	r23
     5ae:	a3 e0       	ldi	r26, 0x03	; 3
     5b0:	b2 e0       	ldi	r27, 0x02	; 2
     5b2:	ed e1       	ldi	r30, 0x1D	; 29
     5b4:	f2 e0       	ldi	r31, 0x02	; 2
     5b6:	22 e0       	ldi	r18, 0x02	; 2
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	9d 91       	ld	r25, X+
     5bc:	94 23       	and	r25, r20
     5be:	b1 f0       	breq	.+44     	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
     5c0:	80 81       	ld	r24, Z
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	86 23       	and	r24, r22
     5c6:	97 23       	and	r25, r23
     5c8:	89 2b       	or	r24, r25
     5ca:	81 f4       	brne	.+32     	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
     5cc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <RIGHT_WALL>
     5d0:	58 13       	cpse	r21, r24
     5d2:	05 c0       	rjmp	.+10     	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
     5d4:	89 e0       	ldi	r24, 0x09	; 9
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	9a 83       	std	Y+2, r25	; 0x02
     5da:	89 83       	std	Y+1, r24	; 0x01
     5dc:	04 c0       	rjmp	.+8      	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
     5de:	8a e0       	ldi	r24, 0x0A	; 10
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	9a 83       	std	Y+2, r25	; 0x02
     5e4:	89 83       	std	Y+1, r24	; 0x01
     5e6:	c9 01       	movw	r24, r18
     5e8:	a0 dd       	rcall	.-1216   	; 0x12a <turn_off_LED.2024>
     5ea:	d8 c0       	rjmp	.+432    	; 0x79c <__LOCK_REGION_LENGTH__+0x39c>
     5ec:	2f 5f       	subi	r18, 0xFF	; 255
     5ee:	3f 4f       	sbci	r19, 0xFF	; 255
     5f0:	31 96       	adiw	r30, 0x01	; 1
     5f2:	2a 31       	cpi	r18, 0x1A	; 26
     5f4:	31 05       	cpc	r19, r1
     5f6:	09 f7       	brne	.-62     	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
     5f8:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <CEILING>
     5fc:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <RIGHT_WALL>
     600:	09 81       	ldd	r16, Y+1	; 0x01
     602:	7a 81       	ldd	r23, Y+2	; 0x02
     604:	85 2f       	mov	r24, r21
     606:	86 95       	lsr	r24
     608:	80 68       	ori	r24, 0x80	; 128
     60a:	e8 2e       	mov	r14, r24
     60c:	f1 2c       	mov	r15, r1
     60e:	e0 94       	com	r14
     610:	f0 94       	com	r15
     612:	e1 e0       	ldi	r30, 0x01	; 1
     614:	f2 e0       	ldi	r31, 0x02	; 2
     616:	ab e1       	ldi	r26, 0x1B	; 27
     618:	b2 e0       	ldi	r27, 0x02	; 2
     61a:	82 e0       	ldi	r24, 0x02	; 2
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	0f 2e       	mov	r0, r31
     620:	f7 e0       	ldi	r31, 0x07	; 7
     622:	af 2e       	mov	r10, r31
     624:	f0 2d       	mov	r31, r0
     626:	b1 2c       	mov	r11, r1
     628:	0f 2e       	mov	r0, r31
     62a:	f9 e0       	ldi	r31, 0x09	; 9
     62c:	8f 2e       	mov	r8, r31
     62e:	f0 2d       	mov	r31, r0
     630:	91 2c       	mov	r9, r1
     632:	13 13       	cpse	r17, r19
     634:	03 c0       	rjmp	.+6      	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
     636:	56 13       	cpse	r21, r22
     638:	03 c0       	rjmp	.+6      	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
     63a:	14 c0       	rjmp	.+40     	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
     63c:	56 17       	cp	r21, r22
     63e:	a9 f0       	breq	.+42     	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
     640:	22 81       	ldd	r18, Z+2	; 0x02
     642:	24 23       	and	r18, r20
     644:	a1 f0       	breq	.+40     	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
     646:	12 96       	adiw	r26, 0x02	; 2
     648:	2c 91       	ld	r18, X
     64a:	12 97       	sbiw	r26, 0x02	; 2
     64c:	c2 2e       	mov	r12, r18
     64e:	d1 2c       	mov	r13, r1
     650:	ce 20       	and	r12, r14
     652:	df 20       	and	r13, r15
     654:	cd 28       	or	r12, r13
     656:	59 f4       	brne	.+22     	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
     658:	29 e0       	ldi	r18, 0x09	; 9
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	3a 83       	std	Y+2, r19	; 0x02
     65e:	29 83       	std	Y+1, r18	; 0x01
     660:	64 dd       	rcall	.-1336   	; 0x12a <turn_off_LED.2024>
     662:	9c c0       	rjmp	.+312    	; 0x79c <__LOCK_REGION_LENGTH__+0x39c>
     664:	08 2d       	mov	r16, r8
     666:	79 2d       	mov	r23, r9
     668:	02 c0       	rjmp	.+4      	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
     66a:	0a 2d       	mov	r16, r10
     66c:	7b 2d       	mov	r23, r11
     66e:	01 96       	adiw	r24, 0x01	; 1
     670:	31 96       	adiw	r30, 0x01	; 1
     672:	11 96       	adiw	r26, 0x01	; 1
     674:	8a 31       	cpi	r24, 0x1A	; 26
     676:	91 05       	cpc	r25, r1
     678:	e1 f6       	brne	.-72     	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
     67a:	09 83       	std	Y+1, r16	; 0x01
     67c:	7a 83       	std	Y+2, r23	; 0x02
     67e:	8e c0       	rjmp	.+284    	; 0x79c <__LOCK_REGION_LENGTH__+0x39c>
     680:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <gameInPlay>
     684:	81 11       	cpse	r24, r1
     686:	17 c0       	rjmp	.+46     	; 0x6b6 <__LOCK_REGION_LENGTH__+0x2b6>
     688:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <gameInPause>
     68c:	81 30       	cpi	r24, 0x01	; 1
     68e:	99 f4       	brne	.+38     	; 0x6b6 <__LOCK_REGION_LENGTH__+0x2b6>
     690:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <gameEndTurn>
     694:	81 11       	cpse	r24, r1
     696:	0f c0       	rjmp	.+30     	; 0x6b6 <__LOCK_REGION_LENGTH__+0x2b6>
     698:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <gameOver>
     69c:	81 11       	cpse	r24, r1
     69e:	0b c0       	rjmp	.+22     	; 0x6b6 <__LOCK_REGION_LENGTH__+0x2b6>
     6a0:	89 e0       	ldi	r24, 0x09	; 9
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <PREVIOUS_STATE.2021+0x1>
     6a8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <PREVIOUS_STATE.2021>
     6ac:	84 e0       	ldi	r24, 0x04	; 4
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	9a 83       	std	Y+2, r25	; 0x02
     6b2:	89 83       	std	Y+1, r24	; 0x01
     6b4:	d2 c0       	rjmp	.+420    	; 0x85a <__LOCK_REGION_LENGTH__+0x45a>
     6b6:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <ball_row.2019>
     6ba:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <FLOOR>
     6be:	98 17       	cp	r25, r24
     6c0:	59 f0       	breq	.+22     	; 0x6d8 <__LOCK_REGION_LENGTH__+0x2d8>
     6c2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ball_column.2020>
     6c6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <LEFT_WALL>
     6ca:	98 13       	cpse	r25, r24
     6cc:	14 c0       	rjmp	.+40     	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
     6ce:	8a e0       	ldi	r24, 0x0A	; 10
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	9a 83       	std	Y+2, r25	; 0x02
     6d4:	89 83       	std	Y+1, r24	; 0x01
     6d6:	0f c0       	rjmp	.+30     	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
     6d8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ball_column.2020>
     6dc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <LEFT_WALL>
     6e0:	98 13       	cpse	r25, r24
     6e2:	05 c0       	rjmp	.+10     	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
     6e4:	88 e0       	ldi	r24, 0x08	; 8
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	9a 83       	std	Y+2, r25	; 0x02
     6ea:	89 83       	std	Y+1, r24	; 0x01
     6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
     6ee:	87 e0       	ldi	r24, 0x07	; 7
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	9a 83       	std	Y+2, r25	; 0x02
     6f4:	89 83       	std	Y+1, r24	; 0x01
     6f6:	ce 01       	movw	r24, r28
     6f8:	01 96       	adiw	r24, 0x01	; 1
     6fa:	1c 01       	movw	r2, r24
     6fc:	27 dd       	rcall	.-1458   	; 0x14c <paddle_collision_detection.2026>
     6fe:	4e c0       	rjmp	.+156    	; 0x79c <__LOCK_REGION_LENGTH__+0x39c>
     700:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <gameInPlay>
     704:	81 11       	cpse	r24, r1
     706:	17 c0       	rjmp	.+46     	; 0x736 <__LOCK_REGION_LENGTH__+0x336>
     708:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <gameInPause>
     70c:	81 30       	cpi	r24, 0x01	; 1
     70e:	99 f4       	brne	.+38     	; 0x736 <__LOCK_REGION_LENGTH__+0x336>
     710:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <gameEndTurn>
     714:	81 11       	cpse	r24, r1
     716:	0f c0       	rjmp	.+30     	; 0x736 <__LOCK_REGION_LENGTH__+0x336>
     718:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <gameOver>
     71c:	81 11       	cpse	r24, r1
     71e:	0b c0       	rjmp	.+22     	; 0x736 <__LOCK_REGION_LENGTH__+0x336>
     720:	8a e0       	ldi	r24, 0x0A	; 10
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <PREVIOUS_STATE.2021+0x1>
     728:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <PREVIOUS_STATE.2021>
     72c:	84 e0       	ldi	r24, 0x04	; 4
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	9a 83       	std	Y+2, r25	; 0x02
     732:	89 83       	std	Y+1, r24	; 0x01
     734:	92 c0       	rjmp	.+292    	; 0x85a <__LOCK_REGION_LENGTH__+0x45a>
     736:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <gameReset>
     73a:	81 30       	cpi	r24, 0x01	; 1
     73c:	29 f4       	brne	.+10     	; 0x748 <__LOCK_REGION_LENGTH__+0x348>
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	9a 83       	std	Y+2, r25	; 0x02
     744:	89 83       	std	Y+1, r24	; 0x01
     746:	20 c0       	rjmp	.+64     	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
     748:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <ball_row.2019>
     74c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <FLOOR>
     750:	98 13       	cpse	r25, r24
     752:	10 c0       	rjmp	.+32     	; 0x774 <__LOCK_REGION_LENGTH__+0x374>
     754:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ball_column.2020>
     758:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <RIGHT_WALL>
     75c:	98 13       	cpse	r25, r24
     75e:	05 c0       	rjmp	.+10     	; 0x76a <__LOCK_REGION_LENGTH__+0x36a>
     760:	87 e0       	ldi	r24, 0x07	; 7
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	9a 83       	std	Y+2, r25	; 0x02
     766:	89 83       	std	Y+1, r24	; 0x01
     768:	0f c0       	rjmp	.+30     	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
     76a:	88 e0       	ldi	r24, 0x08	; 8
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	9a 83       	std	Y+2, r25	; 0x02
     770:	89 83       	std	Y+1, r24	; 0x01
     772:	0a c0       	rjmp	.+20     	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
     774:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ball_column.2020>
     778:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <RIGHT_WALL>
     77c:	98 13       	cpse	r25, r24
     77e:	04 c0       	rjmp	.+8      	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
     780:	89 e0       	ldi	r24, 0x09	; 9
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	9a 83       	std	Y+2, r25	; 0x02
     786:	89 83       	std	Y+1, r24	; 0x01
     788:	ce 01       	movw	r24, r28
     78a:	01 96       	adiw	r24, 0x01	; 1
     78c:	1c 01       	movw	r2, r24
     78e:	de dc       	rcall	.-1604   	; 0x14c <paddle_collision_detection.2026>
     790:	05 c0       	rjmp	.+10     	; 0x79c <__LOCK_REGION_LENGTH__+0x39c>
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	9a 83       	std	Y+2, r25	; 0x02
     798:	89 83       	std	Y+1, r24	; 0x01
     79a:	62 c0       	rjmp	.+196    	; 0x860 <__LOCK_REGION_LENGTH__+0x460>
     79c:	89 81       	ldd	r24, Y+1	; 0x01
     79e:	9a 81       	ldd	r25, Y+2	; 0x02
     7a0:	fc 01       	movw	r30, r24
     7a2:	31 97       	sbiw	r30, 0x01	; 1
     7a4:	ea 30       	cpi	r30, 0x0A	; 10
     7a6:	f1 05       	cpc	r31, r1
     7a8:	08 f0       	brcs	.+2      	; 0x7ac <__LOCK_REGION_LENGTH__+0x3ac>
     7aa:	4e c0       	rjmp	.+156    	; 0x848 <__LOCK_REGION_LENGTH__+0x448>
     7ac:	ef 5a       	subi	r30, 0xAF	; 175
     7ae:	ff 4f       	sbci	r31, 0xFF	; 255
     7b0:	08 c7       	rjmp	.+3600   	; 0x15c2 <__tablejump2__>
     7b2:	20 e4       	ldi	r18, 0x40	; 64
     7b4:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <ball_row.2019>
     7b8:	2b ef       	ldi	r18, 0xFB	; 251
     7ba:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <ball_column.2020>
     7be:	44 c0       	rjmp	.+136    	; 0x848 <__LOCK_REGION_LENGTH__+0x448>
     7c0:	20 e4       	ldi	r18, 0x40	; 64
     7c2:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <ball_row.2019>
     7c6:	2b ef       	ldi	r18, 0xFB	; 251
     7c8:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <ball_column.2020>
     7cc:	3d c0       	rjmp	.+122    	; 0x848 <__LOCK_REGION_LENGTH__+0x448>
     7ce:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <ball_row.2019>
     7d2:	26 95       	lsr	r18
     7d4:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <ball_row.2019>
     7d8:	37 c0       	rjmp	.+110    	; 0x848 <__LOCK_REGION_LENGTH__+0x448>
     7da:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <ball_row.2019>
     7de:	22 0f       	add	r18, r18
     7e0:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <ball_row.2019>
     7e4:	31 c0       	rjmp	.+98     	; 0x848 <__LOCK_REGION_LENGTH__+0x448>
     7e6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ball_row.2019>
     7ea:	86 95       	lsr	r24
     7ec:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ball_row.2019>
     7f0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ball_column.2020>
     7f4:	88 0f       	add	r24, r24
     7f6:	81 60       	ori	r24, 0x01	; 1
     7f8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ball_column.2020>
     7fc:	87 e0       	ldi	r24, 0x07	; 7
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	23 c0       	rjmp	.+70     	; 0x848 <__LOCK_REGION_LENGTH__+0x448>
     802:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <ball_row.2019>
     806:	22 0f       	add	r18, r18
     808:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <ball_row.2019>
     80c:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <ball_column.2020>
     810:	22 0f       	add	r18, r18
     812:	21 60       	ori	r18, 0x01	; 1
     814:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <ball_column.2020>
     818:	17 c0       	rjmp	.+46     	; 0x848 <__LOCK_REGION_LENGTH__+0x448>
     81a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <ball_row.2019>
     81e:	26 95       	lsr	r18
     820:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <ball_row.2019>
     824:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <ball_column.2020>
     828:	26 95       	lsr	r18
     82a:	20 68       	ori	r18, 0x80	; 128
     82c:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <ball_column.2020>
     830:	0b c0       	rjmp	.+22     	; 0x848 <__LOCK_REGION_LENGTH__+0x448>
     832:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <ball_row.2019>
     836:	22 0f       	add	r18, r18
     838:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <ball_row.2019>
     83c:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <ball_column.2020>
     840:	26 95       	lsr	r18
     842:	20 68       	ori	r18, 0x80	; 128
     844:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <ball_column.2020>
     848:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <ball_row.2019>
     84c:	20 93 02 02 	sts	0x0202, r18	; 0x800202 <DISPLAY_PORTA+0x1>
     850:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <ball_column.2020>
     854:	20 93 1c 02 	sts	0x021C, r18	; 0x80021c <DISPLAY_PORTB+0x1>
     858:	11 c0       	rjmp	.+34     	; 0x87c <__LOCK_REGION_LENGTH__+0x47c>
     85a:	89 81       	ldd	r24, Y+1	; 0x01
     85c:	9a 81       	ldd	r25, Y+2	; 0x02
     85e:	f4 cf       	rjmp	.-24     	; 0x848 <__LOCK_REGION_LENGTH__+0x448>
     860:	89 81       	ldd	r24, Y+1	; 0x01
     862:	9a 81       	ldd	r25, Y+2	; 0x02
     864:	a6 cf       	rjmp	.-180    	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
     866:	89 81       	ldd	r24, Y+1	; 0x01
     868:	9a 81       	ldd	r25, Y+2	; 0x02
     86a:	aa cf       	rjmp	.-172    	; 0x7c0 <__LOCK_REGION_LENGTH__+0x3c0>
     86c:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <gameEndTurn>
     870:	81 30       	cpi	r24, 0x01	; 1
     872:	99 f7       	brne	.-26     	; 0x85a <__LOCK_REGION_LENGTH__+0x45a>
     874:	74 cd       	rjmp	.-1304   	; 0x35e <Ball_Tick+0x9e>
     876:	89 81       	ldd	r24, Y+1	; 0x01
     878:	9a 81       	ldd	r25, Y+2	; 0x02
     87a:	e6 cf       	rjmp	.-52     	; 0x848 <__LOCK_REGION_LENGTH__+0x448>
     87c:	0f 90       	pop	r0
     87e:	0f 90       	pop	r0
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	df 90       	pop	r13
     88e:	cf 90       	pop	r12
     890:	bf 90       	pop	r11
     892:	af 90       	pop	r10
     894:	9f 90       	pop	r9
     896:	8f 90       	pop	r8
     898:	3f 90       	pop	r3
     89a:	2f 90       	pop	r2
     89c:	08 95       	ret

0000089e <Brick_Tick>:
     89e:	8f 92       	push	r8
     8a0:	9f 92       	push	r9
     8a2:	bf 92       	push	r11
     8a4:	cf 92       	push	r12
     8a6:	df 92       	push	r13
     8a8:	ef 92       	push	r14
     8aa:	ff 92       	push	r15
     8ac:	0f 93       	push	r16
     8ae:	1f 93       	push	r17
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	82 30       	cpi	r24, 0x02	; 2
     8b6:	91 05       	cpc	r25, r1
     8b8:	01 f1       	breq	.+64     	; 0x8fa <Brick_Tick+0x5c>
     8ba:	83 30       	cpi	r24, 0x03	; 3
     8bc:	91 05       	cpc	r25, r1
     8be:	09 f4       	brne	.+2      	; 0x8c2 <Brick_Tick+0x24>
     8c0:	79 c0       	rjmp	.+242    	; 0x9b4 <Brick_Tick+0x116>
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	09 f4       	brne	.+2      	; 0x8c8 <Brick_Tick+0x2a>
     8c6:	76 c0       	rjmp	.+236    	; 0x9b4 <Brick_Tick+0x116>
     8c8:	a3 e0       	ldi	r26, 0x03	; 3
     8ca:	b2 e0       	ldi	r27, 0x02	; 2
     8cc:	ed e1       	ldi	r30, 0x1D	; 29
     8ce:	f2 e0       	ldi	r31, 0x02	; 2
     8d0:	20 ef       	ldi	r18, 0xF0	; 240
     8d2:	3f ef       	ldi	r19, 0xFF	; 255
     8d4:	88 ef       	ldi	r24, 0xF8	; 248
     8d6:	9f ef       	ldi	r25, 0xFF	; 255
     8d8:	68 94       	set
     8da:	bb 24       	eor	r11, r11
     8dc:	b2 f8       	bld	r11, 2
     8de:	68 94       	set
     8e0:	ee 24       	eor	r14, r14
     8e2:	e4 f8       	bld	r14, 4
     8e4:	f1 2c       	mov	r15, r1
     8e6:	0f ef       	ldi	r16, 0xFF	; 255
     8e8:	10 e0       	ldi	r17, 0x00	; 0
     8ea:	cf e7       	ldi	r28, 0x7F	; 127
     8ec:	d0 e0       	ldi	r29, 0x00	; 0
     8ee:	68 94       	set
     8f0:	cc 24       	eor	r12, r12
     8f2:	c1 f8       	bld	r12, 1
     8f4:	dd 24       	eor	r13, r13
     8f6:	d3 94       	inc	r13
     8f8:	06 c0       	rjmp	.+12     	; 0x906 <Brick_Tick+0x68>
     8fa:	20 91 ae 01 	lds	r18, 0x01AE	; 0x8001ae <gameReset>
     8fe:	21 30       	cpi	r18, 0x01	; 1
     900:	09 f0       	breq	.+2      	; 0x904 <Brick_Tick+0x66>
     902:	5a c0       	rjmp	.+180    	; 0x9b8 <Brick_Tick+0x11a>
     904:	e1 cf       	rjmp	.-62     	; 0x8c8 <Brick_Tick+0x2a>
     906:	ac 01       	movw	r20, r24
     908:	46 5f       	subi	r20, 0xF6	; 246
     90a:	5f 4f       	sbci	r21, 0xFF	; 255
     90c:	4a 30       	cpi	r20, 0x0A	; 10
     90e:	51 05       	cpc	r21, r1
     910:	bc f4       	brge	.+46     	; 0x940 <Brick_Tick+0xa2>
     912:	dc 92       	st	X, r13
     914:	42 50       	subi	r20, 0x02	; 2
     916:	51 09       	sbc	r21, r1
     918:	be 01       	movw	r22, r28
     91a:	02 c0       	rjmp	.+4      	; 0x920 <Brick_Tick+0x82>
     91c:	75 95       	asr	r23
     91e:	67 95       	ror	r22
     920:	4a 95       	dec	r20
     922:	e2 f7       	brpl	.-8      	; 0x91c <Brick_Tick+0x7e>
     924:	44 27       	eor	r20, r20
     926:	55 27       	eor	r21, r21
     928:	48 1b       	sub	r20, r24
     92a:	59 0b       	sbc	r21, r25
     92c:	48 01       	movw	r8, r16
     92e:	02 c0       	rjmp	.+4      	; 0x934 <Brick_Tick+0x96>
     930:	88 0c       	add	r8, r8
     932:	99 1c       	adc	r9, r9
     934:	4a 95       	dec	r20
     936:	e2 f7       	brpl	.-8      	; 0x930 <Brick_Tick+0x92>
     938:	a4 01       	movw	r20, r8
     93a:	46 2b       	or	r20, r22
     93c:	40 83       	st	Z, r20
     93e:	2e c0       	rjmp	.+92     	; 0x99c <Brick_Tick+0xfe>
     940:	88 30       	cpi	r24, 0x08	; 8
     942:	91 05       	cpc	r25, r1
     944:	a8 f4       	brcc	.+42     	; 0x970 <Brick_Tick+0xd2>
     946:	cc 92       	st	X, r12
     948:	44 27       	eor	r20, r20
     94a:	55 27       	eor	r21, r21
     94c:	42 1b       	sub	r20, r18
     94e:	53 0b       	sbc	r21, r19
     950:	b8 01       	movw	r22, r16
     952:	02 c0       	rjmp	.+4      	; 0x958 <Brick_Tick+0xba>
     954:	66 0f       	add	r22, r22
     956:	77 1f       	adc	r23, r23
     958:	4a 95       	dec	r20
     95a:	e2 f7       	brpl	.-8      	; 0x954 <Brick_Tick+0xb6>
     95c:	ae 01       	movw	r20, r28
     95e:	08 2e       	mov	r0, r24
     960:	02 c0       	rjmp	.+4      	; 0x966 <Brick_Tick+0xc8>
     962:	55 95       	asr	r21
     964:	47 95       	ror	r20
     966:	0a 94       	dec	r0
     968:	e2 f7       	brpl	.-8      	; 0x962 <Brick_Tick+0xc4>
     96a:	46 2b       	or	r20, r22
     96c:	40 83       	st	Z, r20
     96e:	16 c0       	rjmp	.+44     	; 0x99c <Brick_Tick+0xfe>
     970:	28 30       	cpi	r18, 0x08	; 8
     972:	31 05       	cpc	r19, r1
     974:	98 f4       	brcc	.+38     	; 0x99c <Brick_Tick+0xfe>
     976:	bc 92       	st	X, r11
     978:	a7 01       	movw	r20, r14
     97a:	48 1b       	sub	r20, r24
     97c:	59 0b       	sbc	r21, r25
     97e:	b8 01       	movw	r22, r16
     980:	02 c0       	rjmp	.+4      	; 0x986 <Brick_Tick+0xe8>
     982:	66 0f       	add	r22, r22
     984:	77 1f       	adc	r23, r23
     986:	4a 95       	dec	r20
     988:	e2 f7       	brpl	.-8      	; 0x982 <Brick_Tick+0xe4>
     98a:	ae 01       	movw	r20, r28
     98c:	02 2e       	mov	r0, r18
     98e:	02 c0       	rjmp	.+4      	; 0x994 <Brick_Tick+0xf6>
     990:	55 95       	asr	r21
     992:	47 95       	ror	r20
     994:	0a 94       	dec	r0
     996:	e2 f7       	brpl	.-8      	; 0x990 <Brick_Tick+0xf2>
     998:	46 2b       	or	r20, r22
     99a:	40 83       	st	Z, r20
     99c:	11 96       	adiw	r26, 0x01	; 1
     99e:	31 96       	adiw	r30, 0x01	; 1
     9a0:	01 96       	adiw	r24, 0x01	; 1
     9a2:	2f 5f       	subi	r18, 0xFF	; 255
     9a4:	3f 4f       	sbci	r19, 0xFF	; 255
     9a6:	80 31       	cpi	r24, 0x10	; 16
     9a8:	91 05       	cpc	r25, r1
     9aa:	09 f0       	breq	.+2      	; 0x9ae <Brick_Tick+0x110>
     9ac:	ac cf       	rjmp	.-168    	; 0x906 <Brick_Tick+0x68>
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <Brick_Tick+0x11a>
     9b4:	82 e0       	ldi	r24, 0x02	; 2
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	1f 91       	pop	r17
     9be:	0f 91       	pop	r16
     9c0:	ff 90       	pop	r15
     9c2:	ef 90       	pop	r14
     9c4:	df 90       	pop	r13
     9c6:	cf 90       	pop	r12
     9c8:	bf 90       	pop	r11
     9ca:	9f 90       	pop	r9
     9cc:	8f 90       	pop	r8
     9ce:	08 95       	ret

000009d0 <LED_MATRIX_OUTPUT_Tick>:
     9d0:	01 97       	sbiw	r24, 0x01	; 1
     9d2:	02 97       	sbiw	r24, 0x02	; 2
     9d4:	30 f5       	brcc	.+76     	; 0xa22 <LED_MATRIX_OUTPUT_Tick+0x52>
     9d6:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <index.2110>
     9da:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <index.2110+0x1>
     9de:	ef 5f       	subi	r30, 0xFF	; 255
     9e0:	fd 4f       	sbci	r31, 0xFD	; 253
     9e2:	80 81       	ld	r24, Z
     9e4:	82 b9       	out	0x02, r24	; 2
     9e6:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <index.2110>
     9ea:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <index.2110+0x1>
     9ee:	e5 5e       	subi	r30, 0xE5	; 229
     9f0:	fd 4f       	sbci	r31, 0xFD	; 253
     9f2:	80 81       	ld	r24, Z
     9f4:	85 b9       	out	0x05, r24	; 5
     9f6:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <index.2110>
     9fa:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <index.2110+0x1>
     9fe:	89 31       	cpi	r24, 0x19	; 25
     a00:	91 05       	cpc	r25, r1
     a02:	39 f4       	brne	.+14     	; 0xa12 <LED_MATRIX_OUTPUT_Tick+0x42>
     a04:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <index.2110+0x1>
     a08:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <index.2110>
     a0c:	82 e0       	ldi	r24, 0x02	; 2
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	08 95       	ret
     a12:	01 96       	adiw	r24, 0x01	; 1
     a14:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <index.2110+0x1>
     a18:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <index.2110>
     a1c:	82 e0       	ldi	r24, 0x02	; 2
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	08 95       	ret
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	08 95       	ret

00000a28 <GetNESControllerButton>:
     a28:	41 9a       	sbi	0x08, 1	; 8
     a2a:	41 98       	cbi	0x08, 1	; 8
     a2c:	40 e0       	ldi	r20, 0x00	; 0
     a2e:	50 e0       	ldi	r21, 0x00	; 0
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	26 b1       	in	r18, 0x06	; 6
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	20 95       	com	r18
     a38:	30 95       	com	r19
     a3a:	22 fb       	bst	r18, 2
     a3c:	66 27       	eor	r22, r22
     a3e:	60 f9       	bld	r22, 0
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	9b 01       	movw	r18, r22
     a44:	04 2e       	mov	r0, r20
     a46:	02 c0       	rjmp	.+4      	; 0xa4c <GetNESControllerButton+0x24>
     a48:	22 0f       	add	r18, r18
     a4a:	33 1f       	adc	r19, r19
     a4c:	0a 94       	dec	r0
     a4e:	e2 f7       	brpl	.-8      	; 0xa48 <GetNESControllerButton+0x20>
     a50:	82 2b       	or	r24, r18
     a52:	40 9a       	sbi	0x08, 0	; 8
     a54:	40 98       	cbi	0x08, 0	; 8
     a56:	4f 5f       	subi	r20, 0xFF	; 255
     a58:	5f 4f       	sbci	r21, 0xFF	; 255
     a5a:	48 30       	cpi	r20, 0x08	; 8
     a5c:	51 05       	cpc	r21, r1
     a5e:	49 f7       	brne	.-46     	; 0xa32 <GetNESControllerButton+0xa>
     a60:	08 95       	ret

00000a62 <Paddle_Tick>:
     a62:	1f 93       	push	r17
     a64:	cf 93       	push	r28
     a66:	df 93       	push	r29
     a68:	ec 01       	movw	r28, r24
     a6a:	de df       	rcall	.-68     	; 0xa28 <GetNESControllerButton>
     a6c:	18 2f       	mov	r17, r24
     a6e:	fe 01       	movw	r30, r28
     a70:	31 97       	sbiw	r30, 0x01	; 1
     a72:	e7 30       	cpi	r30, 0x07	; 7
     a74:	f1 05       	cpc	r31, r1
     a76:	08 f0       	brcs	.+2      	; 0xa7a <Paddle_Tick+0x18>
     a78:	77 c0       	rjmp	.+238    	; 0xb68 <Paddle_Tick+0x106>
     a7a:	e5 5a       	subi	r30, 0xA5	; 165
     a7c:	ff 4f       	sbci	r31, 0xFF	; 255
     a7e:	a1 c5       	rjmp	.+2882   	; 0x15c2 <__tablejump2__>
     a80:	c7 e0       	ldi	r28, 0x07	; 7
     a82:	d0 e0       	ldi	r29, 0x00	; 0
     a84:	b1 c0       	rjmp	.+354    	; 0xbe8 <Paddle_Tick+0x186>
     a86:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <gameInPlay>
     a8a:	81 30       	cpi	r24, 0x01	; 1
     a8c:	09 f0       	breq	.+2      	; 0xa90 <Paddle_Tick+0x2e>
     a8e:	ac c0       	rjmp	.+344    	; 0xbe8 <Paddle_Tick+0x186>
     a90:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <gameInPause>
     a94:	81 11       	cpse	r24, r1
     a96:	a8 c0       	rjmp	.+336    	; 0xbe8 <Paddle_Tick+0x186>
     a98:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <gameEndTurn>
     a9c:	81 11       	cpse	r24, r1
     a9e:	a4 c0       	rjmp	.+328    	; 0xbe8 <Paddle_Tick+0x186>
     aa0:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <gameOver>
     aa4:	88 23       	and	r24, r24
     aa6:	09 f4       	brne	.+2      	; 0xaaa <Paddle_Tick+0x48>
     aa8:	85 c0       	rjmp	.+266    	; 0xbb4 <Paddle_Tick+0x152>
     aaa:	9e c0       	rjmp	.+316    	; 0xbe8 <Paddle_Tick+0x186>
     aac:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <NES_LEFT_DPAD>
     ab0:	18 13       	cpse	r17, r24
     ab2:	12 c0       	rjmp	.+36     	; 0xad8 <Paddle_Tick+0x76>
     ab4:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <gameInPlay>
     ab8:	81 30       	cpi	r24, 0x01	; 1
     aba:	21 f5       	brne	.+72     	; 0xb04 <Paddle_Tick+0xa2>
     abc:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <gameInPause>
     ac0:	81 11       	cpse	r24, r1
     ac2:	3c c0       	rjmp	.+120    	; 0xb3c <Paddle_Tick+0xda>
     ac4:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <gameEndTurn>
     ac8:	81 11       	cpse	r24, r1
     aca:	89 c0       	rjmp	.+274    	; 0xbde <Paddle_Tick+0x17c>
     acc:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <gameOver>
     ad0:	88 23       	and	r24, r24
     ad2:	09 f4       	brne	.+2      	; 0xad6 <Paddle_Tick+0x74>
     ad4:	74 c0       	rjmp	.+232    	; 0xbbe <Paddle_Tick+0x15c>
     ad6:	83 c0       	rjmp	.+262    	; 0xbde <Paddle_Tick+0x17c>
     ad8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <NES_RIGHT_DPAD>
     adc:	18 13       	cpse	r17, r24
     ade:	12 c0       	rjmp	.+36     	; 0xb04 <Paddle_Tick+0xa2>
     ae0:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <gameInPlay>
     ae4:	81 30       	cpi	r24, 0x01	; 1
     ae6:	71 f4       	brne	.+28     	; 0xb04 <Paddle_Tick+0xa2>
     ae8:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <gameInPause>
     aec:	81 11       	cpse	r24, r1
     aee:	26 c0       	rjmp	.+76     	; 0xb3c <Paddle_Tick+0xda>
     af0:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <gameEndTurn>
     af4:	81 11       	cpse	r24, r1
     af6:	22 c0       	rjmp	.+68     	; 0xb3c <Paddle_Tick+0xda>
     af8:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <gameOver>
     afc:	88 23       	and	r24, r24
     afe:	09 f4       	brne	.+2      	; 0xb02 <Paddle_Tick+0xa0>
     b00:	63 c0       	rjmp	.+198    	; 0xbc8 <Paddle_Tick+0x166>
     b02:	1c c0       	rjmp	.+56     	; 0xb3c <Paddle_Tick+0xda>
     b04:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <gameInPlay>
     b08:	81 11       	cpse	r24, r1
     b0a:	18 c0       	rjmp	.+48     	; 0xb3c <Paddle_Tick+0xda>
     b0c:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <gameInPause>
     b10:	81 30       	cpi	r24, 0x01	; 1
     b12:	51 f4       	brne	.+20     	; 0xb28 <Paddle_Tick+0xc6>
     b14:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <gameEndTurn>
     b18:	81 11       	cpse	r24, r1
     b1a:	10 c0       	rjmp	.+32     	; 0xb3c <Paddle_Tick+0xda>
     b1c:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <gameOver>
     b20:	88 23       	and	r24, r24
     b22:	09 f4       	brne	.+2      	; 0xb26 <Paddle_Tick+0xc4>
     b24:	59 c0       	rjmp	.+178    	; 0xbd8 <Paddle_Tick+0x176>
     b26:	0a c0       	rjmp	.+20     	; 0xb3c <Paddle_Tick+0xda>
     b28:	81 11       	cpse	r24, r1
     b2a:	08 c0       	rjmp	.+16     	; 0xb3c <Paddle_Tick+0xda>
     b2c:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <gameEndTurn>
     b30:	81 30       	cpi	r24, 0x01	; 1
     b32:	a1 f1       	breq	.+104    	; 0xb9c <Paddle_Tick+0x13a>
     b34:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <gameOver>
     b38:	81 30       	cpi	r24, 0x01	; 1
     b3a:	99 f1       	breq	.+102    	; 0xba2 <Paddle_Tick+0x140>
     b3c:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <gameReset>
     b40:	81 30       	cpi	r24, 0x01	; 1
     b42:	c1 f5       	brne	.+112    	; 0xbb4 <Paddle_Tick+0x152>
     b44:	11 c0       	rjmp	.+34     	; 0xb68 <Paddle_Tick+0x106>
     b46:	70 df       	rcall	.-288    	; 0xa28 <GetNESControllerButton>
     b48:	88 23       	and	r24, r24
     b4a:	a1 f1       	breq	.+104    	; 0xbb4 <Paddle_Tick+0x152>
     b4c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <button_hold_count.1981>
     b50:	82 30       	cpi	r24, 0x02	; 2
     b52:	20 f4       	brcc	.+8      	; 0xb5c <Paddle_Tick+0xfa>
     b54:	8f 5f       	subi	r24, 0xFF	; 255
     b56:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <button_hold_count.1981>
     b5a:	46 c0       	rjmp	.+140    	; 0xbe8 <Paddle_Tick+0x186>
     b5c:	10 34       	cpi	r17, 0x40	; 64
     b5e:	79 f1       	breq	.+94     	; 0xbbe <Paddle_Tick+0x15c>
     b60:	10 38       	cpi	r17, 0x80	; 128
     b62:	09 f0       	breq	.+2      	; 0xb66 <Paddle_Tick+0x104>
     b64:	41 c0       	rjmp	.+130    	; 0xbe8 <Paddle_Tick+0x186>
     b66:	30 c0       	rjmp	.+96     	; 0xbc8 <Paddle_Tick+0x166>
     b68:	80 e8       	ldi	r24, 0x80	; 128
     b6a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <bottom_row.1979>
     b6e:	88 ef       	ldi	r24, 0xF8	; 248
     b70:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <paddle_pos.1980>
     b74:	c1 e0       	ldi	r28, 0x01	; 1
     b76:	d0 e0       	ldi	r29, 0x00	; 0
     b78:	37 c0       	rjmp	.+110    	; 0xbe8 <Paddle_Tick+0x186>
     b7a:	88 0f       	add	r24, r24
     b7c:	81 60       	ori	r24, 0x01	; 1
     b7e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <paddle_pos.1980>
     b82:	c5 e0       	ldi	r28, 0x05	; 5
     b84:	d0 e0       	ldi	r29, 0x00	; 0
     b86:	30 c0       	rjmp	.+96     	; 0xbe8 <Paddle_Tick+0x186>
     b88:	86 95       	lsr	r24
     b8a:	80 68       	ori	r24, 0x80	; 128
     b8c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <paddle_pos.1980>
     b90:	c6 e0       	ldi	r28, 0x06	; 6
     b92:	d0 e0       	ldi	r29, 0x00	; 0
     b94:	29 c0       	rjmp	.+82     	; 0xbe8 <Paddle_Tick+0x186>
     b96:	c3 e0       	ldi	r28, 0x03	; 3
     b98:	d0 e0       	ldi	r29, 0x00	; 0
     b9a:	26 c0       	rjmp	.+76     	; 0xbe8 <Paddle_Tick+0x186>
     b9c:	c3 e0       	ldi	r28, 0x03	; 3
     b9e:	d0 e0       	ldi	r29, 0x00	; 0
     ba0:	23 c0       	rjmp	.+70     	; 0xbe8 <Paddle_Tick+0x186>
     ba2:	c3 e0       	ldi	r28, 0x03	; 3
     ba4:	d0 e0       	ldi	r29, 0x00	; 0
     ba6:	20 c0       	rjmp	.+64     	; 0xbe8 <Paddle_Tick+0x186>
     ba8:	c5 e0       	ldi	r28, 0x05	; 5
     baa:	d0 e0       	ldi	r29, 0x00	; 0
     bac:	1d c0       	rjmp	.+58     	; 0xbe8 <Paddle_Tick+0x186>
     bae:	c6 e0       	ldi	r28, 0x06	; 6
     bb0:	d0 e0       	ldi	r29, 0x00	; 0
     bb2:	1a c0       	rjmp	.+52     	; 0xbe8 <Paddle_Tick+0x186>
     bb4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <button_hold_count.1981>
     bb8:	c4 e0       	ldi	r28, 0x04	; 4
     bba:	d0 e0       	ldi	r29, 0x00	; 0
     bbc:	15 c0       	rjmp	.+42     	; 0xbe8 <Paddle_Tick+0x186>
     bbe:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <paddle_pos.1980>
     bc2:	8f 31       	cpi	r24, 0x1F	; 31
     bc4:	d1 f6       	brne	.-76     	; 0xb7a <Paddle_Tick+0x118>
     bc6:	f0 cf       	rjmp	.-32     	; 0xba8 <Paddle_Tick+0x146>
     bc8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <paddle_pos.1980>
     bcc:	88 3f       	cpi	r24, 0xF8	; 248
     bce:	e1 f6       	brne	.-72     	; 0xb88 <Paddle_Tick+0x126>
     bd0:	ee cf       	rjmp	.-36     	; 0xbae <Paddle_Tick+0x14c>
     bd2:	c3 e0       	ldi	r28, 0x03	; 3
     bd4:	d0 e0       	ldi	r29, 0x00	; 0
     bd6:	08 c0       	rjmp	.+16     	; 0xbe8 <Paddle_Tick+0x186>
     bd8:	c3 e0       	ldi	r28, 0x03	; 3
     bda:	d0 e0       	ldi	r29, 0x00	; 0
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <Paddle_Tick+0x186>
     bde:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <NES_RIGHT_DPAD>
     be2:	18 13       	cpse	r17, r24
     be4:	ab cf       	rjmp	.-170    	; 0xb3c <Paddle_Tick+0xda>
     be6:	84 cf       	rjmp	.-248    	; 0xaf0 <Paddle_Tick+0x8e>
     be8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <bottom_row.1979>
     bec:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <DISPLAY_PORTA>
     bf0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <paddle_pos.1980>
     bf4:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <DISPLAY_PORTB>
     bf8:	ce 01       	movw	r24, r28
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	1f 91       	pop	r17
     c00:	08 95       	ret

00000c02 <TimerSet>:
     c02:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <_avr_timer_M>
     c06:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <_avr_timer_M+0x1>
     c0a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <_avr_timer_M+0x2>
     c0e:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <_avr_timer_M+0x3>
     c12:	60 93 b2 01 	sts	0x01B2, r22	; 0x8001b2 <_avr_timer_cntcurr>
     c16:	70 93 b3 01 	sts	0x01B3, r23	; 0x8001b3 <_avr_timer_cntcurr+0x1>
     c1a:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <_avr_timer_cntcurr+0x2>
     c1e:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <_avr_timer_cntcurr+0x3>
     c22:	08 95       	ret

00000c24 <TimerOn>:
     c24:	8b e0       	ldi	r24, 0x0B	; 11
     c26:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     c2a:	8d e7       	ldi	r24, 0x7D	; 125
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     c32:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     c36:	82 e0       	ldi	r24, 0x02	; 2
     c38:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     c3c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     c40:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     c44:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <_avr_timer_M>
     c48:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <_avr_timer_M+0x1>
     c4c:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <_avr_timer_M+0x2>
     c50:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <_avr_timer_M+0x3>
     c54:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <_avr_timer_cntcurr>
     c58:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <_avr_timer_cntcurr+0x1>
     c5c:	a0 93 b4 01 	sts	0x01B4, r26	; 0x8001b4 <_avr_timer_cntcurr+0x2>
     c60:	b0 93 b5 01 	sts	0x01B5, r27	; 0x8001b5 <_avr_timer_cntcurr+0x3>
     c64:	8f b7       	in	r24, 0x3f	; 63
     c66:	80 68       	ori	r24, 0x80	; 128
     c68:	8f bf       	out	0x3f, r24	; 63
     c6a:	08 95       	ret

00000c6c <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
     c6c:	18 16       	cp	r1, r24
     c6e:	19 06       	cpc	r1, r25
     c70:	5c f0       	brlt	.+22     	; 0xc88 <delay_ms+0x1c>
     c72:	08 95       	ret
    for(j=0;j<775;j++)
  {
   asm("nop");
     c74:	00 00       	nop
     c76:	21 50       	subi	r18, 0x01	; 1
     c78:	31 09       	sbc	r19, r1
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
     c7a:	e1 f7       	brne	.-8      	; 0xc74 <delay_ms+0x8>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
     c7c:	4f 5f       	subi	r20, 0xFF	; 255
     c7e:	5f 4f       	sbci	r21, 0xFF	; 255
     c80:	84 17       	cp	r24, r20
     c82:	95 07       	cpc	r25, r21
     c84:	19 f4       	brne	.+6      	; 0xc8c <delay_ms+0x20>
     c86:	08 95       	ret
     c88:	40 e0       	ldi	r20, 0x00	; 0
     c8a:	50 e0       	ldi	r21, 0x00	; 0
   }
}

void delay_ms(int miliSec) //for 8 Mhz crystal

{
     c8c:	27 e0       	ldi	r18, 0x07	; 7
     c8e:	33 e0       	ldi	r19, 0x03	; 3
     c90:	f1 cf       	rjmp	.-30     	; 0xc74 <delay_ms+0x8>

00000c92 <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);						 
}

void LCD_WriteCommand (unsigned char Command) {
   CLR_BIT(CONTROL_BUS,RS);
     c92:	46 98       	cbi	0x08, 6	; 8
   DATA_BUS = Command;
     c94:	8b b9       	out	0x0b, r24	; 11
   SET_BIT(CONTROL_BUS,E);
     c96:	47 9a       	sbi	0x08, 7	; 8
   asm("nop");
     c98:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
     c9a:	47 98       	cbi	0x08, 7	; 8
   delay_ms(2); // ClearScreen requires 1.52ms to execute
     c9c:	82 e0       	ldi	r24, 0x02	; 2
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	e5 cf       	rjmp	.-54     	; 0xc6c <delay_ms>
     ca2:	08 95       	ret

00000ca4 <LCD_ClearScreen>:
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	f5 cf       	rjmp	.-22     	; 0xc92 <LCD_WriteCommand>
     ca8:	08 95       	ret

00000caa <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
     caa:	81 31       	cpi	r24, 0x11	; 17
     cac:	18 f4       	brcc	.+6      	; 0xcb4 <LCD_Cursor+0xa>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
     cae:	81 58       	subi	r24, 0x81	; 129
     cb0:	f0 cf       	rjmp	.-32     	; 0xc92 <LCD_WriteCommand>
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
     cb2:	08 95       	ret
     cb4:	81 55       	subi	r24, 0x51	; 81
     cb6:	ed cf       	rjmp	.-38     	; 0xc92 <LCD_WriteCommand>
     cb8:	08 95       	ret

00000cba <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
     cba:	84 e6       	ldi	r24, 0x64	; 100
     cbc:	90 e0       	ldi	r25, 0x00	; 0
	LCD_WriteCommand(0x38);
     cbe:	d6 df       	rcall	.-84     	; 0xc6c <delay_ms>
	LCD_WriteCommand(0x06);
     cc0:	88 e3       	ldi	r24, 0x38	; 56
	LCD_WriteCommand(0x0f);
     cc2:	e7 df       	rcall	.-50     	; 0xc92 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
     cc4:	86 e0       	ldi	r24, 0x06	; 6
     cc6:	e5 df       	rcall	.-54     	; 0xc92 <LCD_WriteCommand>
	delay_ms(10);						 
     cc8:	8f e0       	ldi	r24, 0x0F	; 15
     cca:	e3 df       	rcall	.-58     	; 0xc92 <LCD_WriteCommand>
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	e1 df       	rcall	.-62     	; 0xc92 <LCD_WriteCommand>
     cd0:	8a e0       	ldi	r24, 0x0A	; 10
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	cb cf       	rjmp	.-106    	; 0xc6c <delay_ms>
     cd6:	08 95       	ret

00000cd8 <LCD_WriteData>:
   CLR_BIT(CONTROL_BUS,E);
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
     cd8:	46 9a       	sbi	0x08, 6	; 8
   DATA_BUS = Data;
     cda:	8b b9       	out	0x0b, r24	; 11
   SET_BIT(CONTROL_BUS,E);
     cdc:	47 9a       	sbi	0x08, 7	; 8
   asm("nop");
     cde:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
     ce0:	47 98       	cbi	0x08, 7	; 8
   delay_ms(1);
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	c2 cf       	rjmp	.-124    	; 0xc6c <delay_ms>
     ce8:	08 95       	ret

00000cea <LCD_DisplayString>:
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
     cea:	0f 93       	push	r16
     cec:	1f 93       	push	r17
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	18 2f       	mov	r17, r24
   LCD_ClearScreen();
     cf4:	eb 01       	movw	r28, r22
   unsigned char c = column;
   while(*string) {
     cf6:	d6 df       	rcall	.-84     	; 0xca4 <LCD_ClearScreen>
     cf8:	88 81       	ld	r24, Y
     cfa:	88 23       	and	r24, r24
      LCD_Cursor(c++);
     cfc:	51 f0       	breq	.+20     	; 0xd12 <LCD_DisplayString+0x28>
     cfe:	01 e0       	ldi	r16, 0x01	; 1
     d00:	01 0f       	add	r16, r17
      LCD_WriteData(*string++);
     d02:	81 2f       	mov	r24, r17
     d04:	d2 df       	rcall	.-92     	; 0xcaa <LCD_Cursor>
     d06:	89 91       	ld	r24, Y+

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
     d08:	e7 df       	rcall	.-50     	; 0xcd8 <LCD_WriteData>
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
     d0a:	10 2f       	mov	r17, r16
     d0c:	88 81       	ld	r24, Y
     d0e:	81 11       	cpse	r24, r1
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
     d10:	f6 cf       	rjmp	.-20     	; 0xcfe <LCD_DisplayString+0x14>
     d12:	df 91       	pop	r29
     d14:	cf 91       	pop	r28
     d16:	1f 91       	pop	r17
     d18:	0f 91       	pop	r16
     d1a:	08 95       	ret

00000d1c <GAME_Tick>:

// ====================
// GAME_TICK:OUTPUT TO LED matrix
// ====================
enum G_States {G_START, G_INIT, G_MENU, G_WAIT1, G_PLAY, G_WAIT2, G_WAIT3, G_PAUSE, G_ENDTURN, G_GAME_OVER,  G_RESET};
int GAME_Tick(int state) {
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29

	// === Local Variables ===
	unsigned char button = GetNESControllerButton();
     d20:	ec 01       	movw	r28, r24
	unsigned static short game_over_count = 0; 
	unsigned static short game_over_display_time = 5000;
	unsigned static short reset_count = 0;

	// === Transitions ===
	switch (state) {
     d22:	82 de       	rcall	.-764    	; 0xa28 <GetNESControllerButton>
     d24:	fe 01       	movw	r30, r28
     d26:	31 97       	sbiw	r30, 0x01	; 1
     d28:	ea 30       	cpi	r30, 0x0A	; 10
     d2a:	f1 05       	cpc	r31, r1
     d2c:	08 f0       	brcs	.+2      	; 0xd30 <GAME_Tick+0x14>
     d2e:	d7 c0       	rjmp	.+430    	; 0xede <GAME_Tick+0x1c2>
     d30:	ee 59       	subi	r30, 0x9E	; 158
     d32:	ff 4f       	sbci	r31, 0xFF	; 255
				state = G_WAIT2;
			}
		break;

		case G_PAUSE:
			state = G_WAIT1;
     d34:	46 c4       	rjmp	.+2188   	; 0x15c2 <__tablejump2__>
     d36:	c3 e0       	ldi	r28, 0x03	; 3
     d38:	d0 e0       	ldi	r29, 0x00	; 0
			state = G_MENU;
			gameInPlay = 0x00;
			gameInPause = 0x00;
			gameEndTurn = 0x00;
			gameOver = 0x00;
			gameReset = 0x00;
     d3a:	3e c1       	rjmp	.+636    	; 0xfb8 <GAME_Tick+0x29c>
     d3c:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <gameReset>
		break;

		case G_MENU:
			if (button == NES_START)
     d40:	fe c0       	rjmp	.+508    	; 0xf3e <GAME_Tick+0x222>
     d42:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <NES_START>
     d46:	89 13       	cpse	r24, r25
     d48:	fa c0       	rjmp	.+500    	; 0xf3e <GAME_Tick+0x222>
				state = G_WAIT1;
			}
		break;
		
		case G_WAIT1:
			if (button != NES_START)
     d4a:	25 c1       	rjmp	.+586    	; 0xf96 <GAME_Tick+0x27a>
     d4c:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <NES_START>
     d50:	89 13       	cpse	r24, r25
     d52:	e1 c0       	rjmp	.+450    	; 0xf16 <GAME_Tick+0x1fa>
		case G_PLAY:
			state = G_WAIT2;
		break;

		case G_WAIT2:
			if (!(button == NES_START) && (gameInPlay == 0x01) && (gameOver==0x00)&& (gameInPause == 0x00) && (gameEndTurn == 0x00))
     d54:	31 c1       	rjmp	.+610    	; 0xfb8 <GAME_Tick+0x29c>
     d56:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <NES_START>
     d5a:	89 17       	cp	r24, r25
     d5c:	91 f0       	breq	.+36     	; 0xd82 <GAME_Tick+0x66>
     d5e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <gameInPlay>
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	99 f5       	brne	.+102    	; 0xdcc <GAME_Tick+0xb0>
     d66:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <gameOver>
     d6a:	81 11       	cpse	r24, r1
     d6c:	1a c1       	rjmp	.+564    	; 0xfa2 <GAME_Tick+0x286>
     d6e:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <gameInPause>
     d72:	81 11       	cpse	r24, r1
     d74:	16 c1       	rjmp	.+556    	; 0xfa2 <GAME_Tick+0x286>
     d76:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <gameEndTurn>
     d7a:	88 23       	and	r24, r24
     d7c:	09 f4       	brne	.+2      	; 0xd80 <GAME_Tick+0x64>
     d7e:	1c c1       	rjmp	.+568    	; 0xfb8 <GAME_Tick+0x29c>
			{
				state = G_WAIT2;
			}
			else if ((button==NES_START) && (button==NES_SELECT))
     d80:	10 c1       	rjmp	.+544    	; 0xfa2 <GAME_Tick+0x286>
     d82:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <NES_SELECT>
     d86:	89 17       	cp	r24, r25
     d88:	09 f4       	brne	.+2      	; 0xd8c <GAME_Tick+0x70>
			{
				state = G_RESET;
			}
			else if ((button == NES_START) && (gameInPlay == 0x01) && (gameOver==0x00) && (gameInPause == 0x00) && (gameEndTurn == 0x00))
     d8a:	f0 c0       	rjmp	.+480    	; 0xf6c <GAME_Tick+0x250>
     d8c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <gameInPlay>
     d90:	81 30       	cpi	r24, 0x01	; 1
     d92:	e1 f4       	brne	.+56     	; 0xdcc <GAME_Tick+0xb0>
     d94:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <gameOver>
     d98:	81 11       	cpse	r24, r1
     d9a:	18 c0       	rjmp	.+48     	; 0xdcc <GAME_Tick+0xb0>
     d9c:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <gameInPause>
     da0:	81 11       	cpse	r24, r1
     da2:	05 c0       	rjmp	.+10     	; 0xdae <GAME_Tick+0x92>
     da4:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <gameEndTurn>
     da8:	88 23       	and	r24, r24
     daa:	09 f4       	brne	.+2      	; 0xdae <GAME_Tick+0x92>
			{
				state = G_WAIT3;
			}
			else if ((gameInPlay == 0x01) && (gameOver==0x00)&& (gameInPause == 0x00) && (gameEndTurn == 0x01))
     dac:	f7 c0       	rjmp	.+494    	; 0xf9c <GAME_Tick+0x280>
     dae:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <gameInPause>
     db2:	81 11       	cpse	r24, r1
     db4:	fc c0       	rjmp	.+504    	; 0xfae <GAME_Tick+0x292>
     db6:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <gameEndTurn>
     dba:	81 30       	cpi	r24, 0x01	; 1
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <GAME_Tick+0xa4>
			{
				 state = G_ENDTURN;
				 gameNumberOfTurns--;
     dbe:	fc c0       	rjmp	.+504    	; 0xfb8 <GAME_Tick+0x29c>
     dc0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <gameNumberOfTurns>
     dc4:	81 50       	subi	r24, 0x01	; 1
     dc6:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <gameNumberOfTurns>
			}
			else if ((gameEndTurn == 0x01))
     dca:	c4 c0       	rjmp	.+392    	; 0xf54 <GAME_Tick+0x238>
     dcc:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <gameEndTurn>
     dd0:	81 30       	cpi	r24, 0x01	; 1
			{
				state = G_ENDTURN;
				gameNumberOfTurns--;
     dd2:	31 f4       	brne	.+12     	; 0xde0 <GAME_Tick+0xc4>
     dd4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <gameNumberOfTurns>
     dd8:	81 50       	subi	r24, 0x01	; 1
     dda:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <gameNumberOfTurns>
			}
			else if ((gameOver==0x01))
     dde:	ba c0       	rjmp	.+372    	; 0xf54 <GAME_Tick+0x238>
     de0:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <gameOver>
     de4:	81 30       	cpi	r24, 0x01	; 1
     de6:	09 f0       	breq	.+2      	; 0xdea <GAME_Tick+0xce>
     de8:	e7 c0       	rjmp	.+462    	; 0xfb8 <GAME_Tick+0x29c>
		case G_PAUSE:
			state = G_WAIT1;
		break;

		case G_ENDTURN:
			if ((button == NES_START) && (gameNumberOfTurns > 0x00))
     dea:	a9 c0       	rjmp	.+338    	; 0xf3e <GAME_Tick+0x222>
     dec:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <NES_START>
     df0:	89 13       	cpse	r24, r25
     df2:	10 c0       	rjmp	.+32     	; 0xe14 <GAME_Tick+0xf8>
     df4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <gameNumberOfTurns>
     df8:	88 23       	and	r24, r24
			{
				gameInPlay = 0x01;
     dfa:	81 f0       	breq	.+32     	; 0xe1c <GAME_Tick+0x100>
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <gameInPlay>
				gameInPause = 0x00;
     e02:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <gameInPause>
				gameEndTurn = 0x00;
     e06:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <gameEndTurn>
				gameOver = 0x00;
     e0a:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <gameOver>
				state = G_WAIT1;
     e0e:	c3 e0       	ldi	r28, 0x03	; 3
     e10:	d0 e0       	ldi	r29, 0x00	; 0
			}
			else if (gameNumberOfTurns <= 0x00)
     e12:	d2 c0       	rjmp	.+420    	; 0xfb8 <GAME_Tick+0x29c>
     e14:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <gameNumberOfTurns>
     e18:	81 11       	cpse	r24, r1
			{
				gameInPlay = 0x00;
     e1a:	9c c0       	rjmp	.+312    	; 0xf54 <GAME_Tick+0x238>
     e1c:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <gameInPlay>
				gameInPause = 0x00;
     e20:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <gameInPause>
				gameEndTurn = 0x00;
     e24:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <gameEndTurn>
				gameOver = 0x01;
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <gameOver>
				state = G_GAME_OVER;
     e2e:	c9 e0       	ldi	r28, 0x09	; 9
     e30:	d0 e0       	ldi	r29, 0x00	; 0
			}
		break;

		case G_GAME_OVER:
			if (game_over_count >= game_over_display_time)
     e32:	c2 c0       	rjmp	.+388    	; 0xfb8 <GAME_Tick+0x29c>
     e34:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <game_over_count.2194>
     e38:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <game_over_count.2194+0x1>
     e3c:	88 38       	cpi	r24, 0x88	; 136
     e3e:	93 41       	sbci	r25, 0x13	; 19
			{
				if (SCORE > HIGH_SCORE)
     e40:	a8 f0       	brcs	.+42     	; 0xe6c <GAME_Tick+0x150>
     e42:	60 91 b1 01 	lds	r22, 0x01B1	; 0x8001b1 <SCORE>
     e46:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <HIGH_SCORE>
     e4a:	86 17       	cp	r24, r22
				{
					HIGH_SCORE&=0;
					HIGH_SCORE|=SCORE;
     e4c:	28 f4       	brcc	.+10     	; 0xe58 <GAME_Tick+0x13c>
					eeprom_write_byte ((uint8_t*)46 , HIGH_SCORE );
     e4e:	60 93 b7 01 	sts	0x01B7, r22	; 0x8001b7 <HIGH_SCORE>
     e52:	8e e2       	ldi	r24, 0x2E	; 46
				state = G_RESET; // RESET GAME		
				gameInPlay = 0x00;
				gameInPause = 0x00;
				gameEndTurn = 0x00;
				gameReset = 0x01;
				SCORE = 0x00;
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	d8 d3       	rcall	.+1968   	; 0x1608 <eeprom_write_byte>
				gameNumberOfTurns = 0x03;
     e58:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <SCORE>
     e5c:	83 e0       	ldi	r24, 0x03	; 3
				game_over_count = 0;
     e5e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <gameNumberOfTurns>
     e62:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <game_over_count.2194+0x1>
     e66:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <game_over_count.2194>
			}
			else 
			{
				// RECORD HIGH SCORE
				if (SCORE > HIGH_SCORE)
     e6a:	80 c0       	rjmp	.+256    	; 0xf6c <GAME_Tick+0x250>
     e6c:	60 91 b1 01 	lds	r22, 0x01B1	; 0x8001b1 <SCORE>
     e70:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <HIGH_SCORE>
				{
					HIGH_SCORE&=0;
					HIGH_SCORE|=SCORE;
     e74:	86 17       	cp	r24, r22
					eeprom_write_byte ((uint8_t*)46 , HIGH_SCORE );
     e76:	28 f4       	brcc	.+10     	; 0xe82 <GAME_Tick+0x166>
     e78:	60 93 b7 01 	sts	0x01B7, r22	; 0x8001b7 <HIGH_SCORE>
     e7c:	8e e2       	ldi	r24, 0x2E	; 46
				}
				game_over_count++;
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	c3 d3       	rcall	.+1926   	; 0x1608 <eeprom_write_byte>
     e82:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <game_over_count.2194>
     e86:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <game_over_count.2194+0x1>
     e8a:	01 96       	adiw	r24, 0x01	; 1
     e8c:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <game_over_count.2194+0x1>
     e90:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <game_over_count.2194>
// 				gameNumberOfTurns = 0x03;
// 				game_over_count = 0x0000;
		break;

		case G_RESET:
			if (((button != NES_START) || (button != NES_SELECT)) && (reset_count > longestPeriod + 100))
     e94:	91 c0       	rjmp	.+290    	; 0xfb8 <GAME_Tick+0x29c>
     e96:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <NES_START>
     e9a:	89 13       	cpse	r24, r25
     e9c:	04 c0       	rjmp	.+8      	; 0xea6 <GAME_Tick+0x18a>
     e9e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <NES_SELECT>
     ea2:	89 17       	cp	r24, r25
     ea4:	61 f0       	breq	.+24     	; 0xebe <GAME_Tick+0x1a2>
     ea6:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__data_end>
     eaa:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <__data_end+0x1>
     eae:	8d 32       	cpi	r24, 0x2D	; 45
			{
				state = G_INIT;
				reset_count = 0;
     eb0:	91 40       	sbci	r25, 0x01	; 1
     eb2:	28 f0       	brcs	.+10     	; 0xebe <GAME_Tick+0x1a2>
     eb4:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <__data_end+0x1>
     eb8:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <__data_end>
			}
			else
			{
				
				if (reset_count == 0)
     ebc:	10 c0       	rjmp	.+32     	; 0xede <GAME_Tick+0x1c2>
     ebe:	c0 91 a2 01 	lds	r28, 0x01A2	; 0x8001a2 <__data_end>
     ec2:	d0 91 a3 01 	lds	r29, 0x01A3	; 0x8001a3 <__data_end+0x1>
				{	
					LCD_DisplayString(1, "LOADING...      ");
     ec6:	20 97       	sbiw	r28, 0x00	; 0
     ec8:	21 f4       	brne	.+8      	; 0xed2 <GAME_Tick+0x1b6>
     eca:	68 e1       	ldi	r22, 0x18	; 24
     ecc:	71 e0       	ldi	r23, 0x01	; 1
				}
				reset_count++;
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	0c df       	rcall	.-488    	; 0xcea <LCD_DisplayString>
     ed2:	21 96       	adiw	r28, 0x01	; 1
     ed4:	d0 93 a3 01 	sts	0x01A3, r29	; 0x8001a3 <__data_end+0x1>
     ed8:	c0 93 a2 01 	sts	0x01A2, r28	; 0x8001a2 <__data_end>
	switch (state) {
		case G_START:
		break;
		
		case G_INIT:
			gameInPlay = 0x00;
     edc:	47 c0       	rjmp	.+142    	; 0xf6c <GAME_Tick+0x250>
			gameInPause = 0x00;
     ede:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <gameInPlay>
			gameEndTurn = 0x00;
     ee2:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <gameInPause>
			gameOver = 0x00;
     ee6:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <gameEndTurn>

			if (SCORE > HIGH_SCORE)
     eea:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <gameOver>
     eee:	60 91 b1 01 	lds	r22, 0x01B1	; 0x8001b1 <SCORE>
     ef2:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <HIGH_SCORE>
			{
				HIGH_SCORE = SCORE;
     ef6:	86 17       	cp	r24, r22
				eeprom_write_byte ((uint8_t*)46 , HIGH_SCORE );
     ef8:	28 f4       	brcc	.+10     	; 0xf04 <GAME_Tick+0x1e8>
     efa:	60 93 b7 01 	sts	0x01B7, r22	; 0x8001b7 <HIGH_SCORE>
     efe:	8e e2       	ldi	r24, 0x2E	; 46

			}

			SCORE = 0x00;
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	82 d3       	rcall	.+1796   	; 0x1608 <eeprom_write_byte>
			game_over_count = 0;
     f04:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <SCORE>
     f08:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <game_over_count.2194+0x1>
		break;
     f0c:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <game_over_count.2194>
     f10:	c1 e0       	ldi	r28, 0x01	; 1
		
		case G_WAIT1:
		break;

		case G_PLAY:
			gameInPlay = 0x01;
     f12:	d0 e0       	ldi	r29, 0x00	; 0
     f14:	51 c0       	rjmp	.+162    	; 0xfb8 <GAME_Tick+0x29c>
     f16:	81 e0       	ldi	r24, 0x01	; 1
			gameInPause = 0x00;
     f18:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <gameInPlay>
			gameEndTurn = 0x00;
     f1c:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <gameInPause>
			gameOver = 0x00;
     f20:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <gameEndTurn>
		break;
     f24:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <gameOver>
			gameReset = 0x01;
			gameEndTurn = 0x00;

			if (SCORE > HIGH_SCORE)
			{
				HIGH_SCORE = SCORE;
     f28:	c4 e0       	ldi	r28, 0x04	; 4
     f2a:	d0 e0       	ldi	r29, 0x00	; 0
				eeprom_write_byte ((uint8_t*)46 , HIGH_SCORE );
     f2c:	45 c0       	rjmp	.+138    	; 0xfb8 <GAME_Tick+0x29c>
     f2e:	60 93 b7 01 	sts	0x01B7, r22	; 0x8001b7 <HIGH_SCORE>
     f32:	8e e2       	ldi	r24, 0x2E	; 46
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	68 d3       	rcall	.+1744   	; 0x1608 <eeprom_write_byte>
     f38:	ca e0       	ldi	r28, 0x0A	; 10
			SCORE = 0x00;
			game_over_count = 0;
		break;

		case G_MENU:
			gameInPlay = 0x00;
     f3a:	d0 e0       	ldi	r29, 0x00	; 0
     f3c:	3d c0       	rjmp	.+122    	; 0xfb8 <GAME_Tick+0x29c>
			gameInPause = 0x00;
     f3e:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <gameInPlay>
			gameEndTurn = 0x00;
     f42:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <gameInPause>
			gameOver = 0x00;
     f46:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <gameEndTurn>
		break;
     f4a:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <gameOver>
     f4e:	c2 e0       	ldi	r28, 0x02	; 2

		case G_WAIT3:
		break;
		
		case G_ENDTURN:
			gameInPlay = 0x00;
     f50:	d0 e0       	ldi	r29, 0x00	; 0
     f52:	32 c0       	rjmp	.+100    	; 0xfb8 <GAME_Tick+0x29c>
			gameInPause = 0x00;
     f54:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <gameInPlay>
			gameEndTurn = 0x01;
     f58:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <gameInPause>
     f5c:	81 e0       	ldi	r24, 0x01	; 1
			gameOver = 0x00;
     f5e:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <gameEndTurn>
		break;
     f62:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <gameOver>
     f66:	c8 e0       	ldi	r28, 0x08	; 8
			gameEndTurn = 0x00;
			gameOver = 0x00;
		break;

		case G_RESET:
			gameInPlay = 0x00;
     f68:	d0 e0       	ldi	r29, 0x00	; 0
     f6a:	26 c0       	rjmp	.+76     	; 0xfb8 <GAME_Tick+0x29c>
			gameInPause = 0x00;
     f6c:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <gameInPlay>
			gameReset = 0x01;
     f70:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <gameInPause>
     f74:	81 e0       	ldi	r24, 0x01	; 1
			gameEndTurn = 0x00;
     f76:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <gameReset>

			if (SCORE > HIGH_SCORE)
     f7a:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <gameEndTurn>
     f7e:	60 91 b1 01 	lds	r22, 0x01B1	; 0x8001b1 <SCORE>
     f82:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <HIGH_SCORE>
     f86:	86 17       	cp	r24, r22
     f88:	90 f2       	brcs	.-92     	; 0xf2e <GAME_Tick+0x212>
     f8a:	ca e0       	ldi	r28, 0x0A	; 10
				state = G_PLAY;
			}
		break;

		case G_PLAY:
			state = G_WAIT2;
     f8c:	d0 e0       	ldi	r29, 0x00	; 0
     f8e:	14 c0       	rjmp	.+40     	; 0xfb8 <GAME_Tick+0x29c>
     f90:	c5 e0       	ldi	r28, 0x05	; 5
		break;

		case G_MENU:
			if (button == NES_START)
			{
				state = G_WAIT1;
     f92:	d0 e0       	ldi	r29, 0x00	; 0
     f94:	11 c0       	rjmp	.+34     	; 0xfb8 <GAME_Tick+0x29c>
     f96:	c3 e0       	ldi	r28, 0x03	; 3
			{
				state = G_RESET;
			}
			else if ((button == NES_START) && (gameInPlay == 0x01) && (gameOver==0x00) && (gameInPause == 0x00) && (gameEndTurn == 0x00))
			{
				state = G_WAIT3;
     f98:	d0 e0       	ldi	r29, 0x00	; 0
     f9a:	0e c0       	rjmp	.+28     	; 0xfb8 <GAME_Tick+0x29c>
     f9c:	c6 e0       	ldi	r28, 0x06	; 6
			}
			else if ((gameInPlay == 0x01) && (gameOver==0x00)&& (gameInPause == 0x00) && (gameEndTurn == 0x01))
     f9e:	d0 e0       	ldi	r29, 0x00	; 0
     fa0:	0b c0       	rjmp	.+22     	; 0xfb8 <GAME_Tick+0x29c>
     fa2:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <gameOver>
     fa6:	88 23       	and	r24, r24
     fa8:	09 f4       	brne	.+2      	; 0xfac <GAME_Tick+0x290>
			{
				 state = G_ENDTURN;
				 gameNumberOfTurns--;
			}
			else if ((gameEndTurn == 0x01))
     faa:	01 cf       	rjmp	.-510    	; 0xdae <GAME_Tick+0x92>
     fac:	0f cf       	rjmp	.-482    	; 0xdcc <GAME_Tick+0xb0>
     fae:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <gameEndTurn>
     fb2:	81 30       	cpi	r24, 0x01	; 1
		
		default:
		break;
	}
	return state;
};
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <GAME_Tick+0x29c>
     fb6:	0e cf       	rjmp	.-484    	; 0xdd4 <GAME_Tick+0xb8>
     fb8:	ce 01       	movw	r24, r28
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	08 95       	ret

00000fc0 <LCD_OUTPUT_Tick>:
// ====================
// LCD_OUTPUT_TICK:OUTPUT TO LED matrix
// ====================
enum LCD_O_States {LCD_O_START, LCD_O_INIT, LCD_O_DISPLAY_MENU, LCD_O_DISPLAY_HIGH_SCORE, LCD_O_DISPLAY_AUTHOR,LCD_O_DISPLAY_SCORE, 
				   LCD_O_DISPLAY_PAUSE, LCD_O_DISPLAY_TURNS_REMAINING, LCD_O_DISPLAY_GAME_OVER, LCD_O_WAIT};
int LCD_OUTPUT_Tick(int state) {
     fc0:	1f 93       	push	r17
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	ec 01       	movw	r28, r24
	static unsigned char SCORE_HUNDREDS_PLACE = 0x00;
	static unsigned char SCORE_TENS_PLACE = 0x00;
	static unsigned char SCORE_ONES_PLACE = 0x00;
	static unsigned char score_count = 0x01;
	// === Transitions ===
	switch (state) {
     fc8:	fc 01       	movw	r30, r24
     fca:	31 97       	sbiw	r30, 0x01	; 1
     fcc:	e9 30       	cpi	r30, 0x09	; 9
     fce:	f1 05       	cpc	r31, r1
     fd0:	08 f0       	brcs	.+2      	; 0xfd4 <LCD_OUTPUT_Tick+0x14>
     fd2:	94 c0       	rjmp	.+296    	; 0x10fc <LCD_OUTPUT_Tick+0x13c>
     fd4:	e4 59       	subi	r30, 0x94	; 148
     fd6:	ff 4f       	sbci	r31, 0xFF	; 255
		case LCD_O_INIT:
			state = LCD_O_WAIT;
		break;

		case LCD_O_WAIT:
				if ((NES_DOWN_DPAD == GetNESControllerButton()) && (gameInPlay == 0x00) && (gameInPause == 0x00) && (gameEndTurn == 0x00) && (gameOver==0x00))
     fd8:	f4 c2       	rjmp	.+1512   	; 0x15c2 <__tablejump2__>
     fda:	26 dd       	rcall	.-1460   	; 0xa28 <GetNESControllerButton>
     fdc:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <NES_DOWN_DPAD>
     fe0:	89 13       	cpse	r24, r25
     fe2:	11 c0       	rjmp	.+34     	; 0x1006 <LCD_OUTPUT_Tick+0x46>
     fe4:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <gameInPlay>
     fe8:	81 11       	cpse	r24, r1
     fea:	0d c0       	rjmp	.+26     	; 0x1006 <LCD_OUTPUT_Tick+0x46>
     fec:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <gameInPause>
     ff0:	81 11       	cpse	r24, r1
     ff2:	09 c0       	rjmp	.+18     	; 0x1006 <LCD_OUTPUT_Tick+0x46>
     ff4:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <gameEndTurn>
     ff8:	81 11       	cpse	r24, r1
     ffa:	05 c0       	rjmp	.+10     	; 0x1006 <LCD_OUTPUT_Tick+0x46>
     ffc:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <gameOver>
    1000:	88 23       	and	r24, r24
    1002:	09 f4       	brne	.+2      	; 0x1006 <LCD_OUTPUT_Tick+0x46>
				{
					state = LCD_O_DISPLAY_HIGH_SCORE;
				}
				else if ((NES_UP_DPAD == GetNESControllerButton()) && (gameInPlay == 0x00) && (gameInPause == 0x00) && (gameEndTurn == 0x00) && (gameOver==0x00))
    1004:	86 c1       	rjmp	.+780    	; 0x1312 <LCD_OUTPUT_Tick+0x352>
    1006:	10 dd       	rcall	.-1504   	; 0xa28 <GetNESControllerButton>
    1008:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <NES_UP_DPAD>
    100c:	89 13       	cpse	r24, r25
    100e:	12 c0       	rjmp	.+36     	; 0x1034 <LCD_OUTPUT_Tick+0x74>
    1010:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <gameInPlay>
    1014:	81 11       	cpse	r24, r1
    1016:	9b c1       	rjmp	.+822    	; 0x134e <LCD_OUTPUT_Tick+0x38e>
    1018:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <gameInPause>
    101c:	81 11       	cpse	r24, r1
    101e:	2a c0       	rjmp	.+84     	; 0x1074 <LCD_OUTPUT_Tick+0xb4>
    1020:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <gameEndTurn>
    1024:	81 11       	cpse	r24, r1
    1026:	0e c0       	rjmp	.+28     	; 0x1044 <LCD_OUTPUT_Tick+0x84>
    1028:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <gameOver>
    102c:	88 23       	and	r24, r24
    102e:	09 f4       	brne	.+2      	; 0x1032 <LCD_OUTPUT_Tick+0x72>
    1030:	7e c1       	rjmp	.+764    	; 0x132e <LCD_OUTPUT_Tick+0x36e>
    1032:	08 c0       	rjmp	.+16     	; 0x1044 <LCD_OUTPUT_Tick+0x84>
				{
					state = LCD_O_DISPLAY_AUTHOR;
				}
				else if ((gameInPlay == 0x00) && (gameInPause == 0x00) && (gameEndTurn == 0x00) && (gameOver==0x00))
    1034:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <gameInPlay>
    1038:	81 11       	cpse	r24, r1
    103a:	89 c1       	rjmp	.+786    	; 0x134e <LCD_OUTPUT_Tick+0x38e>
    103c:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <gameInPause>
    1040:	81 11       	cpse	r24, r1
    1042:	18 c0       	rjmp	.+48     	; 0x1074 <LCD_OUTPUT_Tick+0xb4>
    1044:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <gameEndTurn>
    1048:	81 11       	cpse	r24, r1
    104a:	85 c1       	rjmp	.+778    	; 0x1356 <LCD_OUTPUT_Tick+0x396>
    104c:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <gameOver>
    1050:	88 23       	and	r24, r24
    1052:	09 f4       	brne	.+2      	; 0x1056 <LCD_OUTPUT_Tick+0x96>
    1054:	74 c1       	rjmp	.+744    	; 0x133e <LCD_OUTPUT_Tick+0x37e>
    1056:	7f c1       	rjmp	.+766    	; 0x1356 <LCD_OUTPUT_Tick+0x396>
				{
					state = LCD_O_DISPLAY_MENU;
				}
				else if ((gameInPlay == 0x01) && (gameInPause == 0x00) && (gameEndTurn == 0x00) && (gameOver==0x00))
    1058:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <gameInPause>
    105c:	81 11       	cpse	r24, r1
    105e:	34 c0       	rjmp	.+104    	; 0x10c8 <LCD_OUTPUT_Tick+0x108>
    1060:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <gameEndTurn>
    1064:	81 11       	cpse	r24, r1
    1066:	7f c1       	rjmp	.+766    	; 0x1366 <LCD_OUTPUT_Tick+0x3a6>
    1068:	50 91 ac 01 	lds	r21, 0x01AC	; 0x8001ac <gameOver>
    106c:	55 23       	and	r21, r21
    106e:	09 f4       	brne	.+2      	; 0x1072 <LCD_OUTPUT_Tick+0xb2>
    1070:	a0 c0       	rjmp	.+320    	; 0x11b2 <LCD_OUTPUT_Tick+0x1f2>
    1072:	79 c1       	rjmp	.+754    	; 0x1366 <LCD_OUTPUT_Tick+0x3a6>
				{
					state = LCD_O_DISPLAY_SCORE;
				}
				else if ((gameInPlay == 0x00) && (gameInPause == 0x01) && (gameEndTurn == 0x00) && (gameOver==0x00))
    1074:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <gameInPause>
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	51 f4       	brne	.+20     	; 0x1090 <LCD_OUTPUT_Tick+0xd0>
    107c:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <gameEndTurn>
    1080:	81 11       	cpse	r24, r1
    1082:	6c c1       	rjmp	.+728    	; 0x135c <LCD_OUTPUT_Tick+0x39c>
    1084:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <gameOver>
    1088:	88 23       	and	r24, r24
    108a:	09 f4       	brne	.+2      	; 0x108e <LCD_OUTPUT_Tick+0xce>
    108c:	4d c1       	rjmp	.+666    	; 0x1328 <LCD_OUTPUT_Tick+0x368>
    108e:	66 c1       	rjmp	.+716    	; 0x135c <LCD_OUTPUT_Tick+0x39c>
				{
					state = LCD_O_DISPLAY_PAUSE;
				}
				else if ((gameInPlay == 0x00) && (gameInPause == 0x00) && (gameEndTurn == 0x01) && (gameOver==0x00))
    1090:	81 11       	cpse	r24, r1
    1092:	1a c0       	rjmp	.+52     	; 0x10c8 <LCD_OUTPUT_Tick+0x108>
    1094:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <gameEndTurn>
    1098:	81 30       	cpi	r24, 0x01	; 1
    109a:	61 f4       	brne	.+24     	; 0x10b4 <LCD_OUTPUT_Tick+0xf4>
    109c:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <gameOver>
    10a0:	88 23       	and	r24, r24
    10a2:	09 f4       	brne	.+2      	; 0x10a6 <LCD_OUTPUT_Tick+0xe6>
    10a4:	da c0       	rjmp	.+436    	; 0x125a <LCD_OUTPUT_Tick+0x29a>
    10a6:	06 c0       	rjmp	.+12     	; 0x10b4 <LCD_OUTPUT_Tick+0xf4>
				{
					state = LCD_O_DISPLAY_TURNS_REMAINING;
				}
				else if ((gameInPlay == 0x01) && (gameInPause == 0x00) && (gameEndTurn == 0x01) && (gameOver==0x00))
    10a8:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <gameOver>
    10ac:	88 23       	and	r24, r24
    10ae:	09 f4       	brne	.+2      	; 0x10b2 <LCD_OUTPUT_Tick+0xf2>
    10b0:	d4 c0       	rjmp	.+424    	; 0x125a <LCD_OUTPUT_Tick+0x29a>
    10b2:	0a c0       	rjmp	.+20     	; 0x10c8 <LCD_OUTPUT_Tick+0x108>
				{
					state = LCD_O_DISPLAY_TURNS_REMAINING;
				}
				else if (((gameInPlay == 0x00) && (gameInPause == 0x00)) && ((gameEndTurn == 0x00) || (gameOver==0x01)))
    10b4:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <gameEndTurn>
    10b8:	88 23       	and	r24, r24
    10ba:	09 f4       	brne	.+2      	; 0x10be <LCD_OUTPUT_Tick+0xfe>
    10bc:	df c0       	rjmp	.+446    	; 0x127c <LCD_OUTPUT_Tick+0x2bc>
    10be:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <gameOver>
    10c2:	81 30       	cpi	r24, 0x01	; 1
    10c4:	31 f4       	brne	.+12     	; 0x10d2 <LCD_OUTPUT_Tick+0x112>
    10c6:	da c0       	rjmp	.+436    	; 0x127c <LCD_OUTPUT_Tick+0x2bc>
				{
					state = LCD_O_DISPLAY_GAME_OVER;
				}
				else if ((gameOver==0x01))
    10c8:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <gameOver>
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	09 f4       	brne	.+2      	; 0x10d2 <LCD_OUTPUT_Tick+0x112>
    10d0:	d5 c0       	rjmp	.+426    	; 0x127c <LCD_OUTPUT_Tick+0x2bc>
				{
					state = LCD_O_DISPLAY_GAME_OVER;
				}
				else if (gameReset == 0x01)
    10d2:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <gameReset>
    10d6:	81 30       	cpi	r24, 0x01	; 1
				{
					state = LCD_O_INIT;
				}
				else
				{
					LCD_DisplayString(1,"ERROR");
    10d8:	89 f0       	breq	.+34     	; 0x10fc <LCD_OUTPUT_Tick+0x13c>
    10da:	69 e2       	ldi	r22, 0x29	; 41
    10dc:	71 e0       	ldi	r23, 0x01	; 1
    10de:	81 e0       	ldi	r24, 0x01	; 1
		case  LCD_O_DISPLAY_MENU:
			state = LCD_O_WAIT;
		break;

		case LCD_O_DISPLAY_HIGH_SCORE:
			if (NES_DOWN_DPAD != GetNESControllerButton())
    10e0:	04 de       	rcall	.-1016   	; 0xcea <LCD_DisplayString>
    10e2:	47 c1       	rjmp	.+654    	; 0x1372 <LCD_OUTPUT_Tick+0x3b2>
    10e4:	a1 dc       	rcall	.-1726   	; 0xa28 <GetNESControllerButton>
    10e6:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <NES_DOWN_DPAD>
    10ea:	89 13       	cpse	r24, r25
				state = LCD_O_DISPLAY_MENU;
			}
		break;

		case LCD_O_DISPLAY_AUTHOR:
		if (NES_UP_DPAD != GetNESControllerButton())
    10ec:	28 c1       	rjmp	.+592    	; 0x133e <LCD_OUTPUT_Tick+0x37e>
    10ee:	11 c1       	rjmp	.+546    	; 0x1312 <LCD_OUTPUT_Tick+0x352>
    10f0:	9b dc       	rcall	.-1738   	; 0xa28 <GetNESControllerButton>
    10f2:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <NES_UP_DPAD>
    10f6:	89 13       	cpse	r24, r25
	{
		case LCD_O_START:
		break;
		
		case LCD_O_INIT:
			LCD_ClearScreen();
    10f8:	22 c1       	rjmp	.+580    	; 0x133e <LCD_OUTPUT_Tick+0x37e>
    10fa:	19 c1       	rjmp	.+562    	; 0x132e <LCD_OUTPUT_Tick+0x36e>
			SCORE_HUNDREDS_PLACE = 0x00;
    10fc:	d3 dd       	rcall	.-1114   	; 0xca4 <LCD_ClearScreen>
    10fe:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <SCORE_HUNDREDS_PLACE.2140>
			SCORE_TENS_PLACE = 0x00;
			SCORE_ONES_PLACE = 0x00;
    1102:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <SCORE_TENS_PLACE.2141>
			score_count = 0;

		break;
    1106:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <SCORE_ONES_PLACE.2142>

		case LCD_O_DISPLAY_MENU:
			if (state != PREV_STATE)
			{
				LCD_Cursor(0x01);
    110a:	c1 e0       	ldi	r28, 0x01	; 1
    110c:	d0 e0       	ldi	r29, 0x00	; 0
    110e:	31 c1       	rjmp	.+610    	; 0x1372 <LCD_OUTPUT_Tick+0x3b2>
				LCD_DisplayString(1, "BRICK BREAKER!  PRESS START");
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	cb dd       	rcall	.-1130   	; 0xcaa <LCD_Cursor>
    1114:	6f e2       	ldi	r22, 0x2F	; 47
    1116:	71 e0       	ldi	r23, 0x01	; 1
    1118:	81 e0       	ldi	r24, 0x01	; 1
			}
			PREV_STATE = state;
    111a:	e7 dd       	rcall	.-1074   	; 0xcea <LCD_DisplayString>
    111c:	82 e0       	ldi	r24, 0x02	; 2
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1124:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		break;
    1128:	c2 e0       	ldi	r28, 0x02	; 2
    112a:	d0 e0       	ldi	r29, 0x00	; 0

		case LCD_O_DISPLAY_HIGH_SCORE:
			if (state != PREV_STATE)
			{

				for (unsigned char high_score_index = 0;  high_score_index < HIGH_SCORE; high_score_index++ )
    112c:	22 c1       	rjmp	.+580    	; 0x1372 <LCD_OUTPUT_Tick+0x3b2>
    112e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <HIGH_SCORE>
    1132:	91 11       	cpse	r25, r1
    1134:	0d c0       	rjmp	.+26     	; 0x1150 <LCD_OUTPUT_Tick+0x190>
    1136:	c0 e0       	ldi	r28, 0x00	; 0
    1138:	d0 e0       	ldi	r29, 0x00	; 0
    113a:	10 e0       	ldi	r17, 0x00	; 0
				{
					if (HIGH_SCORE_TENS_PLACE == 0x0A)
    113c:	11 c0       	rjmp	.+34     	; 0x1160 <LCD_OUTPUT_Tick+0x1a0>
    113e:	da 30       	cpi	r29, 0x0A	; 10
					{
						HIGH_SCORE_HUNDREDS_PLACE++;
    1140:	11 f4       	brne	.+4      	; 0x1146 <LCD_OUTPUT_Tick+0x186>
						HIGH_SCORE_TENS_PLACE = 0;
    1142:	1f 5f       	subi	r17, 0xFF	; 255
					}
					if (HIGH_SCORE_ONES_PLACE == 0x0A)
    1144:	d0 e0       	ldi	r29, 0x00	; 0
    1146:	ca 30       	cpi	r28, 0x0A	; 10
					{
						HIGH_SCORE_TENS_PLACE++;
    1148:	39 f4       	brne	.+14     	; 0x1158 <LCD_OUTPUT_Tick+0x198>
						HIGH_SCORE_ONES_PLACE = 0;
    114a:	df 5f       	subi	r29, 0xFF	; 255
    114c:	c0 e0       	ldi	r28, 0x00	; 0

		case LCD_O_DISPLAY_HIGH_SCORE:
			if (state != PREV_STATE)
			{

				for (unsigned char high_score_index = 0;  high_score_index < HIGH_SCORE; high_score_index++ )
    114e:	04 c0       	rjmp	.+8      	; 0x1158 <LCD_OUTPUT_Tick+0x198>
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	10 e0       	ldi	r17, 0x00	; 0
    1154:	c0 e0       	ldi	r28, 0x00	; 0
						HIGH_SCORE_TENS_PLACE++;
						HIGH_SCORE_ONES_PLACE = 0;
					}
					HIGH_SCORE_ONES_PLACE++;
				}
				LCD_DisplayString(1, "HIGH SCORE:");
    1156:	d0 e0       	ldi	r29, 0x00	; 0
    1158:	cf 5f       	subi	r28, 0xFF	; 255
				LCD_WriteData('0' + HIGH_SCORE_HUNDREDS_PLACE);
    115a:	8f 5f       	subi	r24, 0xFF	; 255
    115c:	89 13       	cpse	r24, r25
				LCD_WriteData('0' + HIGH_SCORE_TENS_PLACE);
    115e:	ef cf       	rjmp	.-34     	; 0x113e <LCD_OUTPUT_Tick+0x17e>
    1160:	6b e4       	ldi	r22, 0x4B	; 75
    1162:	71 e0       	ldi	r23, 0x01	; 1
    1164:	81 e0       	ldi	r24, 0x01	; 1
				LCD_WriteData('0' + HIGH_SCORE_ONES_PLACE);
    1166:	c1 dd       	rcall	.-1150   	; 0xcea <LCD_DisplayString>
    1168:	80 e3       	ldi	r24, 0x30	; 48
    116a:	81 0f       	add	r24, r17
    116c:	b5 dd       	rcall	.-1174   	; 0xcd8 <LCD_WriteData>
				LCD_WriteData('0'); // Make the score a little bigger =P
    116e:	80 e3       	ldi	r24, 0x30	; 48
    1170:	8d 0f       	add	r24, r29
				LCD_Cursor(0x30);
    1172:	b2 dd       	rcall	.-1180   	; 0xcd8 <LCD_WriteData>
    1174:	80 e3       	ldi	r24, 0x30	; 48
				HIGH_SCORE_HUNDREDS_PLACE = 0;
				HIGH_SCORE_TENS_PLACE = 0;
				HIGH_SCORE_ONES_PLACE = 0;

			}
			PREV_STATE = state;
    1176:	8c 0f       	add	r24, r28
    1178:	af dd       	rcall	.-1186   	; 0xcd8 <LCD_WriteData>
    117a:	80 e3       	ldi	r24, 0x30	; 48
    117c:	ad dd       	rcall	.-1190   	; 0xcd8 <LCD_WriteData>
    117e:	80 e3       	ldi	r24, 0x30	; 48
    1180:	94 dd       	rcall	.-1240   	; 0xcaa <LCD_Cursor>
		break;
    1182:	83 e0       	ldi	r24, 0x03	; 3
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>

		case LCD_O_DISPLAY_AUTHOR:
		if (state != PREV_STATE)
		{
			LCD_Cursor(0x01);
    118a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			LCD_DisplayString(1, "Programmer      Rick Boshae");
    118e:	c3 e0       	ldi	r28, 0x03	; 3
    1190:	d0 e0       	ldi	r29, 0x00	; 0
    1192:	ef c0       	rjmp	.+478    	; 0x1372 <LCD_OUTPUT_Tick+0x3b2>
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	89 dd       	rcall	.-1262   	; 0xcaa <LCD_Cursor>
		}
		PREV_STATE = state;
    1198:	67 e5       	ldi	r22, 0x57	; 87
    119a:	71 e0       	ldi	r23, 0x01	; 1
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	a5 dd       	rcall	.-1206   	; 0xcea <LCD_DisplayString>
    11a0:	84 e0       	ldi	r24, 0x04	; 4
    11a2:	90 e0       	ldi	r25, 0x00	; 0
		break;
    11a4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    11a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>

		case LCD_O_DISPLAY_SCORE:
				// Express SCORE by factors of 10
				if (SCORE != PREV_SCORE)
    11ac:	c4 e0       	ldi	r28, 0x04	; 4
    11ae:	d0 e0       	ldi	r29, 0x00	; 0
    11b0:	e0 c0       	rjmp	.+448    	; 0x1372 <LCD_OUTPUT_Tick+0x3b2>
    11b2:	30 91 b1 01 	lds	r19, 0x01B1	; 0x8001b1 <SCORE>
    11b6:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <PREV_SCORE.2139>
				{
					for (unsigned char score_index = 0;  score_index < SCORE; score_index++ )
    11ba:	38 17       	cp	r19, r24
    11bc:	09 f4       	brne	.+2      	; 0x11c0 <LCD_OUTPUT_Tick+0x200>
    11be:	44 c0       	rjmp	.+136    	; 0x1248 <LCD_OUTPUT_Tick+0x288>
    11c0:	33 23       	and	r19, r19
    11c2:	c9 f0       	breq	.+50     	; 0x11f6 <LCD_OUTPUT_Tick+0x236>
    11c4:	40 91 a9 01 	lds	r20, 0x01A9	; 0x8001a9 <SCORE_HUNDREDS_PLACE.2140>
    11c8:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <SCORE_TENS_PLACE.2141>
					{
						if (SCORE_TENS_PLACE == 0x0A)
    11cc:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <SCORE_ONES_PLACE.2142>
						{
							SCORE_HUNDREDS_PLACE++;
							SCORE_TENS_PLACE = 0;
						}
						if (SCORE_ONES_PLACE == 0x0A)
    11d0:	90 e0       	ldi	r25, 0x00	; 0
						{
							SCORE_TENS_PLACE++;
    11d2:	2a 30       	cpi	r18, 0x0A	; 10

		case LCD_O_DISPLAY_SCORE:
				// Express SCORE by factors of 10
				if (SCORE != PREV_SCORE)
				{
					for (unsigned char score_index = 0;  score_index < SCORE; score_index++ )
    11d4:	11 f4       	brne	.+4      	; 0x11da <LCD_OUTPUT_Tick+0x21a>
    11d6:	4f 5f       	subi	r20, 0xFF	; 255
    11d8:	25 2f       	mov	r18, r21
    11da:	8a 30       	cpi	r24, 0x0A	; 10
    11dc:	11 f4       	brne	.+4      	; 0x11e2 <LCD_OUTPUT_Tick+0x222>
    11de:	2f 5f       	subi	r18, 0xFF	; 255
							SCORE_TENS_PLACE++;
							SCORE_ONES_PLACE = 0;
						}
						SCORE_ONES_PLACE++;
					}
					LCD_DisplayString(1, "SCORE:");
    11e0:	85 2f       	mov	r24, r21
    11e2:	8f 5f       	subi	r24, 0xFF	; 255
    11e4:	9f 5f       	subi	r25, 0xFF	; 255
					LCD_WriteData('0' + SCORE_HUNDREDS_PLACE);
    11e6:	39 13       	cpse	r19, r25
    11e8:	f4 cf       	rjmp	.-24     	; 0x11d2 <LCD_OUTPUT_Tick+0x212>
    11ea:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <SCORE_ONES_PLACE.2142>
    11ee:	20 93 a8 01 	sts	0x01A8, r18	; 0x8001a8 <SCORE_TENS_PLACE.2141>
					LCD_WriteData('0' + SCORE_TENS_PLACE);
    11f2:	40 93 a9 01 	sts	0x01A9, r20	; 0x8001a9 <SCORE_HUNDREDS_PLACE.2140>
    11f6:	6f e8       	ldi	r22, 0x8F	; 143
    11f8:	71 e0       	ldi	r23, 0x01	; 1
					LCD_WriteData('0' + SCORE_ONES_PLACE);
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	76 dd       	rcall	.-1300   	; 0xcea <LCD_DisplayString>
    11fe:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <SCORE_HUNDREDS_PLACE.2140>
					LCD_WriteData('0'); // Make the score a little bigger =P
    1202:	80 5d       	subi	r24, 0xD0	; 208
    1204:	69 dd       	rcall	.-1326   	; 0xcd8 <LCD_WriteData>
    1206:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <SCORE_TENS_PLACE.2141>
					LCD_Cursor(0x30);
    120a:	80 5d       	subi	r24, 0xD0	; 208
    120c:	65 dd       	rcall	.-1334   	; 0xcd8 <LCD_WriteData>

					SCORE_HUNDREDS_PLACE = 0;
    120e:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <SCORE_ONES_PLACE.2142>
					SCORE_TENS_PLACE = 0;
    1212:	80 5d       	subi	r24, 0xD0	; 208
    1214:	61 dd       	rcall	.-1342   	; 0xcd8 <LCD_WriteData>
					SCORE_ONES_PLACE = 0;
    1216:	80 e3       	ldi	r24, 0x30	; 48
    1218:	5f dd       	rcall	.-1346   	; 0xcd8 <LCD_WriteData>

					if (SCORE > HIGH_SCORE)
    121a:	80 e3       	ldi	r24, 0x30	; 48
    121c:	46 dd       	rcall	.-1396   	; 0xcaa <LCD_Cursor>
    121e:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <SCORE_HUNDREDS_PLACE.2140>
    1222:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <SCORE_TENS_PLACE.2141>
					{
						HIGH_SCORE&=0;
						HIGH_SCORE|=SCORE;
						eeprom_update_byte ((uint8_t*)46 , HIGH_SCORE );
    1226:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <SCORE_ONES_PLACE.2142>
    122a:	60 91 b1 01 	lds	r22, 0x01B1	; 0x8001b1 <SCORE>
					}

					PREV_SCORE = SCORE;
    122e:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <HIGH_SCORE>
    1232:	86 17       	cp	r24, r22
				}
			PREV_STATE = state;
    1234:	28 f4       	brcc	.+10     	; 0x1240 <LCD_OUTPUT_Tick+0x280>
    1236:	60 93 b7 01 	sts	0x01B7, r22	; 0x8001b7 <HIGH_SCORE>
    123a:	8e e2       	ldi	r24, 0x2E	; 46
    123c:	90 e0       	ldi	r25, 0x00	; 0
			
		break;
    123e:	d2 d1       	rcall	.+932    	; 0x15e4 <eeprom_update_byte>
    1240:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <SCORE>
		
		case LCD_O_DISPLAY_TURNS_REMAINING:

			LCD_DisplayString(1, "TURNS LEFT:");
    1244:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <PREV_SCORE.2139>
    1248:	85 e0       	ldi	r24, 0x05	; 5
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
			LCD_WriteData('0' + gameNumberOfTurns);
    1250:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1254:	c5 e0       	ldi	r28, 0x05	; 5
    1256:	d0 e0       	ldi	r29, 0x00	; 0
			PREV_STATE = state;
    1258:	8c c0       	rjmp	.+280    	; 0x1372 <LCD_OUTPUT_Tick+0x3b2>
    125a:	63 e7       	ldi	r22, 0x73	; 115
    125c:	71 e0       	ldi	r23, 0x01	; 1
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	44 dd       	rcall	.-1400   	; 0xcea <LCD_DisplayString>
    1262:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <gameNumberOfTurns>

		break;
    1266:	80 5d       	subi	r24, 0xD0	; 208
    1268:	37 dd       	rcall	.-1426   	; 0xcd8 <LCD_WriteData>

		case LCD_O_DISPLAY_GAME_OVER:
			LCD_DisplayString(1, "GAME OVER!      SCORE:");
    126a:	87 e0       	ldi	r24, 0x07	; 7
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1272:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			// Express SCORE by factors of 10
			for (unsigned char score_index = 0;  score_index < SCORE; score_index++ )
    1276:	c7 e0       	ldi	r28, 0x07	; 7
    1278:	d0 e0       	ldi	r29, 0x00	; 0
    127a:	7b c0       	rjmp	.+246    	; 0x1372 <LCD_OUTPUT_Tick+0x3b2>
    127c:	6f e7       	ldi	r22, 0x7F	; 127
    127e:	71 e0       	ldi	r23, 0x01	; 1
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	33 dd       	rcall	.-1434   	; 0xcea <LCD_DisplayString>
    1284:	30 91 b1 01 	lds	r19, 0x01B1	; 0x8001b1 <SCORE>
					SCORE_TENS_PLACE = 0;
				}
				if (SCORE_ONES_PLACE == 0x0A)
				{
					SCORE_TENS_PLACE++;
					SCORE_ONES_PLACE = 0;
    1288:	33 23       	and	r19, r19
				}
				SCORE_ONES_PLACE++;
    128a:	c9 f0       	breq	.+50     	; 0x12be <LCD_OUTPUT_Tick+0x2fe>
		break;

		case LCD_O_DISPLAY_GAME_OVER:
			LCD_DisplayString(1, "GAME OVER!      SCORE:");
			// Express SCORE by factors of 10
			for (unsigned char score_index = 0;  score_index < SCORE; score_index++ )
    128c:	40 91 a9 01 	lds	r20, 0x01A9	; 0x8001a9 <SCORE_HUNDREDS_PLACE.2140>
    1290:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <SCORE_TENS_PLACE.2141>
    1294:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <SCORE_ONES_PLACE.2142>
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	2a 30       	cpi	r18, 0x0A	; 10
    129c:	11 f4       	brne	.+4      	; 0x12a2 <LCD_OUTPUT_Tick+0x2e2>
					SCORE_TENS_PLACE++;
					SCORE_ONES_PLACE = 0;
				}
				SCORE_ONES_PLACE++;
			}
				LCD_WriteData('0' + SCORE_HUNDREDS_PLACE);
    129e:	4f 5f       	subi	r20, 0xFF	; 255
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	8a 30       	cpi	r24, 0x0A	; 10
    12a4:	11 f4       	brne	.+4      	; 0x12aa <LCD_OUTPUT_Tick+0x2ea>
				LCD_WriteData('0' + SCORE_TENS_PLACE);
    12a6:	2f 5f       	subi	r18, 0xFF	; 255
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	8f 5f       	subi	r24, 0xFF	; 255
    12ac:	9f 5f       	subi	r25, 0xFF	; 255
				LCD_WriteData('0' + SCORE_ONES_PLACE);
    12ae:	93 13       	cpse	r25, r19
    12b0:	f4 cf       	rjmp	.-24     	; 0x129a <LCD_OUTPUT_Tick+0x2da>
    12b2:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <SCORE_ONES_PLACE.2142>
    12b6:	20 93 a8 01 	sts	0x01A8, r18	; 0x8001a8 <SCORE_TENS_PLACE.2141>
				LCD_WriteData('0'); // Make the score a little bigger =P
    12ba:	40 93 a9 01 	sts	0x01A9, r20	; 0x8001a9 <SCORE_HUNDREDS_PLACE.2140>
				LCD_Cursor(0x30);
    12be:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <SCORE_HUNDREDS_PLACE.2140>
    12c2:	80 5d       	subi	r24, 0xD0	; 208

				SCORE_HUNDREDS_PLACE = 0;
    12c4:	09 dd       	rcall	.-1518   	; 0xcd8 <LCD_WriteData>
    12c6:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <SCORE_TENS_PLACE.2141>
				SCORE_TENS_PLACE = 0; 
    12ca:	80 5d       	subi	r24, 0xD0	; 208
				SCORE_ONES_PLACE = 0;
    12cc:	05 dd       	rcall	.-1526   	; 0xcd8 <LCD_WriteData>
    12ce:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <SCORE_ONES_PLACE.2142>

				if (SCORE > HIGH_SCORE)
    12d2:	80 5d       	subi	r24, 0xD0	; 208
    12d4:	01 dd       	rcall	.-1534   	; 0xcd8 <LCD_WriteData>
    12d6:	80 e3       	ldi	r24, 0x30	; 48
    12d8:	ff dc       	rcall	.-1538   	; 0xcd8 <LCD_WriteData>
    12da:	80 e3       	ldi	r24, 0x30	; 48
				{
					HIGH_SCORE&=0;
					HIGH_SCORE|=SCORE;
    12dc:	e6 dc       	rcall	.-1588   	; 0xcaa <LCD_Cursor>
    12de:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <SCORE_HUNDREDS_PLACE.2140>
					eeprom_write_byte ((uint8_t*)46 , HIGH_SCORE );
    12e2:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <SCORE_TENS_PLACE.2141>
    12e6:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <SCORE_ONES_PLACE.2142>
				}
			PREV_STATE = state;
    12ea:	60 91 b1 01 	lds	r22, 0x01B1	; 0x8001b1 <SCORE>
    12ee:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <HIGH_SCORE>
    12f2:	86 17       	cp	r24, r22
		break;
    12f4:	28 f4       	brcc	.+10     	; 0x1300 <LCD_OUTPUT_Tick+0x340>
    12f6:	60 93 b7 01 	sts	0x01B7, r22	; 0x8001b7 <HIGH_SCORE>
			}
			PREV_STATE = state;
		break;

		case LCD_O_DISPLAY_HIGH_SCORE:
			if (state != PREV_STATE)
    12fa:	8e e2       	ldi	r24, 0x2E	; 46
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	84 d1       	rcall	.+776    	; 0x1608 <eeprom_write_byte>
    1300:	88 e0       	ldi	r24, 0x08	; 8
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1308:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		case LCD_O_START:
			state = LCD_O_INIT;
		break;
		
		case LCD_O_INIT:
			state = LCD_O_WAIT;
    130c:	c8 e0       	ldi	r28, 0x08	; 8
    130e:	d0 e0       	ldi	r29, 0x00	; 0
				{
					state = LCD_O_DISPLAY_SCORE;
				}
				else if ((gameInPlay == 0x00) && (gameInPause == 0x01) && (gameEndTurn == 0x00) && (gameOver==0x00))
				{
					state = LCD_O_DISPLAY_PAUSE;
    1310:	30 c0       	rjmp	.+96     	; 0x1372 <LCD_OUTPUT_Tick+0x3b2>
    1312:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
			}
			PREV_STATE = state;
		break;

		case LCD_O_DISPLAY_AUTHOR:
		if (state != PREV_STATE)
    1316:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    131a:	03 97       	sbiw	r24, 0x03	; 3
    131c:	09 f0       	breq	.+2      	; 0x1320 <LCD_OUTPUT_Tick+0x360>
    131e:	07 cf       	rjmp	.-498    	; 0x112e <LCD_OUTPUT_Tick+0x16e>
    1320:	30 cf       	rjmp	.-416    	; 0x1182 <LCD_OUTPUT_Tick+0x1c2>
    1322:	c9 e0       	ldi	r28, 0x09	; 9
    1324:	d0 e0       	ldi	r29, 0x00	; 0
			score_count = 0;

		break;

		case LCD_O_DISPLAY_MENU:
			if (state != PREV_STATE)
    1326:	25 c0       	rjmp	.+74     	; 0x1372 <LCD_OUTPUT_Tick+0x3b2>
    1328:	c6 e0       	ldi	r28, 0x06	; 6
    132a:	d0 e0       	ldi	r29, 0x00	; 0
    132c:	22 c0       	rjmp	.+68     	; 0x1372 <LCD_OUTPUT_Tick+0x3b2>
    132e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1332:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
				}
				else if ((gameInPlay == 0x00) && (gameInPause == 0x00) && (gameEndTurn == 0x00) && (gameOver==0x00))
				{
					state = LCD_O_DISPLAY_MENU;
				}
				else if ((gameInPlay == 0x01) && (gameInPause == 0x00) && (gameEndTurn == 0x00) && (gameOver==0x00))
    1336:	04 97       	sbiw	r24, 0x04	; 4
    1338:	09 f0       	breq	.+2      	; 0x133c <LCD_OUTPUT_Tick+0x37c>
    133a:	2c cf       	rjmp	.-424    	; 0x1194 <LCD_OUTPUT_Tick+0x1d4>
    133c:	31 cf       	rjmp	.-414    	; 0x11a0 <LCD_OUTPUT_Tick+0x1e0>
				{
					state = LCD_O_DISPLAY_SCORE;
				}
				else if ((gameInPlay == 0x00) && (gameInPause == 0x01) && (gameEndTurn == 0x00) && (gameOver==0x00))
    133e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1342:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
				}
				else if ((gameInPlay == 0x01) && (gameInPause == 0x00) && (gameEndTurn == 0x01) && (gameOver==0x00))
				{
					state = LCD_O_DISPLAY_TURNS_REMAINING;
				}
				else if (((gameInPlay == 0x00) && (gameInPause == 0x00)) && ((gameEndTurn == 0x00) || (gameOver==0x01)))
    1346:	02 97       	sbiw	r24, 0x02	; 2
    1348:	09 f0       	breq	.+2      	; 0x134c <LCD_OUTPUT_Tick+0x38c>
    134a:	e2 ce       	rjmp	.-572    	; 0x1110 <LCD_OUTPUT_Tick+0x150>
    134c:	e7 ce       	rjmp	.-562    	; 0x111c <LCD_OUTPUT_Tick+0x15c>
				}
				else if ((gameInPlay == 0x00) && (gameInPause == 0x00) && (gameEndTurn == 0x01) && (gameOver==0x00))
				{
					state = LCD_O_DISPLAY_TURNS_REMAINING;
				}
				else if ((gameInPlay == 0x01) && (gameInPause == 0x00) && (gameEndTurn == 0x01) && (gameOver==0x00))
    134e:	81 30       	cpi	r24, 0x01	; 1
    1350:	09 f4       	brne	.+2      	; 0x1354 <LCD_OUTPUT_Tick+0x394>
    1352:	82 ce       	rjmp	.-764    	; 0x1058 <LCD_OUTPUT_Tick+0x98>
    1354:	b9 ce       	rjmp	.-654    	; 0x10c8 <LCD_OUTPUT_Tick+0x108>
    1356:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <gameInPause>

		default:
		break;
	}
	return state;
};
    135a:	9a ce       	rjmp	.-716    	; 0x1090 <LCD_OUTPUT_Tick+0xd0>
    135c:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <gameInPause>
    1360:	81 11       	cpse	r24, r1
    1362:	b2 ce       	rjmp	.-668    	; 0x10c8 <LCD_OUTPUT_Tick+0x108>
    1364:	a7 ce       	rjmp	.-690    	; 0x10b4 <LCD_OUTPUT_Tick+0xf4>
    1366:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <gameEndTurn>
    136a:	81 30       	cpi	r24, 0x01	; 1
    136c:	09 f0       	breq	.+2      	; 0x1370 <LCD_OUTPUT_Tick+0x3b0>
    136e:	ac ce       	rjmp	.-680    	; 0x10c8 <LCD_OUTPUT_Tick+0x108>
    1370:	9b ce       	rjmp	.-714    	; 0x10a8 <LCD_OUTPUT_Tick+0xe8>
    1372:	ce 01       	movw	r24, r28
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    1378:	1f 91       	pop	r17
    137a:	08 95       	ret

0000137c <TimerISR>:
	return state;
};


// == TimerISR() ==
void TimerISR() {
    137c:	ef 92       	push	r14
    137e:	ff 92       	push	r15
    1380:	0f 93       	push	r16
    1382:	1f 93       	push	r17
    1384:	cf 93       	push	r28
    1386:	df 93       	push	r29
    1388:	c8 eb       	ldi	r28, 0xB8	; 184
    138a:	d1 e0       	ldi	r29, 0x01	; 1
    138c:	0f 2e       	mov	r0, r31
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	ef 2e       	mov	r14, r31
    1392:	f2 e0       	ldi	r31, 0x02	; 2
    1394:	ff 2e       	mov	r15, r31
    1396:	f0 2d       	mov	r31, r0
    1398:	8e 01       	movw	r16, r28
	unsigned char i;
	for(i = 0; i < tasksNum; ++i) { // Heart of the scheduler code
		if (tasks[i].elapsedTime >= tasks[i].period)
    139a:	4e 81       	ldd	r20, Y+6	; 0x06
    139c:	5f 81       	ldd	r21, Y+7	; 0x07
    139e:	68 85       	ldd	r22, Y+8	; 0x08
    13a0:	79 85       	ldd	r23, Y+9	; 0x09
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	9b 81       	ldd	r25, Y+3	; 0x03
    13a6:	ac 81       	ldd	r26, Y+4	; 0x04
    13a8:	bd 81       	ldd	r27, Y+5	; 0x05
    13aa:	48 17       	cp	r20, r24
    13ac:	59 07       	cpc	r21, r25
    13ae:	6a 07       	cpc	r22, r26
    13b0:	7b 07       	cpc	r23, r27
    13b2:	58 f0       	brcs	.+22     	; 0x13ca <TimerISR+0x4e>
		{ // Ready
			tasks[i].state = tasks[i].TickFct(tasks[i].state);
    13b4:	ea 85       	ldd	r30, Y+10	; 0x0a
    13b6:	fb 85       	ldd	r31, Y+11	; 0x0b
    13b8:	88 81       	ld	r24, Y
    13ba:	99 81       	ldd	r25, Y+1	; 0x01
    13bc:	09 95       	icall
    13be:	99 83       	std	Y+1, r25	; 0x01
    13c0:	88 83       	st	Y, r24
			tasks[i].elapsedTime = 0;
    13c2:	1e 82       	std	Y+6, r1	; 0x06
    13c4:	1f 82       	std	Y+7, r1	; 0x07
    13c6:	18 86       	std	Y+8, r1	; 0x08
    13c8:	19 86       	std	Y+9, r1	; 0x09
		}
		tasks[i].elapsedTime += tasksPeriodGCD;
    13ca:	f8 01       	movw	r30, r16
    13cc:	86 81       	ldd	r24, Z+6	; 0x06
    13ce:	97 81       	ldd	r25, Z+7	; 0x07
    13d0:	a0 85       	ldd	r26, Z+8	; 0x08
    13d2:	b1 85       	ldd	r27, Z+9	; 0x09
    13d4:	01 96       	adiw	r24, 0x01	; 1
    13d6:	a1 1d       	adc	r26, r1
    13d8:	b1 1d       	adc	r27, r1
    13da:	86 83       	std	Z+6, r24	; 0x06
    13dc:	97 83       	std	Z+7, r25	; 0x07
    13de:	a0 87       	std	Z+8, r26	; 0x08
    13e0:	b1 87       	std	Z+9, r27	; 0x09
    13e2:	2c 96       	adiw	r28, 0x0c	; 12


// == TimerISR() ==
void TimerISR() {
	unsigned char i;
	for(i = 0; i < tasksNum; ++i) { // Heart of the scheduler code
    13e4:	ce 15       	cp	r28, r14
    13e6:	df 05       	cpc	r29, r15
    13e8:	b9 f6       	brne	.-82     	; 0x1398 <TimerISR+0x1c>
			tasks[i].elapsedTime = 0;
		}
		tasks[i].elapsedTime += tasksPeriodGCD;

	}
	TimerFlag = 1;
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <TimerFlag>
}
    13f0:	df 91       	pop	r29
    13f2:	cf 91       	pop	r28
    13f4:	1f 91       	pop	r17
    13f6:	0f 91       	pop	r16
    13f8:	ff 90       	pop	r15
    13fa:	ef 90       	pop	r14
    13fc:	08 95       	ret

000013fe <__vector_13>:
//	TimerFlag = 1;
//}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
    13fe:	1f 92       	push	r1
    1400:	0f 92       	push	r0
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	0f 92       	push	r0
    1406:	11 24       	eor	r1, r1
    1408:	0b b6       	in	r0, 0x3b	; 59
    140a:	0f 92       	push	r0
    140c:	2f 93       	push	r18
    140e:	3f 93       	push	r19
    1410:	4f 93       	push	r20
    1412:	5f 93       	push	r21
    1414:	6f 93       	push	r22
    1416:	7f 93       	push	r23
    1418:	8f 93       	push	r24
    141a:	9f 93       	push	r25
    141c:	af 93       	push	r26
    141e:	bf 93       	push	r27
    1420:	ef 93       	push	r30
    1422:	ff 93       	push	r31
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
    1424:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <_avr_timer_cntcurr>
    1428:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <_avr_timer_cntcurr+0x1>
    142c:	a0 91 b4 01 	lds	r26, 0x01B4	; 0x8001b4 <_avr_timer_cntcurr+0x2>
    1430:	b0 91 b5 01 	lds	r27, 0x01B5	; 0x8001b5 <_avr_timer_cntcurr+0x3>
    1434:	01 97       	sbiw	r24, 0x01	; 1
    1436:	a1 09       	sbc	r26, r1
    1438:	b1 09       	sbc	r27, r1
    143a:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <_avr_timer_cntcurr>
    143e:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <_avr_timer_cntcurr+0x1>
    1442:	a0 93 b4 01 	sts	0x01B4, r26	; 0x8001b4 <_avr_timer_cntcurr+0x2>
    1446:	b0 93 b5 01 	sts	0x01B5, r27	; 0x8001b5 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
    144a:	89 2b       	or	r24, r25
    144c:	8a 2b       	or	r24, r26
    144e:	8b 2b       	or	r24, r27
		TimerISR(); 				// Call the ISR that the user uses
    1450:	89 f4       	brne	.+34     	; 0x1474 <__vector_13+0x76>
		_avr_timer_cntcurr = _avr_timer_M;
    1452:	94 df       	rcall	.-216    	; 0x137c <TimerISR>
    1454:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <_avr_timer_M>
    1458:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <_avr_timer_M+0x1>
    145c:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <_avr_timer_M+0x2>
    1460:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <_avr_timer_M+0x3>
    1464:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <_avr_timer_cntcurr>
    1468:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <_avr_timer_cntcurr+0x1>
    146c:	a0 93 b4 01 	sts	0x01B4, r26	; 0x8001b4 <_avr_timer_cntcurr+0x2>
    1470:	b0 93 b5 01 	sts	0x01B5, r27	; 0x8001b5 <_avr_timer_cntcurr+0x3>
	}
}
    1474:	ff 91       	pop	r31
    1476:	ef 91       	pop	r30
    1478:	bf 91       	pop	r27
    147a:	af 91       	pop	r26
    147c:	9f 91       	pop	r25
    147e:	8f 91       	pop	r24
    1480:	7f 91       	pop	r23
    1482:	6f 91       	pop	r22
    1484:	5f 91       	pop	r21
    1486:	4f 91       	pop	r20
    1488:	3f 91       	pop	r19
    148a:	2f 91       	pop	r18
    148c:	0f 90       	pop	r0
    148e:	0b be       	out	0x3b, r0	; 59
    1490:	0f 90       	pop	r0
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	0f 90       	pop	r0
    1496:	1f 90       	pop	r1
    1498:	18 95       	reti

0000149a <main>:


int main() {

	DDRA = 0xFF; PORTA = 0x00; // Initialize to output to PORT A
    149a:	8f ef       	ldi	r24, 0xFF	; 255
    149c:	81 b9       	out	0x01, r24	; 1
    149e:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xFF; PORTB = 0x00;
    14a0:	84 b9       	out	0x04, r24	; 4
    14a2:	15 b8       	out	0x05, r1	; 5
	//DDRC = 0x03; PORTC = 0x04; // Before LCD implementation
	DDRC = 0xFB; PORTC = 0x04; // LCD control lines on Pin 4 and Pin 5. NES Outputs on Pin 1 and Pin 2. NES Read on Pin 3
    14a4:	9b ef       	ldi	r25, 0xFB	; 251
    14a6:	97 b9       	out	0x07, r25	; 7
    14a8:	94 e0       	ldi	r25, 0x04	; 4
    14aa:	98 b9       	out	0x08, r25	; 8
	DDRD = 0xFF; PORTD = 0x00; // LCD data lines
    14ac:	8a b9       	out	0x0a, r24	; 10
    14ae:	1b b8       	out	0x0b, r1	; 11

	unsigned char i = 0;
	tasks[i].state = P_START;
    14b0:	e8 eb       	ldi	r30, 0xB8	; 184
    14b2:	f1 e0       	ldi	r31, 0x01	; 1
    14b4:	11 82       	std	Z+1, r1	; 0x01
    14b6:	10 82       	st	Z, r1
	tasks[i].period = periodPaddle;
    14b8:	8e e1       	ldi	r24, 0x1E	; 30
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	a0 e0       	ldi	r26, 0x00	; 0
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	82 83       	std	Z+2, r24	; 0x02
    14c2:	93 83       	std	Z+3, r25	; 0x03
    14c4:	a4 83       	std	Z+4, r26	; 0x04
    14c6:	b5 83       	std	Z+5, r27	; 0x05
	tasks[i].elapsedTime = tasks[i].period;
    14c8:	86 83       	std	Z+6, r24	; 0x06
    14ca:	97 83       	std	Z+7, r25	; 0x07
    14cc:	a0 87       	std	Z+8, r26	; 0x08
    14ce:	b1 87       	std	Z+9, r27	; 0x09
	tasks[i].TickFct= &Paddle_Tick;
    14d0:	81 e3       	ldi	r24, 0x31	; 49
    14d2:	95 e0       	ldi	r25, 0x05	; 5
    14d4:	93 87       	std	Z+11, r25	; 0x0b
    14d6:	82 87       	std	Z+10, r24	; 0x0a
	++i;
	tasks[i].state = B_START;
    14d8:	15 86       	std	Z+13, r1	; 0x0d
    14da:	14 86       	std	Z+12, r1	; 0x0c
	tasks[i].period = periodBall;
    14dc:	48 ec       	ldi	r20, 0xC8	; 200
    14de:	50 e0       	ldi	r21, 0x00	; 0
    14e0:	60 e0       	ldi	r22, 0x00	; 0
    14e2:	70 e0       	ldi	r23, 0x00	; 0
    14e4:	46 87       	std	Z+14, r20	; 0x0e
    14e6:	57 87       	std	Z+15, r21	; 0x0f
    14e8:	60 8b       	std	Z+16, r22	; 0x10
    14ea:	71 8b       	std	Z+17, r23	; 0x11
	tasks[i].elapsedTime = tasks[i].period;
    14ec:	42 8b       	std	Z+18, r20	; 0x12
    14ee:	53 8b       	std	Z+19, r21	; 0x13
    14f0:	64 8b       	std	Z+20, r22	; 0x14
    14f2:	75 8b       	std	Z+21, r23	; 0x15
	tasks[i].TickFct= &Ball_Tick;
    14f4:	80 e6       	ldi	r24, 0x60	; 96
    14f6:	91 e0       	ldi	r25, 0x01	; 1
    14f8:	97 8b       	std	Z+23, r25	; 0x17
    14fa:	86 8b       	std	Z+22, r24	; 0x16
	++i;
	tasks[i].state = BRICK_START;
    14fc:	11 8e       	std	Z+25, r1	; 0x19
    14fe:	10 8e       	std	Z+24, r1	; 0x18
	tasks[i].period = periodBrick;
    1500:	82 e3       	ldi	r24, 0x32	; 50
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	a0 e0       	ldi	r26, 0x00	; 0
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	82 8f       	std	Z+26, r24	; 0x1a
    150a:	93 8f       	std	Z+27, r25	; 0x1b
    150c:	a4 8f       	std	Z+28, r26	; 0x1c
    150e:	b5 8f       	std	Z+29, r27	; 0x1d
	tasks[i].elapsedTime = tasks[i].period;
    1510:	86 8f       	std	Z+30, r24	; 0x1e
    1512:	97 8f       	std	Z+31, r25	; 0x1f
    1514:	a0 a3       	std	Z+32, r26	; 0x20
    1516:	b1 a3       	std	Z+33, r27	; 0x21
	tasks[i].TickFct= &Brick_Tick;
    1518:	8f e4       	ldi	r24, 0x4F	; 79
    151a:	94 e0       	ldi	r25, 0x04	; 4
    151c:	93 a3       	std	Z+35, r25	; 0x23
    151e:	82 a3       	std	Z+34, r24	; 0x22
	++i;
	tasks[i].state = O_START;
    1520:	15 a2       	std	Z+37, r1	; 0x25
    1522:	14 a2       	std	Z+36, r1	; 0x24
	tasks[i].period = periodOutput;
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	a0 e0       	ldi	r26, 0x00	; 0
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	86 a3       	std	Z+38, r24	; 0x26
    152e:	97 a3       	std	Z+39, r25	; 0x27
    1530:	a0 a7       	std	Z+40, r26	; 0x28
    1532:	b1 a7       	std	Z+41, r27	; 0x29
	tasks[i].elapsedTime = tasks[i].period;
    1534:	82 a7       	std	Z+42, r24	; 0x2a
    1536:	93 a7       	std	Z+43, r25	; 0x2b
    1538:	a4 a7       	std	Z+44, r26	; 0x2c
    153a:	b5 a7       	std	Z+45, r27	; 0x2d
	tasks[i].TickFct= &LED_MATRIX_OUTPUT_Tick;
    153c:	28 ee       	ldi	r18, 0xE8	; 232
    153e:	34 e0       	ldi	r19, 0x04	; 4
    1540:	37 a7       	std	Z+47, r19	; 0x2f
    1542:	26 a7       	std	Z+46, r18	; 0x2e
	++i;
	tasks[i].state = LCD_O_START;
    1544:	11 aa       	std	Z+49, r1	; 0x31
    1546:	10 aa       	std	Z+48, r1	; 0x30
	tasks[i].period = periodLCDOutput;
    1548:	42 ab       	std	Z+50, r20	; 0x32
    154a:	53 ab       	std	Z+51, r21	; 0x33
    154c:	64 ab       	std	Z+52, r22	; 0x34
    154e:	75 ab       	std	Z+53, r23	; 0x35
	tasks[i].elapsedTime = tasks[i].period;
    1550:	46 ab       	std	Z+54, r20	; 0x36
    1552:	57 ab       	std	Z+55, r21	; 0x37
    1554:	60 af       	std	Z+56, r22	; 0x38
    1556:	71 af       	std	Z+57, r23	; 0x39
	tasks[i].TickFct= &LCD_OUTPUT_Tick;
    1558:	20 ee       	ldi	r18, 0xE0	; 224
    155a:	37 e0       	ldi	r19, 0x07	; 7
    155c:	33 af       	std	Z+59, r19	; 0x3b
    155e:	22 af       	std	Z+58, r18	; 0x3a
	++i;
	tasks[i].state = G_START;
    1560:	15 ae       	std	Z+61, r1	; 0x3d
    1562:	14 ae       	std	Z+60, r1	; 0x3c
	tasks[i].period = periodGame;
    1564:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <tasks+0x3e>
    1568:	90 93 f7 01 	sts	0x01F7, r25	; 0x8001f7 <tasks+0x3f>
    156c:	a0 93 f8 01 	sts	0x01F8, r26	; 0x8001f8 <tasks+0x40>
    1570:	b0 93 f9 01 	sts	0x01F9, r27	; 0x8001f9 <tasks+0x41>
	tasks[i].elapsedTime = tasks[i].period;
    1574:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <tasks+0x42>
    1578:	90 93 fb 01 	sts	0x01FB, r25	; 0x8001fb <tasks+0x43>
    157c:	a0 93 fc 01 	sts	0x01FC, r26	; 0x8001fc <tasks+0x44>
    1580:	b0 93 fd 01 	sts	0x01FD, r27	; 0x8001fd <tasks+0x45>
	tasks[i].TickFct= &GAME_Tick;
    1584:	8e e8       	ldi	r24, 0x8E	; 142
    1586:	96 e0       	ldi	r25, 0x06	; 6
    1588:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <tasks+0x47>
    158c:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <tasks+0x46>
// 	if (1)
// 	{
//		eeprom_write_byte ((uint8_t*)46 , 0x01 );
// 	}
	
	HIGH_SCORE = eeprom_read_byte((uint8_t*)46);
    1590:	8e e2       	ldi	r24, 0x2E	; 46
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	1f d0       	rcall	.+62     	; 0x15d4 <eeprom_read_byte>
    1596:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <HIGH_SCORE>

 	TimerSet(tasksPeriodGCD);
    159a:	61 e0       	ldi	r22, 0x01	; 1
    159c:	70 e0       	ldi	r23, 0x00	; 0
    159e:	80 e0       	ldi	r24, 0x00	; 0
 	TimerOn();
    15a0:	90 e0       	ldi	r25, 0x00	; 0
	
	   // Initializes the LCD display
	   	LCD_init();
    15a2:	2f db       	rcall	.-2466   	; 0xc02 <TimerSet>
    15a4:	3f db       	rcall	.-2434   	; 0xc24 <TimerOn>
	   	LCD_Cursor(0x01);
    15a6:	89 db       	rcall	.-2286   	; 0xcba <LCD_init>
    15a8:	81 e0       	ldi	r24, 0x01	; 1
		//LCD_DisplayString(1, "Systems Online.");
		LCD_DisplayString(1, "LOADING...");
    15aa:	7f db       	rcall	.-2306   	; 0xcaa <LCD_Cursor>
    15ac:	66 e9       	ldi	r22, 0x96	; 150
    15ae:	71 e0       	ldi	r23, 0x01	; 1
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	9b db       	rcall	.-2250   	; 0xcea <LCD_DisplayString>

	while(1)
	{
		while (!TimerFlag);
    15b4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <TimerFlag>
    15b8:	88 23       	and	r24, r24
    15ba:	e1 f3       	breq	.-8      	; 0x15b4 <main+0x11a>
		TimerFlag = 0;			
    15bc:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <TimerFlag>
	}
    15c0:	f9 cf       	rjmp	.-14     	; 0x15b4 <main+0x11a>

000015c2 <__tablejump2__>:
    15c2:	ee 0f       	add	r30, r30
    15c4:	ff 1f       	adc	r31, r31
    15c6:	00 24       	eor	r0, r0
    15c8:	00 1c       	adc	r0, r0
    15ca:	0b be       	out	0x3b, r0	; 59
    15cc:	07 90       	elpm	r0, Z+
    15ce:	f6 91       	elpm	r31, Z
    15d0:	e0 2d       	mov	r30, r0
    15d2:	09 94       	ijmp

000015d4 <eeprom_read_byte>:
    15d4:	f9 99       	sbic	0x1f, 1	; 31
    15d6:	fe cf       	rjmp	.-4      	; 0x15d4 <eeprom_read_byte>
    15d8:	92 bd       	out	0x22, r25	; 34
    15da:	81 bd       	out	0x21, r24	; 33
    15dc:	f8 9a       	sbi	0x1f, 0	; 31
    15de:	99 27       	eor	r25, r25
    15e0:	80 b5       	in	r24, 0x20	; 32
    15e2:	08 95       	ret

000015e4 <eeprom_update_byte>:
    15e4:	26 2f       	mov	r18, r22

000015e6 <eeprom_update_r18>:
    15e6:	f9 99       	sbic	0x1f, 1	; 31
    15e8:	fe cf       	rjmp	.-4      	; 0x15e6 <eeprom_update_r18>
    15ea:	92 bd       	out	0x22, r25	; 34
    15ec:	81 bd       	out	0x21, r24	; 33
    15ee:	f8 9a       	sbi	0x1f, 0	; 31
    15f0:	01 97       	sbiw	r24, 0x01	; 1
    15f2:	00 b4       	in	r0, 0x20	; 32
    15f4:	02 16       	cp	r0, r18
    15f6:	39 f0       	breq	.+14     	; 0x1606 <eeprom_update_r18+0x20>
    15f8:	1f ba       	out	0x1f, r1	; 31
    15fa:	20 bd       	out	0x20, r18	; 32
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	f8 94       	cli
    1600:	fa 9a       	sbi	0x1f, 2	; 31
    1602:	f9 9a       	sbi	0x1f, 1	; 31
    1604:	0f be       	out	0x3f, r0	; 63
    1606:	08 95       	ret

00001608 <eeprom_write_byte>:
    1608:	26 2f       	mov	r18, r22

0000160a <eeprom_write_r18>:
    160a:	f9 99       	sbic	0x1f, 1	; 31
    160c:	fe cf       	rjmp	.-4      	; 0x160a <eeprom_write_r18>
    160e:	1f ba       	out	0x1f, r1	; 31
    1610:	92 bd       	out	0x22, r25	; 34
    1612:	81 bd       	out	0x21, r24	; 33
    1614:	20 bd       	out	0x20, r18	; 32
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	f8 94       	cli
    161a:	fa 9a       	sbi	0x1f, 2	; 31
    161c:	f9 9a       	sbi	0x1f, 1	; 31
    161e:	0f be       	out	0x3f, r0	; 63
    1620:	01 96       	adiw	r24, 0x01	; 1
    1622:	08 95       	ret

00001624 <_exit>:
    1624:	f8 94       	cli

00001626 <__stop_program>:
    1626:	ff cf       	rjmp	.-2      	; 0x1626 <__stop_program>
