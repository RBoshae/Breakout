
NES_Controller_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000292  00000326  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000292  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800104  00800104  0000032a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000035c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009b4  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084c  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ca  00000000  00000000  000015ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  000019b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050c  00000000  00000000  00001a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  00001f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001fcb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
   2:	00 00       	nop
   4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
   6:	00 00       	nop
   8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
   a:	00 00       	nop
   c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
   e:	00 00       	nop
  10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
  12:	00 00       	nop
  14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
  16:	00 00       	nop
  18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
  22:	00 00       	nop
  24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
  26:	00 00       	nop
  28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
  32:	00 00       	nop
  34:	74 c0       	rjmp	.+232    	; 0x11e <__vector_13>
  36:	00 00       	nop
  38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
  42:	00 00       	nop
  44:	47 c0       	rjmp	.+142    	; 0xd4 <__bad_interrupt>
  46:	00 00       	nop
  48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
  52:	00 00       	nop
  54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
  56:	00 00       	nop
  58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
  62:	00 00       	nop
  64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
  66:	00 00       	nop
  68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
  72:	00 00       	nop
  74:	2f c0       	rjmp	.+94     	; 0xd4 <__bad_interrupt>
  76:	00 00       	nop
  78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
  82:	00 00       	nop
  84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
  86:	00 00       	nop
  88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d6 00       	.word	0x00d6	; ????
  8e:	da 00       	.word	0x00da	; ????
  90:	de 00       	.word	0x00de	; ????
  92:	e3 00       	.word	0x00e3	; ????
  94:	f9 00       	.word	0x00f9	; ????
  96:	e9 00       	.word	0x00e9	; ????
  98:	03 01       	movw	r0, r6

0000009a <__ctors_end>:
  9a:	11 24       	eor	r1, r1
  9c:	1f be       	out	0x3f, r1	; 63
  9e:	cf ef       	ldi	r28, 0xFF	; 255
  a0:	d0 e4       	ldi	r29, 0x40	; 64
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
  a6:	11 e0       	ldi	r17, 0x01	; 1
  a8:	a0 e0       	ldi	r26, 0x00	; 0
  aa:	b1 e0       	ldi	r27, 0x01	; 1
  ac:	e2 e9       	ldi	r30, 0x92	; 146
  ae:	f2 e0       	ldi	r31, 0x02	; 2
  b0:	00 e0       	ldi	r16, 0x00	; 0
  b2:	0b bf       	out	0x3b, r16	; 59
  b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x14>
  b6:	07 90       	elpm	r0, Z+
  b8:	0d 92       	st	X+, r0
  ba:	a4 30       	cpi	r26, 0x04	; 4
  bc:	b1 07       	cpc	r27, r17
  be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0x10>

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a4 e0       	ldi	r26, 0x04	; 4
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	ac 30       	cpi	r26, 0x0C	; 12
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	be d0       	rcall	.+380    	; 0x24e <main>
  d2:	dd c0       	rjmp	.+442    	; 0x28e <_exit>

000000d4 <__bad_interrupt>:
  d4:	95 cf       	rjmp	.-214    	; 0x0 <__vectors>

000000d6 <TimerOn>:
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  d6:	8b e0       	ldi	r24, 0x0B	; 11
  d8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  dc:	8d e7       	ldi	r24, 0x7D	; 125
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  e4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  ee:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  f2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  fa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  fe:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 102:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 106:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
 10a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 10e:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 112:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
 116:	8f b7       	in	r24, 0x3f	; 63
 118:	80 68       	ori	r24, 0x80	; 128
 11a:	8f bf       	out	0x3f, r24	; 63
 11c:	08 95       	ret

0000011e <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
 12c:	af 93       	push	r26
 12e:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 130:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_cntcurr>
 134:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x1>
 138:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x2>
 13c:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x3>
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	a1 09       	sbc	r26, r1
 144:	b1 09       	sbc	r27, r1
 146:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
 14a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 14e:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 152:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 156:	89 2b       	or	r24, r25
 158:	8a 2b       	or	r24, r26
 15a:	8b 2b       	or	r24, r27
 15c:	99 f4       	brne	.+38     	; 0x184 <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <TimerFlag>
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 164:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 168:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 16c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 170:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 174:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_cntcurr>
 178:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_cntcurr+0x1>
 17c:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_cntcurr+0x2>
 180:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_cntcurr+0x3>
	}
}
 184:	bf 91       	pop	r27
 186:	af 91       	pop	r26
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <NESCont_Tick>:
const unsigned char  NUMBER_OF_BUTTONS = 0x07;

enum NESCont_States {NESCont_Start, INIT, PULL_LATCH_UP, PULL_LATCH_DOWN, CLOCK_RISE, READ_DATA, CLOCK_FALL} NESCont_State;
void NESCont_Tick()
{
	switch(NESCont_State) { // Transitions
 196:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <NESCont_State>
 19a:	8e 2f       	mov	r24, r30
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	87 30       	cpi	r24, 0x07	; 7
 1a0:	91 05       	cpc	r25, r1
 1a2:	a8 f5       	brcc	.+106    	; 0x20e <NESCont_Tick+0x78>
 1a4:	fc 01       	movw	r30, r24
 1a6:	ea 5b       	subi	r30, 0xBA	; 186
 1a8:	ff 4f       	sbci	r31, 0xFF	; 255
 1aa:	68 c0       	rjmp	.+208    	; 0x27c <__tablejump2__>

		case (NESCont_Start) :
			NESCont_State  = INIT;
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <NESCont_State>
		break;
 1b2:	30 c0       	rjmp	.+96     	; 0x214 <NESCont_Tick+0x7e>

		case (INIT) :
			NESCont_State = PULL_LATCH_UP;
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <NESCont_State>
		break;
 1ba:	2f c0       	rjmp	.+94     	; 0x21a <NESCont_Tick+0x84>

		case (PULL_LATCH_UP) :
			NESCont_State = PULL_LATCH_DOWN;
 1bc:	83 e0       	ldi	r24, 0x03	; 3
 1be:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <NESCont_State>
			PORTB = 0x02;
		break;

		case (PULL_LATCH_DOWN) :
			//PORTB = (0 << LATCH);
			PORTB = 0x00;
 1c2:	15 b8       	out	0x05, r1	; 5
		break;
 1c4:	08 95       	ret
		case (PULL_LATCH_UP) :
			NESCont_State = PULL_LATCH_DOWN;
		break;

		case (PULL_LATCH_DOWN) :
			NESCont_State = READ_DATA;
 1c6:	85 e0       	ldi	r24, 0x05	; 5
 1c8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <NESCont_State>
			serial_data_index = 0x00; 
 1cc:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
		break;
 1d0:	29 c0       	rjmp	.+82     	; 0x224 <NESCont_Tick+0x8e>

		case (READ_DATA) :
			if (serial_data_index <= NUMBER_OF_BUTTONS)
 1d2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1d6:	88 30       	cpi	r24, 0x08	; 8
 1d8:	30 f4       	brcc	.+12     	; 0x1e6 <NESCont_Tick+0x50>
			{
				NESCont_State = CLOCK_RISE;
 1da:	84 e0       	ldi	r24, 0x04	; 4
 1dc:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <NESCont_State>
			//controller_serial_data = (~PINB & 0x04) << serial_data_index | controller_serial_data;
		break;
		
		case (CLOCK_RISE) :
			//PORTB = (1 << CLOCK);
			PORTB = 0x01;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	85 b9       	out	0x05, r24	; 5
		break;
 1e4:	08 95       	ret
			{
				NESCont_State = CLOCK_RISE;
			}
			else
			{
				NESCont_State = PULL_LATCH_UP;
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <NESCont_State>
				serial_data_index = 0x00;
 1ec:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 1f0:	14 c0       	rjmp	.+40     	; 0x21a <NESCont_Tick+0x84>
			}
		break;

		case (CLOCK_RISE) :
				NESCont_State = CLOCK_FALL;
 1f2:	86 e0       	ldi	r24, 0x06	; 6
 1f4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <NESCont_State>
			PORTB = 0x01;
		break;

		case (CLOCK_FALL) :
			//PORTB = (0 << CLOCK);
			PORTB = 0x00;
 1f8:	15 b8       	out	0x05, r1	; 5
			serial_data_index++;
 1fa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1fe:	8f 5f       	subi	r24, 0xFF	; 255
 200:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
		break;
 204:	08 95       	ret
		case (CLOCK_RISE) :
				NESCont_State = CLOCK_FALL;
		break;

		case (CLOCK_FALL) :
			NESCont_State = READ_DATA;
 206:	85 e0       	ldi	r24, 0x05	; 5
 208:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <NESCont_State>
		break;
 20c:	0b c0       	rjmp	.+22     	; 0x224 <NESCont_Tick+0x8e>

		default :
			NESCont_State = INIT;
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <NESCont_State>
	}

	switch(NESCont_State) { // Actions

		case (INIT) :
			controller_serial_data = 0x00;
 214:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <controller_serial_data>
		break;
 218:	08 95       	ret

		case (PULL_LATCH_UP) :
			controller_serial_data = 0x00;
 21a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <controller_serial_data>
			//PORTB = (1 << LATCH);
			PORTB = 0x02;
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	85 b9       	out	0x05, r24	; 5
		break;
 222:	08 95       	ret
			//PORTB = (0 << LATCH);
			PORTB = 0x00;
		break;

		case (READ_DATA) :
			controller_serial_data = (((~PINB & 0x04) >> 2 ) << serial_data_index) | controller_serial_data;
 224:	83 b1       	in	r24, 0x03	; 3
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	80 95       	com	r24
 22a:	90 95       	com	r25
 22c:	82 fb       	bst	r24, 2
 22e:	22 27       	eor	r18, r18
 230:	20 f9       	bld	r18, 0
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	00 90 04 01 	lds	r0, 0x0104	; 0x800104 <__data_end>
 238:	02 c0       	rjmp	.+4      	; 0x23e <NESCont_Tick+0xa8>
 23a:	22 0f       	add	r18, r18
 23c:	33 1f       	adc	r19, r19
 23e:	0a 94       	dec	r0
 240:	e2 f7       	brpl	.-8      	; 0x23a <NESCont_Tick+0xa4>
 242:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <controller_serial_data>
 246:	28 2b       	or	r18, r24
 248:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <controller_serial_data>
 24c:	08 95       	ret

0000024e <main>:
	//DDRB = 0x06; PORTB = 0x01;
	
	//unsigned char PORTB_SETTING = ~(1 << LATCH) | ~(1 << CLOCK) | (1 << DATA); //sets latch and clock low
	//PORTB = PORTB_SETTING; DDRB = ~PORTB_SETTING;

	DDRB = 0xFB; PORTB = 0x04; 
 24e:	8b ef       	ldi	r24, 0xFB	; 251
 250:	84 b9       	out	0x04, r24	; 4
 252:	84 e0       	ldi	r24, 0x04	; 4
 254:	85 b9       	out	0x05, r24	; 5
	DDRC = 0xFF; PORTC = 0x00; // Initialize to output to PORT C
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	87 b9       	out	0x07, r24	; 7
	TimerOn();
	//TimerSet(1);

	while(1) {
		//GetNESControllerData();
		NESCont_Tick();		
 25a:	18 b8       	out	0x08, r1	; 8
 25c:	3c df       	rcall	.-392    	; 0xd6 <TimerOn>
		while (!TimerFlag)
 25e:	9b df       	rcall	.-202    	; 0x196 <NESCont_Tick>
 260:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <TimerFlag>
 264:	81 11       	cpse	r24, r1
		{
			TimerFlag = 0;
 266:	06 c0       	rjmp	.+12     	; 0x274 <main+0x26>
 268:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <TimerFlag>
	//TimerSet(1);

	while(1) {
		//GetNESControllerData();
		NESCont_Tick();		
		while (!TimerFlag)
 26c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <TimerFlag>
 270:	88 23       	and	r24, r24
		{
			TimerFlag = 0;
		}
		
		//Display results here!
		PORTC = controller_serial_data;
 272:	d1 f3       	breq	.-12     	; 0x268 <main+0x1a>
 274:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <controller_serial_data>
		
	}
 278:	88 b9       	out	0x08, r24	; 8
 27a:	f1 cf       	rjmp	.-30     	; 0x25e <main+0x10>

0000027c <__tablejump2__>:
 27c:	ee 0f       	add	r30, r30
 27e:	ff 1f       	adc	r31, r31
 280:	00 24       	eor	r0, r0
 282:	00 1c       	adc	r0, r0
 284:	0b be       	out	0x3b, r0	; 59
 286:	07 90       	elpm	r0, Z+
 288:	f6 91       	elpm	r31, Z
 28a:	e0 2d       	mov	r30, r0
 28c:	09 94       	ijmp

0000028e <_exit>:
 28e:	f8 94       	cli

00000290 <__stop_program>:
 290:	ff cf       	rjmp	.-2      	; 0x290 <__stop_program>
